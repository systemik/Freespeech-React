{"ast":null,"code":"'use strict';\n\nconst BaseManager = require('./BaseManager');\n/**\n * Manages API methods for VoiceStates and stores their cache.\n * @extends {BaseManager}\n */\n\n\nclass VoiceStateManager extends BaseManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable, {\n      name: 'VoiceState'\n    });\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n\n    this.guild = guild;\n  }\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, VoiceState>}\n   * @name VoiceStateManager#cache\n   */\n\n\n  add(data) {\n    let cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const existing = this.cache.get(data.user_id);\n    if (existing) return existing._patch(data);\n    const entry = new this.holds(this.guild, data);\n    if (cache) this.cache.set(data.user_id, entry);\n    return entry;\n  }\n\n}\n\nmodule.exports = VoiceStateManager;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/managers/VoiceStateManager.js"],"names":["BaseManager","require","VoiceStateManager","constructor","guild","iterable","client","name","add","data","cache","existing","get","user_id","_patch","entry","holds","set","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAA3B;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,iBAAN,SAAgCF,WAAhC,CAA4C;AAC1CG,EAAAA,WAAW,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAC3B,UAAMD,KAAK,CAACE,MAAZ,EAAoBD,QAApB,EAA8B;AAAEE,MAAAA,IAAI,EAAE;AAAR,KAA9B;AACA;AACJ;AACA;AACA;;AACI,SAAKH,KAAL,GAAaA,KAAb;AACD;AAED;AACF;AACA;AACA;AACA;;;AAEEI,EAAAA,GAAG,CAACC,IAAD,EAAqB;AAAA,QAAdC,KAAc,uEAAN,IAAM;AACtB,UAAMC,QAAQ,GAAG,KAAKD,KAAL,CAAWE,GAAX,CAAeH,IAAI,CAACI,OAApB,CAAjB;AACA,QAAIF,QAAJ,EAAc,OAAOA,QAAQ,CAACG,MAAT,CAAgBL,IAAhB,CAAP;AAEd,UAAMM,KAAK,GAAG,IAAI,KAAKC,KAAT,CAAe,KAAKZ,KAApB,EAA2BK,IAA3B,CAAd;AACA,QAAIC,KAAJ,EAAW,KAAKA,KAAL,CAAWO,GAAX,CAAeR,IAAI,CAACI,OAApB,EAA6BE,KAA7B;AACX,WAAOA,KAAP;AACD;;AAvByC;;AA0B5CG,MAAM,CAACC,OAAP,GAAiBjB,iBAAjB","sourcesContent":["'use strict';\n\nconst BaseManager = require('./BaseManager');\n\n/**\n * Manages API methods for VoiceStates and stores their cache.\n * @extends {BaseManager}\n */\nclass VoiceStateManager extends BaseManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable, { name: 'VoiceState' });\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, VoiceState>}\n   * @name VoiceStateManager#cache\n   */\n\n  add(data, cache = true) {\n    const existing = this.cache.get(data.user_id);\n    if (existing) return existing._patch(data);\n\n    const entry = new this.holds(this.guild, data);\n    if (cache) this.cache.set(data.user_id, entry);\n    return entry;\n  }\n}\n\nmodule.exports = VoiceStateManager;\n"]},"metadata":{},"sourceType":"script"}