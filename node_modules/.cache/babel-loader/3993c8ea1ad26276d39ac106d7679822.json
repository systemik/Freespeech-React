{"ast":null,"code":"'use strict';\n\nconst {\n  ClientApplicationAssetTypes,\n  Endpoints\n} = require('../../util/Constants');\n\nconst Snowflake = require('../../util/Snowflake');\n\nconst Base = require('../Base');\n\nconst AssetTypes = Object.keys(ClientApplicationAssetTypes);\n/**\n * Represents an OAuth2 Application.\n * @abstract\n */\n\nclass Application extends Base {\n  constructor(client, data) {\n    super(client);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The ID of the app\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    /**\n     * The name of the app\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The app's description\n     * @type {string}\n     */\n\n    this.description = data.description;\n    /**\n     * The app's icon hash\n     * @type {string}\n     */\n\n    this.icon = data.icon;\n  }\n  /**\n   * The timestamp the app was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time the app was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * A link to the application's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string} URL to the icon\n   */\n\n\n  iconURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.icon) return null;\n    return this.client.rest.cdn.AppIcon(this.id, this.icon, {\n      format,\n      size\n    });\n  }\n  /**\n   * A link to this application's cover image.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string} URL to the cover image\n   */\n\n\n  coverImage() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.cover) return null;\n    return Endpoints.CDN(this.client.options.http.cdn).AppIcon(this.id, this.cover, {\n      format,\n      size\n    });\n  }\n  /**\n   * Asset data.\n   * @typedef {Object} ApplicationAsset\n   * @property {Snowflake} id The asset ID\n   * @property {string} name The asset name\n   * @property {string} type The asset type\n   */\n\n  /**\n   * Gets the clients rich presence assets.\n   * @returns {Promise<Array<ApplicationAsset>>}\n   */\n\n\n  fetchAssets() {\n    return this.client.api.oauth2.applications(this.id).assets.get().then(assets => assets.map(a => ({\n      id: a.id,\n      name: a.name,\n      type: AssetTypes[a.type - 1]\n    })));\n  }\n  /**\n   * When concatenated with a string, this automatically returns the application's name instead of the\n   * Oauth2Application object.\n   * @returns {string}\n   * @example\n   * // Logs: Application name: My App\n   * console.log(`Application name: ${application}`);\n   */\n\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      createdTimestamp: true\n    });\n  }\n\n}\n\nmodule.exports = Application;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/interfaces/Application.js"],"names":["ClientApplicationAssetTypes","Endpoints","require","Snowflake","Base","AssetTypes","Object","keys","Application","constructor","client","data","_patch","id","name","description","icon","createdTimestamp","deconstruct","timestamp","createdAt","Date","iconURL","format","size","rest","cdn","AppIcon","coverImage","cover","CDN","options","http","fetchAssets","api","oauth2","applications","assets","get","then","map","a","type","toString","toJSON","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { ClientApplicationAssetTypes, Endpoints } = require('../../util/Constants');\nconst Snowflake = require('../../util/Snowflake');\nconst Base = require('../Base');\n\nconst AssetTypes = Object.keys(ClientApplicationAssetTypes);\n\n/**\n * Represents an OAuth2 Application.\n * @abstract\n */\nclass Application extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The ID of the app\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of the app\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The app's description\n     * @type {string}\n     */\n    this.description = data.description;\n\n    /**\n     * The app's icon hash\n     * @type {string}\n     */\n    this.icon = data.icon;\n  }\n\n  /**\n   * The timestamp the app was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the app was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the application's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string} URL to the icon\n   */\n  iconURL({ format, size } = {}) {\n    if (!this.icon) return null;\n    return this.client.rest.cdn.AppIcon(this.id, this.icon, { format, size });\n  }\n\n  /**\n   * A link to this application's cover image.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string} URL to the cover image\n   */\n  coverImage({ format, size } = {}) {\n    if (!this.cover) return null;\n    return Endpoints.CDN(this.client.options.http.cdn).AppIcon(this.id, this.cover, { format, size });\n  }\n\n  /**\n   * Asset data.\n   * @typedef {Object} ApplicationAsset\n   * @property {Snowflake} id The asset ID\n   * @property {string} name The asset name\n   * @property {string} type The asset type\n   */\n\n  /**\n   * Gets the clients rich presence assets.\n   * @returns {Promise<Array<ApplicationAsset>>}\n   */\n  fetchAssets() {\n    return this.client.api.oauth2\n      .applications(this.id)\n      .assets.get()\n      .then(assets =>\n        assets.map(a => ({\n          id: a.id,\n          name: a.name,\n          type: AssetTypes[a.type - 1],\n        })),\n      );\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the application's name instead of the\n   * Oauth2Application object.\n   * @returns {string}\n   * @example\n   * // Logs: Application name: My App\n   * console.log(`Application name: ${application}`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({ createdTimestamp: true });\n  }\n}\n\nmodule.exports = Application;\n"]},"metadata":{},"sourceType":"script"}