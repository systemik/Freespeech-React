{"ast":null,"code":"'use strict';\n\nconst APIRequest = require('./APIRequest');\n\nconst routeBuilder = require('./APIRouter');\n\nconst RequestHandler = require('./RequestHandler');\n\nconst {\n  Error\n} = require('../errors');\n\nconst Collection = require('../util/Collection');\n\nconst {\n  Endpoints\n} = require('../util/Constants');\n\nclass RESTManager {\n  constructor(client) {\n    let tokenPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Bot';\n    this.client = client;\n    this.handlers = new Collection();\n    this.tokenPrefix = tokenPrefix;\n    this.versioned = true;\n    this.globalTimeout = null;\n\n    if (client.options.restSweepInterval > 0) {\n      client.setInterval(() => {\n        this.handlers.sweep(handler => handler._inactive);\n      }, client.options.restSweepInterval * 1000);\n    }\n  }\n\n  get api() {\n    return routeBuilder(this);\n  }\n\n  getAuth() {\n    const token = this.client.token || this.client.accessToken;\n    if (token) return `${this.tokenPrefix} ${token}`;\n    throw new Error('TOKEN_MISSING');\n  }\n\n  get cdn() {\n    return Endpoints.CDN(this.client.options.http.cdn);\n  }\n\n  request(method, url) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const apiRequest = new APIRequest(this, method, url, options);\n    let handler = this.handlers.get(apiRequest.route);\n\n    if (!handler) {\n      handler = new RequestHandler(this);\n      this.handlers.set(apiRequest.route, handler);\n    }\n\n    return handler.push(apiRequest);\n  }\n\n  get endpoint() {\n    return this.client.options.http.api;\n  }\n\n  set endpoint(endpoint) {\n    this.client.options.http.api = endpoint;\n  }\n\n}\n\nmodule.exports = RESTManager;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/rest/RESTManager.js"],"names":["APIRequest","require","routeBuilder","RequestHandler","Error","Collection","Endpoints","RESTManager","constructor","client","tokenPrefix","handlers","versioned","globalTimeout","options","restSweepInterval","setInterval","sweep","handler","_inactive","api","getAuth","token","accessToken","cdn","CDN","http","request","method","url","apiRequest","get","route","set","push","endpoint","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,aAAD,CAA5B;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAD,CAA9B;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAYH,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,oBAAD,CAA1B;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAgBL,OAAO,CAAC,mBAAD,CAA7B;;AAEA,MAAMM,WAAN,CAAkB;AAChBC,EAAAA,WAAW,CAACC,MAAD,EAA8B;AAAA,QAArBC,WAAqB,uEAAP,KAAO;AACvC,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,QAAL,GAAgB,IAAIN,UAAJ,EAAhB;AACA,SAAKK,WAAL,GAAmBA,WAAnB;AACA,SAAKE,SAAL,GAAiB,IAAjB;AACA,SAAKC,aAAL,GAAqB,IAArB;;AACA,QAAIJ,MAAM,CAACK,OAAP,CAAeC,iBAAf,GAAmC,CAAvC,EAA0C;AACxCN,MAAAA,MAAM,CAACO,WAAP,CAAmB,MAAM;AACvB,aAAKL,QAAL,CAAcM,KAAd,CAAoBC,OAAO,IAAIA,OAAO,CAACC,SAAvC;AACD,OAFD,EAEGV,MAAM,CAACK,OAAP,CAAeC,iBAAf,GAAmC,IAFtC;AAGD;AACF;;AAEM,MAAHK,GAAG,GAAG;AACR,WAAOlB,YAAY,CAAC,IAAD,CAAnB;AACD;;AAEDmB,EAAAA,OAAO,GAAG;AACR,UAAMC,KAAK,GAAG,KAAKb,MAAL,CAAYa,KAAZ,IAAqB,KAAKb,MAAL,CAAYc,WAA/C;AACA,QAAID,KAAJ,EAAW,OAAQ,GAAE,KAAKZ,WAAY,IAAGY,KAAM,EAApC;AACX,UAAM,IAAIlB,KAAJ,CAAU,eAAV,CAAN;AACD;;AAEM,MAAHoB,GAAG,GAAG;AACR,WAAOlB,SAAS,CAACmB,GAAV,CAAc,KAAKhB,MAAL,CAAYK,OAAZ,CAAoBY,IAApB,CAAyBF,GAAvC,CAAP;AACD;;AAEDG,EAAAA,OAAO,CAACC,MAAD,EAASC,GAAT,EAA4B;AAAA,QAAdf,OAAc,uEAAJ,EAAI;AACjC,UAAMgB,UAAU,GAAG,IAAI9B,UAAJ,CAAe,IAAf,EAAqB4B,MAArB,EAA6BC,GAA7B,EAAkCf,OAAlC,CAAnB;AACA,QAAII,OAAO,GAAG,KAAKP,QAAL,CAAcoB,GAAd,CAAkBD,UAAU,CAACE,KAA7B,CAAd;;AAEA,QAAI,CAACd,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAG,IAAIf,cAAJ,CAAmB,IAAnB,CAAV;AACA,WAAKQ,QAAL,CAAcsB,GAAd,CAAkBH,UAAU,CAACE,KAA7B,EAAoCd,OAApC;AACD;;AAED,WAAOA,OAAO,CAACgB,IAAR,CAAaJ,UAAb,CAAP;AACD;;AAEW,MAARK,QAAQ,GAAG;AACb,WAAO,KAAK1B,MAAL,CAAYK,OAAZ,CAAoBY,IAApB,CAAyBN,GAAhC;AACD;;AAEW,MAARe,QAAQ,CAACA,QAAD,EAAW;AACrB,SAAK1B,MAAL,CAAYK,OAAZ,CAAoBY,IAApB,CAAyBN,GAAzB,GAA+Be,QAA/B;AACD;;AA9Ce;;AAiDlBC,MAAM,CAACC,OAAP,GAAiB9B,WAAjB","sourcesContent":["'use strict';\n\nconst APIRequest = require('./APIRequest');\nconst routeBuilder = require('./APIRouter');\nconst RequestHandler = require('./RequestHandler');\nconst { Error } = require('../errors');\nconst Collection = require('../util/Collection');\nconst { Endpoints } = require('../util/Constants');\n\nclass RESTManager {\n  constructor(client, tokenPrefix = 'Bot') {\n    this.client = client;\n    this.handlers = new Collection();\n    this.tokenPrefix = tokenPrefix;\n    this.versioned = true;\n    this.globalTimeout = null;\n    if (client.options.restSweepInterval > 0) {\n      client.setInterval(() => {\n        this.handlers.sweep(handler => handler._inactive);\n      }, client.options.restSweepInterval * 1000);\n    }\n  }\n\n  get api() {\n    return routeBuilder(this);\n  }\n\n  getAuth() {\n    const token = this.client.token || this.client.accessToken;\n    if (token) return `${this.tokenPrefix} ${token}`;\n    throw new Error('TOKEN_MISSING');\n  }\n\n  get cdn() {\n    return Endpoints.CDN(this.client.options.http.cdn);\n  }\n\n  request(method, url, options = {}) {\n    const apiRequest = new APIRequest(this, method, url, options);\n    let handler = this.handlers.get(apiRequest.route);\n\n    if (!handler) {\n      handler = new RequestHandler(this);\n      this.handlers.set(apiRequest.route, handler);\n    }\n\n    return handler.push(apiRequest);\n  }\n\n  get endpoint() {\n    return this.client.options.http.api;\n  }\n\n  set endpoint(endpoint) {\n    this.client.options.http.api = endpoint;\n  }\n}\n\nmodule.exports = RESTManager;\n"]},"metadata":{},"sourceType":"script"}