{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/freespeechreact/src/Tile.js\";\nimport React from 'react';\nimport ButtonBase from '@mui/material/ButtonBase';\nimport './styles/Tile.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tile(props) {\n  const isFolder = props.isFolder || false;\n  const tileImage = 'https://img.icons8.com/fluency/96/000000/' + props.image + '.png';\n  /* If input name > 10 characters, truncate with ... */\n\n  /* This is prob a temp fix */\n\n  let tileName = props.name;\n\n  if (tileName.length > 10) {\n    tileName = tileName.substring(0, 7) + '...';\n  }\n  /* Handles folder/non-folder logic with icon display */\n\n\n  let icon;\n\n  if (isFolder) {\n    icon = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tileOverlap\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"tileIconOverlap\",\n        src: tileImage,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"tileFolderOverlap\",\n        src: \"https://img.icons8.com/fluency/96/000000/folder.png\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this);\n  } else {\n    icon = /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"tileIcon\",\n      src: tileImage,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 16\n    }, this);\n  }\n\n  const sendDataToTileGrid = () => {\n    props.func(props);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Tile\",\n    children: /*#__PURE__*/_jsxDEV(ButtonBase, {\n      onClick: sendDataToTileGrid,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tileContent\",\n        children: [icon, /*#__PURE__*/_jsxDEV(\"p\", {\n          children: tileName || 'Untitled'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Tile;\nexport default Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/Users/macbookpro/Desktop/freespeechreact/src/Tile.js"],"names":["React","ButtonBase","Tile","props","isFolder","tileImage","image","tileName","name","length","substring","icon","sendDataToTileGrid","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAO,mBAAP;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAEjB,QAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAN,IAAkB,KAAnC;AACA,QAAMC,SAAS,GAAG,8CAA4CF,KAAK,CAACG,KAAlD,GAAwD,MAA1E;AAEA;;AACA;;AACA,MAAIC,QAAQ,GAAGJ,KAAK,CAACK,IAArB;;AACA,MAAGD,QAAQ,CAACE,MAAT,GAAkB,EAArB,EAAyB;AACrBF,IAAAA,QAAQ,GAAGA,QAAQ,CAACG,SAAT,CAAmB,CAAnB,EAAqB,CAArB,IAA0B,KAArC;AACH;AAED;;;AACA,MAAIC,IAAJ;;AACA,MAAGP,QAAH,EAAa;AACTO,IAAAA,IAAI,gBAAG;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACK;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAiC,QAAA,GAAG,EAAEN,SAAtC;AAAiD,QAAA,GAAG,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA,cADL,eAEK;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAmC,QAAA,GAAG,EAAC,qDAAvC;AAA6F,QAAA,GAAG,EAAC;AAAjG;AAAA;AAAA;AAAA;AAAA,cAFL;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAIH,GALD,MAKO;AACHM,IAAAA,IAAI,gBAAG;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,GAAG,EAAEN,SAA/B;AAA0C,MAAA,GAAG,EAAC;AAA9C;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,QAAMO,kBAAkB,GAAG,MAAM;AAC7BT,IAAAA,KAAK,CAACU,IAAN,CAAWV,KAAX;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACI,QAAC,UAAD;AAAY,MAAA,OAAO,EAAES,kBAArB;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,mBACKD,IADL,eAEI;AAAA,oBAAIJ,QAAQ,IAAI;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;KArCQL,I;AAuCT,eAAeA,IAAf","sourcesContent":["import React from 'react';\nimport ButtonBase from '@mui/material/ButtonBase';\nimport './styles/Tile.css';\n\nfunction Tile(props) {\n\n    const isFolder = props.isFolder || false;\n    const tileImage = 'https://img.icons8.com/fluency/96/000000/'+props.image+'.png';\n\n    /* If input name > 10 characters, truncate with ... */\n    /* This is prob a temp fix */\n    let tileName = props.name;\n    if(tileName.length > 10) {\n        tileName = tileName.substring(0,7) + '...';\n    }\n\n    /* Handles folder/non-folder logic with icon display */\n    let icon;\n    if(isFolder) {\n        icon = <div className='tileOverlap'>\n                    <img className='tileIconOverlap' src={tileImage} alt='' />\n                    <img className='tileFolderOverlap' src='https://img.icons8.com/fluency/96/000000/folder.png' alt='' />\n                </div>;\n    } else {\n        icon = <img className='tileIcon' src={tileImage} alt='' />;\n    }\n\n    const sendDataToTileGrid = () => {\n        props.func(props);\n    }    \n\n    return(\n        <div className=\"Tile\">\n            <ButtonBase onClick={sendDataToTileGrid}>\n                <div className='tileContent'>\n                    {icon}\n                    <p>{tileName || 'Untitled'}</p>\n                </div>\n            </ButtonBase>\n        </div>\n    );\n}\n\nexport default Tile;"]},"metadata":{},"sourceType":"module"}