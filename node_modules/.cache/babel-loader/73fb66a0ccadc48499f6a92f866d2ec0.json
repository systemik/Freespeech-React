{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/freespeechreact/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './styles/App.css';\nimport TileGrid from './TileGrid.js';\nimport SentenceBuilder from './SentenceBuilder';\nimport * as React from 'react';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /* Theme handling */\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = React.useMemo(() => createTheme({\n    palette: {\n      mode: prefersDarkMode ? 'dark' : 'light'\n    }\n  }), [prefersDarkMode]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(SentenceBuilder, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileGrid, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 6\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"s6GPQHExF/FrDfB4Jza+zlx2KnY=\", false, function () {\n  return [useMediaQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/macbookpro/Desktop/freespeechreact/src/App.js"],"names":["TileGrid","SentenceBuilder","React","useMediaQuery","createTheme","ThemeProvider","App","prefersDarkMode","theme","useMemo","palette","mode"],"mappings":";;;AAAA,OAAO,kBAAP;AAEA,OAAOA,QAAP,MAAqB,eAArB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,sBAA3C;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb;AACA,QAAMC,eAAe,GAAGJ,aAAa,CAAC,8BAAD,CAArC;AACA,QAAMK,KAAK,GAAGN,KAAK,CAACO,OAAN,CACZ,MACEL,WAAW,CAAC;AACVM,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAEJ,eAAe,GAAG,MAAH,GAAY;AAD1B;AADC,GAAD,CAFD,EAOZ,CAACA,eAAD,CAPY,CAAd;AAUA,sBACE;AAAA,2BACC,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEC,KAAtB;AAAA,8BAEG,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cAFH,eAGG,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AADD,mBADF;AAUD;;GAxBQF,G;UAGiBH,a;;;KAHjBG,G;AA0BT,eAAeA,GAAf","sourcesContent":["import './styles/App.css';\n\nimport TileGrid from './TileGrid.js'\nimport SentenceBuilder from './SentenceBuilder';\n\nimport * as React from 'react';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { createTheme, ThemeProvider } from '@mui/material/styles'; \n\nfunction App() {\n\n  /* Theme handling */\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = React.useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n  return (\n    <>\n     <ThemeProvider theme={theme}>\n        {/* <CssBaseline /> */}\n        <SentenceBuilder />\n        <TileGrid />\n      </ThemeProvider>\n    </>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}