{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst DMChannel = require('../../structures/DMChannel');\n\nconst {\n  Events\n} = require('../../util/Constants');\n\nclass ChannelDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n    let channel = client.channels.cache.get(data.id);\n\n    if (channel) {\n      client.channels.remove(channel.id);\n      channel.deleted = true;\n\n      if (channel.messages && !(channel instanceof DMChannel)) {\n        for (const message of channel.messages.cache.values()) {\n          message.deleted = true;\n        }\n      }\n      /**\n       * Emitted whenever a channel is deleted.\n       * @event Client#channelDelete\n       * @param {DMChannel|GuildChannel} channel The channel that was deleted\n       */\n\n\n      client.emit(Events.CHANNEL_DELETE, channel);\n    }\n\n    return {\n      channel\n    };\n  }\n\n}\n\nmodule.exports = ChannelDeleteAction;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/client/actions/ChannelDelete.js"],"names":["Action","require","DMChannel","Events","ChannelDeleteAction","constructor","client","deleted","Map","handle","data","channel","channels","cache","get","id","remove","messages","message","values","emit","CHANNEL_DELETE","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,4BAAD,CAAzB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAaF,OAAO,CAAC,sBAAD,CAA1B;;AAEA,MAAMG,mBAAN,SAAkCJ,MAAlC,CAAyC;AACvCK,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,UAAMA,MAAN;AACA,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACD;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAMJ,MAAM,GAAG,KAAKA,MAApB;AACA,QAAIK,OAAO,GAAGL,MAAM,CAACM,QAAP,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA0BJ,IAAI,CAACK,EAA/B,CAAd;;AAEA,QAAIJ,OAAJ,EAAa;AACXL,MAAAA,MAAM,CAACM,QAAP,CAAgBI,MAAhB,CAAuBL,OAAO,CAACI,EAA/B;AACAJ,MAAAA,OAAO,CAACJ,OAAR,GAAkB,IAAlB;;AACA,UAAII,OAAO,CAACM,QAAR,IAAoB,EAAEN,OAAO,YAAYT,SAArB,CAAxB,EAAyD;AACvD,aAAK,MAAMgB,OAAX,IAAsBP,OAAO,CAACM,QAAR,CAAiBJ,KAAjB,CAAuBM,MAAvB,EAAtB,EAAuD;AACrDD,UAAAA,OAAO,CAACX,OAAR,GAAkB,IAAlB;AACD;AACF;AACD;AACN;AACA;AACA;AACA;;;AACMD,MAAAA,MAAM,CAACc,IAAP,CAAYjB,MAAM,CAACkB,cAAnB,EAAmCV,OAAnC;AACD;;AAED,WAAO;AAAEA,MAAAA;AAAF,KAAP;AACD;;AA3BsC;;AA8BzCW,MAAM,CAACC,OAAP,GAAiBnB,mBAAjB","sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst DMChannel = require('../../structures/DMChannel');\nconst { Events } = require('../../util/Constants');\n\nclass ChannelDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n    let channel = client.channels.cache.get(data.id);\n\n    if (channel) {\n      client.channels.remove(channel.id);\n      channel.deleted = true;\n      if (channel.messages && !(channel instanceof DMChannel)) {\n        for (const message of channel.messages.cache.values()) {\n          message.deleted = true;\n        }\n      }\n      /**\n       * Emitted whenever a channel is deleted.\n       * @event Client#channelDelete\n       * @param {DMChannel|GuildChannel} channel The channel that was deleted\n       */\n      client.emit(Events.CHANNEL_DELETE, channel);\n    }\n\n    return { channel };\n  }\n}\n\nmodule.exports = ChannelDeleteAction;\n"]},"metadata":{},"sourceType":"script"}