{"ast":null,"code":"'use strict';\n\nconst Integration = require('./Integration');\n\nconst Webhook = require('./Webhook');\n\nconst Collection = require('../util/Collection');\n\nconst {\n  PartialTypes\n} = require('../util/Constants');\n\nconst Snowflake = require('../util/Snowflake');\n\nconst Util = require('../util/Util');\n/**\n * The target type of an entry, e.g. `GUILD`. Here are the available types:\n * * GUILD\n * * CHANNEL\n * * USER\n * * ROLE\n * * INVITE\n * * WEBHOOK\n * * EMOJI\n * * MESSAGE\n * * INTEGRATION\n * @typedef {string} AuditLogTargetType\n */\n\n/**\n * Key mirror of all available audit log targets.\n * @name GuildAuditLogs.Targets\n * @type {Object<string, string>}\n */\n\n\nconst Targets = {\n  ALL: 'ALL',\n  GUILD: 'GUILD',\n  CHANNEL: 'CHANNEL',\n  USER: 'USER',\n  ROLE: 'ROLE',\n  INVITE: 'INVITE',\n  WEBHOOK: 'WEBHOOK',\n  EMOJI: 'EMOJI',\n  MESSAGE: 'MESSAGE',\n  INTEGRATION: 'INTEGRATION',\n  UNKNOWN: 'UNKNOWN'\n};\n/**\n * The action of an entry. Here are the available actions:\n * * ALL: null\n * * GUILD_UPDATE: 1\n * * CHANNEL_CREATE: 10\n * * CHANNEL_UPDATE: 11\n * * CHANNEL_DELETE: 12\n * * CHANNEL_OVERWRITE_CREATE: 13\n * * CHANNEL_OVERWRITE_UPDATE: 14\n * * CHANNEL_OVERWRITE_DELETE: 15\n * * MEMBER_KICK: 20\n * * MEMBER_PRUNE: 21\n * * MEMBER_BAN_ADD: 22\n * * MEMBER_BAN_REMOVE: 23\n * * MEMBER_UPDATE: 24\n * * MEMBER_ROLE_UPDATE: 25\n * * MEMBER_MOVE: 26\n * * MEMBER_DISCONNECT: 27\n * * BOT_ADD: 28,\n * * ROLE_CREATE: 30\n * * ROLE_UPDATE: 31\n * * ROLE_DELETE: 32\n * * INVITE_CREATE: 40\n * * INVITE_UPDATE: 41\n * * INVITE_DELETE: 42\n * * WEBHOOK_CREATE: 50\n * * WEBHOOK_UPDATE: 51\n * * WEBHOOK_DELETE: 52\n * * EMOJI_CREATE: 60\n * * EMOJI_UPDATE: 61\n * * EMOJI_DELETE: 62\n * * MESSAGE_DELETE: 72\n * * MESSAGE_BULK_DELETE: 73\n * * MESSAGE_PIN: 74\n * * MESSAGE_UNPIN: 75\n * * INTEGRATION_CREATE: 80\n * * INTEGRATION_UPDATE: 81\n * * INTEGRATION_DELETE: 82\n * @typedef {?number|string} AuditLogAction\n */\n\n/**\n * All available actions keyed under their names to their numeric values.\n * @name GuildAuditLogs.Actions\n * @type {Object<string, number>}\n */\n\nconst Actions = {\n  ALL: null,\n  GUILD_UPDATE: 1,\n  CHANNEL_CREATE: 10,\n  CHANNEL_UPDATE: 11,\n  CHANNEL_DELETE: 12,\n  CHANNEL_OVERWRITE_CREATE: 13,\n  CHANNEL_OVERWRITE_UPDATE: 14,\n  CHANNEL_OVERWRITE_DELETE: 15,\n  MEMBER_KICK: 20,\n  MEMBER_PRUNE: 21,\n  MEMBER_BAN_ADD: 22,\n  MEMBER_BAN_REMOVE: 23,\n  MEMBER_UPDATE: 24,\n  MEMBER_ROLE_UPDATE: 25,\n  MEMBER_MOVE: 26,\n  MEMBER_DISCONNECT: 27,\n  BOT_ADD: 28,\n  ROLE_CREATE: 30,\n  ROLE_UPDATE: 31,\n  ROLE_DELETE: 32,\n  INVITE_CREATE: 40,\n  INVITE_UPDATE: 41,\n  INVITE_DELETE: 42,\n  WEBHOOK_CREATE: 50,\n  WEBHOOK_UPDATE: 51,\n  WEBHOOK_DELETE: 52,\n  EMOJI_CREATE: 60,\n  EMOJI_UPDATE: 61,\n  EMOJI_DELETE: 62,\n  MESSAGE_DELETE: 72,\n  MESSAGE_BULK_DELETE: 73,\n  MESSAGE_PIN: 74,\n  MESSAGE_UNPIN: 75,\n  INTEGRATION_CREATE: 80,\n  INTEGRATION_UPDATE: 81,\n  INTEGRATION_DELETE: 82\n};\n/**\n * Audit logs entries are held in this class.\n */\n\nclass GuildAuditLogs {\n  constructor(guild, data) {\n    if (data.users) for (const user of data.users) guild.client.users.add(user);\n    /**\n     * Cached webhooks\n     * @type {Collection<Snowflake, Webhook>}\n     * @private\n     */\n\n    this.webhooks = new Collection();\n\n    if (data.webhooks) {\n      for (const hook of data.webhooks) {\n        this.webhooks.set(hook.id, new Webhook(guild.client, hook));\n      }\n    }\n    /**\n     * Cached integrations\n     * @type {Collection<Snowflake, Integration>}\n     * @private\n     */\n\n\n    this.integrations = new Collection();\n\n    if (data.integrations) {\n      for (const integration of data.integrations) {\n        this.integrations.set(integration.id, new Integration(guild.client, integration, guild));\n      }\n    }\n    /**\n     * The entries for this guild's audit logs\n     * @type {Collection<Snowflake, GuildAuditLogsEntry>}\n     */\n\n\n    this.entries = new Collection();\n\n    for (const item of data.audit_log_entries) {\n      const entry = new GuildAuditLogsEntry(this, guild, item);\n      this.entries.set(entry.id, entry);\n    }\n  }\n  /**\n   * Handles possible promises for entry targets.\n   * @returns {Promise<GuildAuditLogs>}\n   */\n\n\n  static build() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const logs = new GuildAuditLogs(...args);\n    return Promise.all(logs.entries.map(e => e.target)).then(() => logs);\n  }\n  /**\n   * The target of an entry. It can be one of:\n   * * A guild\n   * * A user\n   * * A role\n   * * An emoji\n   * * An invite\n   * * A webhook\n   * * An integration\n   * * An object with an id key if target was deleted\n   * * An object where the keys represent either the new value or the old value\n   * @typedef {?Object|Guild|User|Role|GuildEmoji|Invite|Webhook|Integration} AuditLogEntryTarget\n   */\n\n  /**\n   * Finds the target type from the entry action.\n   * @param {AuditLogAction} target The action target\n   * @returns {AuditLogTargetType}\n   */\n\n\n  static targetType(target) {\n    if (target < 10) return Targets.GUILD;\n    if (target < 20) return Targets.CHANNEL;\n    if (target < 30) return Targets.USER;\n    if (target < 40) return Targets.ROLE;\n    if (target < 50) return Targets.INVITE;\n    if (target < 60) return Targets.WEBHOOK;\n    if (target < 70) return Targets.EMOJI;\n    if (target < 80) return Targets.MESSAGE;\n    if (target < 90) return Targets.INTEGRATION;\n    return Targets.UNKNOWN;\n  }\n  /**\n   * The action type of an entry, e.g. `CREATE`. Here are the available types:\n   * * CREATE\n   * * DELETE\n   * * UPDATE\n   * * ALL\n   * @typedef {string} AuditLogActionType\n   */\n\n  /**\n   * Finds the action type from the entry action.\n   * @param {AuditLogAction} action The action target\n   * @returns {AuditLogActionType}\n   */\n\n\n  static actionType(action) {\n    if ([Actions.CHANNEL_CREATE, Actions.CHANNEL_OVERWRITE_CREATE, Actions.MEMBER_BAN_REMOVE, Actions.BOT_ADD, Actions.ROLE_CREATE, Actions.INVITE_CREATE, Actions.WEBHOOK_CREATE, Actions.EMOJI_CREATE, Actions.MESSAGE_PIN, Actions.INTEGRATION_CREATE].includes(action)) {\n      return 'CREATE';\n    }\n\n    if ([Actions.CHANNEL_DELETE, Actions.CHANNEL_OVERWRITE_DELETE, Actions.MEMBER_KICK, Actions.MEMBER_PRUNE, Actions.MEMBER_BAN_ADD, Actions.MEMBER_DISCONNECT, Actions.ROLE_DELETE, Actions.INVITE_DELETE, Actions.WEBHOOK_DELETE, Actions.EMOJI_DELETE, Actions.MESSAGE_DELETE, Actions.MESSAGE_BULK_DELETE, Actions.MESSAGE_UNPIN, Actions.INTEGRATION_DELETE].includes(action)) {\n      return 'DELETE';\n    }\n\n    if ([Actions.GUILD_UPDATE, Actions.CHANNEL_UPDATE, Actions.CHANNEL_OVERWRITE_UPDATE, Actions.MEMBER_UPDATE, Actions.MEMBER_ROLE_UPDATE, Actions.MEMBER_MOVE, Actions.ROLE_UPDATE, Actions.INVITE_UPDATE, Actions.WEBHOOK_UPDATE, Actions.EMOJI_UPDATE, Actions.INTEGRATION_UPDATE].includes(action)) {\n      return 'UPDATE';\n    }\n\n    return 'ALL';\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n\n}\n/**\n * Audit logs entry.\n */\n\n\nclass GuildAuditLogsEntry {\n  constructor(logs, guild, data) {\n    const targetType = GuildAuditLogs.targetType(data.action_type);\n    /**\n     * The target type of this entry\n     * @type {AuditLogTargetType}\n     */\n\n    this.targetType = targetType;\n    /**\n     * The action type of this entry\n     * @type {AuditLogActionType}\n     */\n\n    this.actionType = GuildAuditLogs.actionType(data.action_type);\n    /**\n     * Specific action type of this entry in its string presentation\n     * @type {AuditLogAction}\n     */\n\n    this.action = Object.keys(Actions).find(k => Actions[k] === data.action_type);\n    /**\n     * The reason of this entry\n     * @type {?string}\n     */\n\n    this.reason = data.reason || null;\n    /**\n     * The user that executed this entry\n     * @type {User}\n     */\n\n    this.executor = guild.client.options.partials.includes(PartialTypes.USER) ? guild.client.users.add({\n      id: data.user_id\n    }) : guild.client.users.cache.get(data.user_id);\n    /**\n     * An entry in the audit log representing a specific change.\n     * @typedef {object} AuditLogChange\n     * @property {string} key The property that was changed, e.g. `nick` for nickname changes\n     * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname\n     * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname\n     */\n\n    /**\n     * Specific property changes\n     * @type {AuditLogChange[]}\n     */\n\n    this.changes = data.changes ? data.changes.map(c => ({\n      key: c.key,\n      old: c.old_value,\n      new: c.new_value\n    })) : null;\n    /**\n     * The ID of this entry\n     * @type {Snowflake}\n     */\n\n    this.id = data.id;\n    /**\n     * Any extra data from the entry\n     * @type {?Object|Role|GuildMember}\n     */\n\n    this.extra = null;\n\n    switch (data.action_type) {\n      case Actions.MEMBER_PRUNE:\n        this.extra = {\n          removed: Number(data.options.members_removed),\n          days: Number(data.options.delete_member_days)\n        };\n        break;\n\n      case Actions.MEMBER_MOVE:\n      case Actions.MESSAGE_DELETE:\n      case Actions.MESSAGE_BULK_DELETE:\n        this.extra = {\n          channel: guild.channels.cache.get(data.options.channel_id) || {\n            id: data.options.channel_id\n          },\n          count: Number(data.options.count)\n        };\n        break;\n\n      case Actions.MESSAGE_PIN:\n      case Actions.MESSAGE_UNPIN:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options.channel_id) || {\n            id: data.options.channel_id\n          },\n          messageID: data.options.message_id\n        };\n        break;\n\n      case Actions.MEMBER_DISCONNECT:\n        this.extra = {\n          count: Number(data.options.count)\n        };\n        break;\n\n      case Actions.CHANNEL_OVERWRITE_CREATE:\n      case Actions.CHANNEL_OVERWRITE_UPDATE:\n      case Actions.CHANNEL_OVERWRITE_DELETE:\n        switch (data.options.type) {\n          case 'member':\n            this.extra = guild.members.cache.get(data.options.id) || {\n              id: data.options.id,\n              type: 'member'\n            };\n            break;\n\n          case 'role':\n            this.extra = guild.roles.cache.get(data.options.id) || {\n              id: data.options.id,\n              name: data.options.role_name,\n              type: 'role'\n            };\n            break;\n\n          default:\n            break;\n        }\n\n        break;\n\n      default:\n        break;\n    }\n    /**\n     * The target of this entry\n     * @type {?AuditLogEntryTarget}\n     */\n\n\n    this.target = null;\n\n    if (targetType === Targets.UNKNOWN) {\n      this.target = this.changes.reduce((o, c) => {\n        o[c.key] = c.new || c.old;\n        return o;\n      }, {});\n      this.target.id = data.target_id; // MEMBER_DISCONNECT and similar types do not provide a target_id.\n    } else if (targetType === Targets.USER && data.target_id) {\n      this.target = guild.client.options.partials.includes(PartialTypes.USER) ? guild.client.users.add({\n        id: data.target_id\n      }) : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.GUILD) {\n      this.target = guild.client.guilds.cache.get(data.target_id);\n    } else if (targetType === Targets.WEBHOOK) {\n      this.target = logs.webhooks.get(data.target_id) || new Webhook(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new || c.old;\n        return o;\n      }, {\n        id: data.target_id,\n        guild_id: guild.id\n      }));\n    } else if (targetType === Targets.INVITE) {\n      this.target = guild.members.fetch(guild.client.user.id).then(me => {\n        if (me.permissions.has('MANAGE_GUILD')) {\n          const change = this.changes.find(c => c.key === 'code');\n          return guild.fetchInvites().then(invites => {\n            this.target = invites.find(i => i.code === (change.new || change.old));\n          });\n        } else {\n          this.target = this.changes.reduce((o, c) => {\n            o[c.key] = c.new || c.old;\n            return o;\n          }, {});\n          return this.target;\n        }\n      });\n    } else if (targetType === Targets.MESSAGE) {\n      // Discord sends a channel id for the MESSAGE_BULK_DELETE action type.\n      this.target = data.action_type === Actions.MESSAGE_BULK_DELETE ? guild.channels.cache.get(data.target_id) || {\n        id: data.target_id\n      } : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.INTEGRATION) {\n      this.target = logs.integrations.get(data.target_id) || new Integration(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new || c.old;\n        return o;\n      }, {\n        id: data.target_id\n      }), guild);\n    } else if (data.target_id) {\n      this.target = guild[`${targetType.toLowerCase()}s`].cache.get(data.target_id) || {\n        id: data.target_id\n      };\n    }\n  }\n  /**\n   * The timestamp this entry was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time this entry was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  toJSON() {\n    return Util.flatten(this, {\n      createdTimestamp: true\n    });\n  }\n\n}\n\nGuildAuditLogs.Actions = Actions;\nGuildAuditLogs.Targets = Targets;\nGuildAuditLogs.Entry = GuildAuditLogsEntry;\nmodule.exports = GuildAuditLogs;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/GuildAuditLogs.js"],"names":["Integration","require","Webhook","Collection","PartialTypes","Snowflake","Util","Targets","ALL","GUILD","CHANNEL","USER","ROLE","INVITE","WEBHOOK","EMOJI","MESSAGE","INTEGRATION","UNKNOWN","Actions","GUILD_UPDATE","CHANNEL_CREATE","CHANNEL_UPDATE","CHANNEL_DELETE","CHANNEL_OVERWRITE_CREATE","CHANNEL_OVERWRITE_UPDATE","CHANNEL_OVERWRITE_DELETE","MEMBER_KICK","MEMBER_PRUNE","MEMBER_BAN_ADD","MEMBER_BAN_REMOVE","MEMBER_UPDATE","MEMBER_ROLE_UPDATE","MEMBER_MOVE","MEMBER_DISCONNECT","BOT_ADD","ROLE_CREATE","ROLE_UPDATE","ROLE_DELETE","INVITE_CREATE","INVITE_UPDATE","INVITE_DELETE","WEBHOOK_CREATE","WEBHOOK_UPDATE","WEBHOOK_DELETE","EMOJI_CREATE","EMOJI_UPDATE","EMOJI_DELETE","MESSAGE_DELETE","MESSAGE_BULK_DELETE","MESSAGE_PIN","MESSAGE_UNPIN","INTEGRATION_CREATE","INTEGRATION_UPDATE","INTEGRATION_DELETE","GuildAuditLogs","constructor","guild","data","users","user","client","add","webhooks","hook","set","id","integrations","integration","entries","item","audit_log_entries","entry","GuildAuditLogsEntry","build","args","logs","Promise","all","map","e","target","then","targetType","actionType","action","includes","toJSON","flatten","action_type","Object","keys","find","k","reason","executor","options","partials","user_id","cache","get","changes","c","key","old","old_value","new","new_value","extra","removed","Number","members_removed","days","delete_member_days","channel","channels","channel_id","count","messageID","message_id","type","members","roles","name","role_name","reduce","o","target_id","guilds","guild_id","fetch","me","permissions","has","change","fetchInvites","invites","i","code","toLowerCase","createdTimestamp","deconstruct","timestamp","createdAt","Date","Entry","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,oBAAD,CAA1B;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAmBH,OAAO,CAAC,mBAAD,CAAhC;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,mBAAD,CAAzB;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAC,cAAD,CAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,OAAO,GAAG;AACdC,EAAAA,GAAG,EAAE,KADS;AAEdC,EAAAA,KAAK,EAAE,OAFO;AAGdC,EAAAA,OAAO,EAAE,SAHK;AAIdC,EAAAA,IAAI,EAAE,MAJQ;AAKdC,EAAAA,IAAI,EAAE,MALQ;AAMdC,EAAAA,MAAM,EAAE,QANM;AAOdC,EAAAA,OAAO,EAAE,SAPK;AAQdC,EAAAA,KAAK,EAAE,OARO;AASdC,EAAAA,OAAO,EAAE,SATK;AAUdC,EAAAA,WAAW,EAAE,aAVC;AAWdC,EAAAA,OAAO,EAAE;AAXK,CAAhB;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG;AACdX,EAAAA,GAAG,EAAE,IADS;AAEdY,EAAAA,YAAY,EAAE,CAFA;AAGdC,EAAAA,cAAc,EAAE,EAHF;AAIdC,EAAAA,cAAc,EAAE,EAJF;AAKdC,EAAAA,cAAc,EAAE,EALF;AAMdC,EAAAA,wBAAwB,EAAE,EANZ;AAOdC,EAAAA,wBAAwB,EAAE,EAPZ;AAQdC,EAAAA,wBAAwB,EAAE,EARZ;AASdC,EAAAA,WAAW,EAAE,EATC;AAUdC,EAAAA,YAAY,EAAE,EAVA;AAWdC,EAAAA,cAAc,EAAE,EAXF;AAYdC,EAAAA,iBAAiB,EAAE,EAZL;AAadC,EAAAA,aAAa,EAAE,EAbD;AAcdC,EAAAA,kBAAkB,EAAE,EAdN;AAedC,EAAAA,WAAW,EAAE,EAfC;AAgBdC,EAAAA,iBAAiB,EAAE,EAhBL;AAiBdC,EAAAA,OAAO,EAAE,EAjBK;AAkBdC,EAAAA,WAAW,EAAE,EAlBC;AAmBdC,EAAAA,WAAW,EAAE,EAnBC;AAoBdC,EAAAA,WAAW,EAAE,EApBC;AAqBdC,EAAAA,aAAa,EAAE,EArBD;AAsBdC,EAAAA,aAAa,EAAE,EAtBD;AAuBdC,EAAAA,aAAa,EAAE,EAvBD;AAwBdC,EAAAA,cAAc,EAAE,EAxBF;AAyBdC,EAAAA,cAAc,EAAE,EAzBF;AA0BdC,EAAAA,cAAc,EAAE,EA1BF;AA2BdC,EAAAA,YAAY,EAAE,EA3BA;AA4BdC,EAAAA,YAAY,EAAE,EA5BA;AA6BdC,EAAAA,YAAY,EAAE,EA7BA;AA8BdC,EAAAA,cAAc,EAAE,EA9BF;AA+BdC,EAAAA,mBAAmB,EAAE,EA/BP;AAgCdC,EAAAA,WAAW,EAAE,EAhCC;AAiCdC,EAAAA,aAAa,EAAE,EAjCD;AAkCdC,EAAAA,kBAAkB,EAAE,EAlCN;AAmCdC,EAAAA,kBAAkB,EAAE,EAnCN;AAoCdC,EAAAA,kBAAkB,EAAE;AApCN,CAAhB;AAuCA;AACA;AACA;;AACA,MAAMC,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAR,EAAc;AACvB,QAAIA,IAAI,CAACC,KAAT,EAAgB,KAAK,MAAMC,IAAX,IAAmBF,IAAI,CAACC,KAAxB,EAA+BF,KAAK,CAACI,MAAN,CAAaF,KAAb,CAAmBG,GAAnB,CAAuBF,IAAvB;AAC/C;AACJ;AACA;AACA;AACA;;AACI,SAAKG,QAAL,GAAgB,IAAI5D,UAAJ,EAAhB;;AACA,QAAIuD,IAAI,CAACK,QAAT,EAAmB;AACjB,WAAK,MAAMC,IAAX,IAAmBN,IAAI,CAACK,QAAxB,EAAkC;AAChC,aAAKA,QAAL,CAAcE,GAAd,CAAkBD,IAAI,CAACE,EAAvB,EAA2B,IAAIhE,OAAJ,CAAYuD,KAAK,CAACI,MAAlB,EAA0BG,IAA1B,CAA3B;AACD;AACF;AAED;AACJ;AACA;AACA;AACA;;;AACI,SAAKG,YAAL,GAAoB,IAAIhE,UAAJ,EAApB;;AACA,QAAIuD,IAAI,CAACS,YAAT,EAAuB;AACrB,WAAK,MAAMC,WAAX,IAA0BV,IAAI,CAACS,YAA/B,EAA6C;AAC3C,aAAKA,YAAL,CAAkBF,GAAlB,CAAsBG,WAAW,CAACF,EAAlC,EAAsC,IAAIlE,WAAJ,CAAgByD,KAAK,CAACI,MAAtB,EAA8BO,WAA9B,EAA2CX,KAA3C,CAAtC;AACD;AACF;AAED;AACJ;AACA;AACA;;;AACI,SAAKY,OAAL,GAAe,IAAIlE,UAAJ,EAAf;;AACA,SAAK,MAAMmE,IAAX,IAAmBZ,IAAI,CAACa,iBAAxB,EAA2C;AACzC,YAAMC,KAAK,GAAG,IAAIC,mBAAJ,CAAwB,IAAxB,EAA8BhB,KAA9B,EAAqCa,IAArC,CAAd;AACA,WAAKD,OAAL,CAAaJ,GAAb,CAAiBO,KAAK,CAACN,EAAvB,EAA2BM,KAA3B;AACD;AACF;AAED;AACF;AACA;AACA;;;AACc,SAALE,KAAK,GAAU;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AACpB,UAAMC,IAAI,GAAG,IAAIrB,cAAJ,CAAmB,GAAGoB,IAAtB,CAAb;AACA,WAAOE,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACP,OAAL,CAAaU,GAAb,CAAiBC,CAAC,IAAIA,CAAC,CAACC,MAAxB,CAAZ,EAA6CC,IAA7C,CAAkD,MAAMN,IAAxD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;;AACmB,SAAVO,UAAU,CAACF,MAAD,EAAS;AACxB,QAAIA,MAAM,GAAG,EAAb,EAAiB,OAAO1E,OAAO,CAACE,KAAf;AACjB,QAAIwE,MAAM,GAAG,EAAb,EAAiB,OAAO1E,OAAO,CAACG,OAAf;AACjB,QAAIuE,MAAM,GAAG,EAAb,EAAiB,OAAO1E,OAAO,CAACI,IAAf;AACjB,QAAIsE,MAAM,GAAG,EAAb,EAAiB,OAAO1E,OAAO,CAACK,IAAf;AACjB,QAAIqE,MAAM,GAAG,EAAb,EAAiB,OAAO1E,OAAO,CAACM,MAAf;AACjB,QAAIoE,MAAM,GAAG,EAAb,EAAiB,OAAO1E,OAAO,CAACO,OAAf;AACjB,QAAImE,MAAM,GAAG,EAAb,EAAiB,OAAO1E,OAAO,CAACQ,KAAf;AACjB,QAAIkE,MAAM,GAAG,EAAb,EAAiB,OAAO1E,OAAO,CAACS,OAAf;AACjB,QAAIiE,MAAM,GAAG,EAAb,EAAiB,OAAO1E,OAAO,CAACU,WAAf;AACjB,WAAOV,OAAO,CAACW,OAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;;AACmB,SAAVkE,UAAU,CAACC,MAAD,EAAS;AACxB,QACE,CACElE,OAAO,CAACE,cADV,EAEEF,OAAO,CAACK,wBAFV,EAGEL,OAAO,CAACW,iBAHV,EAIEX,OAAO,CAACgB,OAJV,EAKEhB,OAAO,CAACiB,WALV,EAMEjB,OAAO,CAACoB,aANV,EAOEpB,OAAO,CAACuB,cAPV,EAQEvB,OAAO,CAAC0B,YARV,EASE1B,OAAO,CAAC+B,WATV,EAUE/B,OAAO,CAACiC,kBAVV,EAWEkC,QAXF,CAWWD,MAXX,CADF,EAaE;AACA,aAAO,QAAP;AACD;;AAED,QACE,CACElE,OAAO,CAACI,cADV,EAEEJ,OAAO,CAACO,wBAFV,EAGEP,OAAO,CAACQ,WAHV,EAIER,OAAO,CAACS,YAJV,EAKET,OAAO,CAACU,cALV,EAMEV,OAAO,CAACe,iBANV,EAOEf,OAAO,CAACmB,WAPV,EAQEnB,OAAO,CAACsB,aARV,EASEtB,OAAO,CAACyB,cATV,EAUEzB,OAAO,CAAC4B,YAVV,EAWE5B,OAAO,CAAC6B,cAXV,EAYE7B,OAAO,CAAC8B,mBAZV,EAaE9B,OAAO,CAACgC,aAbV,EAcEhC,OAAO,CAACmC,kBAdV,EAeEgC,QAfF,CAeWD,MAfX,CADF,EAiBE;AACA,aAAO,QAAP;AACD;;AAED,QACE,CACElE,OAAO,CAACC,YADV,EAEED,OAAO,CAACG,cAFV,EAGEH,OAAO,CAACM,wBAHV,EAIEN,OAAO,CAACY,aAJV,EAKEZ,OAAO,CAACa,kBALV,EAMEb,OAAO,CAACc,WANV,EAOEd,OAAO,CAACkB,WAPV,EAQElB,OAAO,CAACqB,aARV,EASErB,OAAO,CAACwB,cATV,EAUExB,OAAO,CAAC2B,YAVV,EAWE3B,OAAO,CAACkC,kBAXV,EAYEiC,QAZF,CAYWD,MAZX,CADF,EAcE;AACA,aAAO,QAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,WAAOjF,IAAI,CAACkF,OAAL,CAAa,IAAb,CAAP;AACD;;AA3JkB;AA8JrB;AACA;AACA;;;AACA,MAAMf,mBAAN,CAA0B;AACxBjB,EAAAA,WAAW,CAACoB,IAAD,EAAOnB,KAAP,EAAcC,IAAd,EAAoB;AAC7B,UAAMyB,UAAU,GAAG5B,cAAc,CAAC4B,UAAf,CAA0BzB,IAAI,CAAC+B,WAA/B,CAAnB;AACA;AACJ;AACA;AACA;;AACI,SAAKN,UAAL,GAAkBA,UAAlB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,UAAL,GAAkB7B,cAAc,CAAC6B,UAAf,CAA0B1B,IAAI,CAAC+B,WAA/B,CAAlB;AAEA;AACJ;AACA;AACA;;AACI,SAAKJ,MAAL,GAAcK,MAAM,CAACC,IAAP,CAAYxE,OAAZ,EAAqByE,IAArB,CAA0BC,CAAC,IAAI1E,OAAO,CAAC0E,CAAD,CAAP,KAAenC,IAAI,CAAC+B,WAAnD,CAAd;AAEA;AACJ;AACA;AACA;;AACI,SAAKK,MAAL,GAAcpC,IAAI,CAACoC,MAAL,IAAe,IAA7B;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,QAAL,GAAgBtC,KAAK,CAACI,MAAN,CAAamC,OAAb,CAAqBC,QAArB,CAA8BX,QAA9B,CAAuClF,YAAY,CAACO,IAApD,IACZ8C,KAAK,CAACI,MAAN,CAAaF,KAAb,CAAmBG,GAAnB,CAAuB;AAAEI,MAAAA,EAAE,EAAER,IAAI,CAACwC;AAAX,KAAvB,CADY,GAEZzC,KAAK,CAACI,MAAN,CAAaF,KAAb,CAAmBwC,KAAnB,CAAyBC,GAAzB,CAA6B1C,IAAI,CAACwC,OAAlC,CAFJ;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;;AACI,SAAKG,OAAL,GAAe3C,IAAI,CAAC2C,OAAL,GAAe3C,IAAI,CAAC2C,OAAL,CAAatB,GAAb,CAAiBuB,CAAC,KAAK;AAAEC,MAAAA,GAAG,EAAED,CAAC,CAACC,GAAT;AAAcC,MAAAA,GAAG,EAAEF,CAAC,CAACG,SAArB;AAAgCC,MAAAA,GAAG,EAAEJ,CAAC,CAACK;AAAvC,KAAL,CAAlB,CAAf,GAA6F,IAA5G;AAEA;AACJ;AACA;AACA;;AACI,SAAKzC,EAAL,GAAUR,IAAI,CAACQ,EAAf;AAEA;AACJ;AACA;AACA;;AACI,SAAK0C,KAAL,GAAa,IAAb;;AACA,YAAQlD,IAAI,CAAC+B,WAAb;AACE,WAAKtE,OAAO,CAACS,YAAb;AACE,aAAKgF,KAAL,GAAa;AACXC,UAAAA,OAAO,EAAEC,MAAM,CAACpD,IAAI,CAACsC,OAAL,CAAae,eAAd,CADJ;AAEXC,UAAAA,IAAI,EAAEF,MAAM,CAACpD,IAAI,CAACsC,OAAL,CAAaiB,kBAAd;AAFD,SAAb;AAIA;;AAEF,WAAK9F,OAAO,CAACc,WAAb;AACA,WAAKd,OAAO,CAAC6B,cAAb;AACA,WAAK7B,OAAO,CAAC8B,mBAAb;AACE,aAAK2D,KAAL,GAAa;AACXM,UAAAA,OAAO,EAAEzD,KAAK,CAAC0D,QAAN,CAAehB,KAAf,CAAqBC,GAArB,CAAyB1C,IAAI,CAACsC,OAAL,CAAaoB,UAAtC,KAAqD;AAAElD,YAAAA,EAAE,EAAER,IAAI,CAACsC,OAAL,CAAaoB;AAAnB,WADnD;AAEXC,UAAAA,KAAK,EAAEP,MAAM,CAACpD,IAAI,CAACsC,OAAL,CAAaqB,KAAd;AAFF,SAAb;AAIA;;AAEF,WAAKlG,OAAO,CAAC+B,WAAb;AACA,WAAK/B,OAAO,CAACgC,aAAb;AACE,aAAKyD,KAAL,GAAa;AACXM,UAAAA,OAAO,EAAEzD,KAAK,CAACI,MAAN,CAAasD,QAAb,CAAsBhB,KAAtB,CAA4BC,GAA5B,CAAgC1C,IAAI,CAACsC,OAAL,CAAaoB,UAA7C,KAA4D;AAAElD,YAAAA,EAAE,EAAER,IAAI,CAACsC,OAAL,CAAaoB;AAAnB,WAD1D;AAEXE,UAAAA,SAAS,EAAE5D,IAAI,CAACsC,OAAL,CAAauB;AAFb,SAAb;AAIA;;AAEF,WAAKpG,OAAO,CAACe,iBAAb;AACE,aAAK0E,KAAL,GAAa;AACXS,UAAAA,KAAK,EAAEP,MAAM,CAACpD,IAAI,CAACsC,OAAL,CAAaqB,KAAd;AADF,SAAb;AAGA;;AAEF,WAAKlG,OAAO,CAACK,wBAAb;AACA,WAAKL,OAAO,CAACM,wBAAb;AACA,WAAKN,OAAO,CAACO,wBAAb;AACE,gBAAQgC,IAAI,CAACsC,OAAL,CAAawB,IAArB;AACE,eAAK,QAAL;AACE,iBAAKZ,KAAL,GAAanD,KAAK,CAACgE,OAAN,CAActB,KAAd,CAAoBC,GAApB,CAAwB1C,IAAI,CAACsC,OAAL,CAAa9B,EAArC,KAA4C;AAAEA,cAAAA,EAAE,EAAER,IAAI,CAACsC,OAAL,CAAa9B,EAAnB;AAAuBsD,cAAAA,IAAI,EAAE;AAA7B,aAAzD;AACA;;AAEF,eAAK,MAAL;AACE,iBAAKZ,KAAL,GAAanD,KAAK,CAACiE,KAAN,CAAYvB,KAAZ,CAAkBC,GAAlB,CAAsB1C,IAAI,CAACsC,OAAL,CAAa9B,EAAnC,KAA0C;AACrDA,cAAAA,EAAE,EAAER,IAAI,CAACsC,OAAL,CAAa9B,EADoC;AAErDyD,cAAAA,IAAI,EAAEjE,IAAI,CAACsC,OAAL,CAAa4B,SAFkC;AAGrDJ,cAAAA,IAAI,EAAE;AAH+C,aAAvD;AAKA;;AAEF;AACE;AAdJ;;AAgBA;;AAEF;AACE;AArDJ;AAwDA;AACJ;AACA;AACA;;;AACI,SAAKvC,MAAL,GAAc,IAAd;;AACA,QAAIE,UAAU,KAAK5E,OAAO,CAACW,OAA3B,EAAoC;AAClC,WAAK+D,MAAL,GAAc,KAAKoB,OAAL,CAAawB,MAAb,CAAoB,CAACC,CAAD,EAAIxB,CAAJ,KAAU;AAC1CwB,QAAAA,CAAC,CAACxB,CAAC,CAACC,GAAH,CAAD,GAAWD,CAAC,CAACI,GAAF,IAASJ,CAAC,CAACE,GAAtB;AACA,eAAOsB,CAAP;AACD,OAHa,EAGX,EAHW,CAAd;AAIA,WAAK7C,MAAL,CAAYf,EAAZ,GAAiBR,IAAI,CAACqE,SAAtB,CALkC,CAMlC;AACD,KAPD,MAOO,IAAI5C,UAAU,KAAK5E,OAAO,CAACI,IAAvB,IAA+B+C,IAAI,CAACqE,SAAxC,EAAmD;AACxD,WAAK9C,MAAL,GAAcxB,KAAK,CAACI,MAAN,CAAamC,OAAb,CAAqBC,QAArB,CAA8BX,QAA9B,CAAuClF,YAAY,CAACO,IAApD,IACV8C,KAAK,CAACI,MAAN,CAAaF,KAAb,CAAmBG,GAAnB,CAAuB;AAAEI,QAAAA,EAAE,EAAER,IAAI,CAACqE;AAAX,OAAvB,CADU,GAEVtE,KAAK,CAACI,MAAN,CAAaF,KAAb,CAAmBwC,KAAnB,CAAyBC,GAAzB,CAA6B1C,IAAI,CAACqE,SAAlC,CAFJ;AAGD,KAJM,MAIA,IAAI5C,UAAU,KAAK5E,OAAO,CAACE,KAA3B,EAAkC;AACvC,WAAKwE,MAAL,GAAcxB,KAAK,CAACI,MAAN,CAAamE,MAAb,CAAoB7B,KAApB,CAA0BC,GAA1B,CAA8B1C,IAAI,CAACqE,SAAnC,CAAd;AACD,KAFM,MAEA,IAAI5C,UAAU,KAAK5E,OAAO,CAACO,OAA3B,EAAoC;AACzC,WAAKmE,MAAL,GACEL,IAAI,CAACb,QAAL,CAAcqC,GAAd,CAAkB1C,IAAI,CAACqE,SAAvB,KACA,IAAI7H,OAAJ,CACEuD,KAAK,CAACI,MADR,EAEE,KAAKwC,OAAL,CAAawB,MAAb,CACE,CAACC,CAAD,EAAIxB,CAAJ,KAAU;AACRwB,QAAAA,CAAC,CAACxB,CAAC,CAACC,GAAH,CAAD,GAAWD,CAAC,CAACI,GAAF,IAASJ,CAAC,CAACE,GAAtB;AACA,eAAOsB,CAAP;AACD,OAJH,EAKE;AACE5D,QAAAA,EAAE,EAAER,IAAI,CAACqE,SADX;AAEEE,QAAAA,QAAQ,EAAExE,KAAK,CAACS;AAFlB,OALF,CAFF,CAFF;AAeD,KAhBM,MAgBA,IAAIiB,UAAU,KAAK5E,OAAO,CAACM,MAA3B,EAAmC;AACxC,WAAKoE,MAAL,GAAcxB,KAAK,CAACgE,OAAN,CAAcS,KAAd,CAAoBzE,KAAK,CAACI,MAAN,CAAaD,IAAb,CAAkBM,EAAtC,EAA0CgB,IAA1C,CAA+CiD,EAAE,IAAI;AACjE,YAAIA,EAAE,CAACC,WAAH,CAAeC,GAAf,CAAmB,cAAnB,CAAJ,EAAwC;AACtC,gBAAMC,MAAM,GAAG,KAAKjC,OAAL,CAAaT,IAAb,CAAkBU,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAU,MAAjC,CAAf;AACA,iBAAO9C,KAAK,CAAC8E,YAAN,GAAqBrD,IAArB,CAA0BsD,OAAO,IAAI;AAC1C,iBAAKvD,MAAL,GAAcuD,OAAO,CAAC5C,IAAR,CAAa6C,CAAC,IAAIA,CAAC,CAACC,IAAF,MAAYJ,MAAM,CAAC5B,GAAP,IAAc4B,MAAM,CAAC9B,GAAjC,CAAlB,CAAd;AACD,WAFM,CAAP;AAGD,SALD,MAKO;AACL,eAAKvB,MAAL,GAAc,KAAKoB,OAAL,CAAawB,MAAb,CAAoB,CAACC,CAAD,EAAIxB,CAAJ,KAAU;AAC1CwB,YAAAA,CAAC,CAACxB,CAAC,CAACC,GAAH,CAAD,GAAWD,CAAC,CAACI,GAAF,IAASJ,CAAC,CAACE,GAAtB;AACA,mBAAOsB,CAAP;AACD,WAHa,EAGX,EAHW,CAAd;AAIA,iBAAO,KAAK7C,MAAZ;AACD;AACF,OAba,CAAd;AAcD,KAfM,MAeA,IAAIE,UAAU,KAAK5E,OAAO,CAACS,OAA3B,EAAoC;AACzC;AACA,WAAKiE,MAAL,GACEvB,IAAI,CAAC+B,WAAL,KAAqBtE,OAAO,CAAC8B,mBAA7B,GACIQ,KAAK,CAAC0D,QAAN,CAAehB,KAAf,CAAqBC,GAArB,CAAyB1C,IAAI,CAACqE,SAA9B,KAA4C;AAAE7D,QAAAA,EAAE,EAAER,IAAI,CAACqE;AAAX,OADhD,GAEItE,KAAK,CAACI,MAAN,CAAaF,KAAb,CAAmBwC,KAAnB,CAAyBC,GAAzB,CAA6B1C,IAAI,CAACqE,SAAlC,CAHN;AAID,KANM,MAMA,IAAI5C,UAAU,KAAK5E,OAAO,CAACU,WAA3B,EAAwC;AAC7C,WAAKgE,MAAL,GACEL,IAAI,CAACT,YAAL,CAAkBiC,GAAlB,CAAsB1C,IAAI,CAACqE,SAA3B,KACA,IAAI/H,WAAJ,CACEyD,KAAK,CAACI,MADR,EAEE,KAAKwC,OAAL,CAAawB,MAAb,CACE,CAACC,CAAD,EAAIxB,CAAJ,KAAU;AACRwB,QAAAA,CAAC,CAACxB,CAAC,CAACC,GAAH,CAAD,GAAWD,CAAC,CAACI,GAAF,IAASJ,CAAC,CAACE,GAAtB;AACA,eAAOsB,CAAP;AACD,OAJH,EAKE;AAAE5D,QAAAA,EAAE,EAAER,IAAI,CAACqE;AAAX,OALF,CAFF,EASEtE,KATF,CAFF;AAaD,KAdM,MAcA,IAAIC,IAAI,CAACqE,SAAT,EAAoB;AACzB,WAAK9C,MAAL,GAAcxB,KAAK,CAAE,GAAE0B,UAAU,CAACwD,WAAX,EAAyB,GAA7B,CAAL,CAAsCxC,KAAtC,CAA4CC,GAA5C,CAAgD1C,IAAI,CAACqE,SAArD,KAAmE;AAAE7D,QAAAA,EAAE,EAAER,IAAI,CAACqE;AAAX,OAAjF;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACsB,MAAhBa,gBAAgB,GAAG;AACrB,WAAOvI,SAAS,CAACwI,WAAV,CAAsB,KAAK3E,EAA3B,EAA+B4E,SAAtC;AACD;AAED;AACF;AACA;AACA;AACA;;;AACe,MAATC,SAAS,GAAG;AACd,WAAO,IAAIC,IAAJ,CAAS,KAAKJ,gBAAd,CAAP;AACD;;AAEDrD,EAAAA,MAAM,GAAG;AACP,WAAOjF,IAAI,CAACkF,OAAL,CAAa,IAAb,EAAmB;AAAEoD,MAAAA,gBAAgB,EAAE;AAApB,KAAnB,CAAP;AACD;;AAlNuB;;AAqN1BrF,cAAc,CAACpC,OAAf,GAAyBA,OAAzB;AACAoC,cAAc,CAAChD,OAAf,GAAyBA,OAAzB;AACAgD,cAAc,CAAC0F,KAAf,GAAuBxE,mBAAvB;AAEAyE,MAAM,CAACC,OAAP,GAAiB5F,cAAjB","sourcesContent":["'use strict';\n\nconst Integration = require('./Integration');\nconst Webhook = require('./Webhook');\nconst Collection = require('../util/Collection');\nconst { PartialTypes } = require('../util/Constants');\nconst Snowflake = require('../util/Snowflake');\nconst Util = require('../util/Util');\n\n/**\n * The target type of an entry, e.g. `GUILD`. Here are the available types:\n * * GUILD\n * * CHANNEL\n * * USER\n * * ROLE\n * * INVITE\n * * WEBHOOK\n * * EMOJI\n * * MESSAGE\n * * INTEGRATION\n * @typedef {string} AuditLogTargetType\n */\n\n/**\n * Key mirror of all available audit log targets.\n * @name GuildAuditLogs.Targets\n * @type {Object<string, string>}\n */\nconst Targets = {\n  ALL: 'ALL',\n  GUILD: 'GUILD',\n  CHANNEL: 'CHANNEL',\n  USER: 'USER',\n  ROLE: 'ROLE',\n  INVITE: 'INVITE',\n  WEBHOOK: 'WEBHOOK',\n  EMOJI: 'EMOJI',\n  MESSAGE: 'MESSAGE',\n  INTEGRATION: 'INTEGRATION',\n  UNKNOWN: 'UNKNOWN',\n};\n\n/**\n * The action of an entry. Here are the available actions:\n * * ALL: null\n * * GUILD_UPDATE: 1\n * * CHANNEL_CREATE: 10\n * * CHANNEL_UPDATE: 11\n * * CHANNEL_DELETE: 12\n * * CHANNEL_OVERWRITE_CREATE: 13\n * * CHANNEL_OVERWRITE_UPDATE: 14\n * * CHANNEL_OVERWRITE_DELETE: 15\n * * MEMBER_KICK: 20\n * * MEMBER_PRUNE: 21\n * * MEMBER_BAN_ADD: 22\n * * MEMBER_BAN_REMOVE: 23\n * * MEMBER_UPDATE: 24\n * * MEMBER_ROLE_UPDATE: 25\n * * MEMBER_MOVE: 26\n * * MEMBER_DISCONNECT: 27\n * * BOT_ADD: 28,\n * * ROLE_CREATE: 30\n * * ROLE_UPDATE: 31\n * * ROLE_DELETE: 32\n * * INVITE_CREATE: 40\n * * INVITE_UPDATE: 41\n * * INVITE_DELETE: 42\n * * WEBHOOK_CREATE: 50\n * * WEBHOOK_UPDATE: 51\n * * WEBHOOK_DELETE: 52\n * * EMOJI_CREATE: 60\n * * EMOJI_UPDATE: 61\n * * EMOJI_DELETE: 62\n * * MESSAGE_DELETE: 72\n * * MESSAGE_BULK_DELETE: 73\n * * MESSAGE_PIN: 74\n * * MESSAGE_UNPIN: 75\n * * INTEGRATION_CREATE: 80\n * * INTEGRATION_UPDATE: 81\n * * INTEGRATION_DELETE: 82\n * @typedef {?number|string} AuditLogAction\n */\n\n/**\n * All available actions keyed under their names to their numeric values.\n * @name GuildAuditLogs.Actions\n * @type {Object<string, number>}\n */\nconst Actions = {\n  ALL: null,\n  GUILD_UPDATE: 1,\n  CHANNEL_CREATE: 10,\n  CHANNEL_UPDATE: 11,\n  CHANNEL_DELETE: 12,\n  CHANNEL_OVERWRITE_CREATE: 13,\n  CHANNEL_OVERWRITE_UPDATE: 14,\n  CHANNEL_OVERWRITE_DELETE: 15,\n  MEMBER_KICK: 20,\n  MEMBER_PRUNE: 21,\n  MEMBER_BAN_ADD: 22,\n  MEMBER_BAN_REMOVE: 23,\n  MEMBER_UPDATE: 24,\n  MEMBER_ROLE_UPDATE: 25,\n  MEMBER_MOVE: 26,\n  MEMBER_DISCONNECT: 27,\n  BOT_ADD: 28,\n  ROLE_CREATE: 30,\n  ROLE_UPDATE: 31,\n  ROLE_DELETE: 32,\n  INVITE_CREATE: 40,\n  INVITE_UPDATE: 41,\n  INVITE_DELETE: 42,\n  WEBHOOK_CREATE: 50,\n  WEBHOOK_UPDATE: 51,\n  WEBHOOK_DELETE: 52,\n  EMOJI_CREATE: 60,\n  EMOJI_UPDATE: 61,\n  EMOJI_DELETE: 62,\n  MESSAGE_DELETE: 72,\n  MESSAGE_BULK_DELETE: 73,\n  MESSAGE_PIN: 74,\n  MESSAGE_UNPIN: 75,\n  INTEGRATION_CREATE: 80,\n  INTEGRATION_UPDATE: 81,\n  INTEGRATION_DELETE: 82,\n};\n\n/**\n * Audit logs entries are held in this class.\n */\nclass GuildAuditLogs {\n  constructor(guild, data) {\n    if (data.users) for (const user of data.users) guild.client.users.add(user);\n    /**\n     * Cached webhooks\n     * @type {Collection<Snowflake, Webhook>}\n     * @private\n     */\n    this.webhooks = new Collection();\n    if (data.webhooks) {\n      for (const hook of data.webhooks) {\n        this.webhooks.set(hook.id, new Webhook(guild.client, hook));\n      }\n    }\n\n    /**\n     * Cached integrations\n     * @type {Collection<Snowflake, Integration>}\n     * @private\n     */\n    this.integrations = new Collection();\n    if (data.integrations) {\n      for (const integration of data.integrations) {\n        this.integrations.set(integration.id, new Integration(guild.client, integration, guild));\n      }\n    }\n\n    /**\n     * The entries for this guild's audit logs\n     * @type {Collection<Snowflake, GuildAuditLogsEntry>}\n     */\n    this.entries = new Collection();\n    for (const item of data.audit_log_entries) {\n      const entry = new GuildAuditLogsEntry(this, guild, item);\n      this.entries.set(entry.id, entry);\n    }\n  }\n\n  /**\n   * Handles possible promises for entry targets.\n   * @returns {Promise<GuildAuditLogs>}\n   */\n  static build(...args) {\n    const logs = new GuildAuditLogs(...args);\n    return Promise.all(logs.entries.map(e => e.target)).then(() => logs);\n  }\n\n  /**\n   * The target of an entry. It can be one of:\n   * * A guild\n   * * A user\n   * * A role\n   * * An emoji\n   * * An invite\n   * * A webhook\n   * * An integration\n   * * An object with an id key if target was deleted\n   * * An object where the keys represent either the new value or the old value\n   * @typedef {?Object|Guild|User|Role|GuildEmoji|Invite|Webhook|Integration} AuditLogEntryTarget\n   */\n\n  /**\n   * Finds the target type from the entry action.\n   * @param {AuditLogAction} target The action target\n   * @returns {AuditLogTargetType}\n   */\n  static targetType(target) {\n    if (target < 10) return Targets.GUILD;\n    if (target < 20) return Targets.CHANNEL;\n    if (target < 30) return Targets.USER;\n    if (target < 40) return Targets.ROLE;\n    if (target < 50) return Targets.INVITE;\n    if (target < 60) return Targets.WEBHOOK;\n    if (target < 70) return Targets.EMOJI;\n    if (target < 80) return Targets.MESSAGE;\n    if (target < 90) return Targets.INTEGRATION;\n    return Targets.UNKNOWN;\n  }\n\n  /**\n   * The action type of an entry, e.g. `CREATE`. Here are the available types:\n   * * CREATE\n   * * DELETE\n   * * UPDATE\n   * * ALL\n   * @typedef {string} AuditLogActionType\n   */\n\n  /**\n   * Finds the action type from the entry action.\n   * @param {AuditLogAction} action The action target\n   * @returns {AuditLogActionType}\n   */\n  static actionType(action) {\n    if (\n      [\n        Actions.CHANNEL_CREATE,\n        Actions.CHANNEL_OVERWRITE_CREATE,\n        Actions.MEMBER_BAN_REMOVE,\n        Actions.BOT_ADD,\n        Actions.ROLE_CREATE,\n        Actions.INVITE_CREATE,\n        Actions.WEBHOOK_CREATE,\n        Actions.EMOJI_CREATE,\n        Actions.MESSAGE_PIN,\n        Actions.INTEGRATION_CREATE,\n      ].includes(action)\n    ) {\n      return 'CREATE';\n    }\n\n    if (\n      [\n        Actions.CHANNEL_DELETE,\n        Actions.CHANNEL_OVERWRITE_DELETE,\n        Actions.MEMBER_KICK,\n        Actions.MEMBER_PRUNE,\n        Actions.MEMBER_BAN_ADD,\n        Actions.MEMBER_DISCONNECT,\n        Actions.ROLE_DELETE,\n        Actions.INVITE_DELETE,\n        Actions.WEBHOOK_DELETE,\n        Actions.EMOJI_DELETE,\n        Actions.MESSAGE_DELETE,\n        Actions.MESSAGE_BULK_DELETE,\n        Actions.MESSAGE_UNPIN,\n        Actions.INTEGRATION_DELETE,\n      ].includes(action)\n    ) {\n      return 'DELETE';\n    }\n\n    if (\n      [\n        Actions.GUILD_UPDATE,\n        Actions.CHANNEL_UPDATE,\n        Actions.CHANNEL_OVERWRITE_UPDATE,\n        Actions.MEMBER_UPDATE,\n        Actions.MEMBER_ROLE_UPDATE,\n        Actions.MEMBER_MOVE,\n        Actions.ROLE_UPDATE,\n        Actions.INVITE_UPDATE,\n        Actions.WEBHOOK_UPDATE,\n        Actions.EMOJI_UPDATE,\n        Actions.INTEGRATION_UPDATE,\n      ].includes(action)\n    ) {\n      return 'UPDATE';\n    }\n\n    return 'ALL';\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\n/**\n * Audit logs entry.\n */\nclass GuildAuditLogsEntry {\n  constructor(logs, guild, data) {\n    const targetType = GuildAuditLogs.targetType(data.action_type);\n    /**\n     * The target type of this entry\n     * @type {AuditLogTargetType}\n     */\n    this.targetType = targetType;\n\n    /**\n     * The action type of this entry\n     * @type {AuditLogActionType}\n     */\n    this.actionType = GuildAuditLogs.actionType(data.action_type);\n\n    /**\n     * Specific action type of this entry in its string presentation\n     * @type {AuditLogAction}\n     */\n    this.action = Object.keys(Actions).find(k => Actions[k] === data.action_type);\n\n    /**\n     * The reason of this entry\n     * @type {?string}\n     */\n    this.reason = data.reason || null;\n\n    /**\n     * The user that executed this entry\n     * @type {User}\n     */\n    this.executor = guild.client.options.partials.includes(PartialTypes.USER)\n      ? guild.client.users.add({ id: data.user_id })\n      : guild.client.users.cache.get(data.user_id);\n\n    /**\n     * An entry in the audit log representing a specific change.\n     * @typedef {object} AuditLogChange\n     * @property {string} key The property that was changed, e.g. `nick` for nickname changes\n     * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname\n     * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname\n     */\n\n    /**\n     * Specific property changes\n     * @type {AuditLogChange[]}\n     */\n    this.changes = data.changes ? data.changes.map(c => ({ key: c.key, old: c.old_value, new: c.new_value })) : null;\n\n    /**\n     * The ID of this entry\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * Any extra data from the entry\n     * @type {?Object|Role|GuildMember}\n     */\n    this.extra = null;\n    switch (data.action_type) {\n      case Actions.MEMBER_PRUNE:\n        this.extra = {\n          removed: Number(data.options.members_removed),\n          days: Number(data.options.delete_member_days),\n        };\n        break;\n\n      case Actions.MEMBER_MOVE:\n      case Actions.MESSAGE_DELETE:\n      case Actions.MESSAGE_BULK_DELETE:\n        this.extra = {\n          channel: guild.channels.cache.get(data.options.channel_id) || { id: data.options.channel_id },\n          count: Number(data.options.count),\n        };\n        break;\n\n      case Actions.MESSAGE_PIN:\n      case Actions.MESSAGE_UNPIN:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options.channel_id) || { id: data.options.channel_id },\n          messageID: data.options.message_id,\n        };\n        break;\n\n      case Actions.MEMBER_DISCONNECT:\n        this.extra = {\n          count: Number(data.options.count),\n        };\n        break;\n\n      case Actions.CHANNEL_OVERWRITE_CREATE:\n      case Actions.CHANNEL_OVERWRITE_UPDATE:\n      case Actions.CHANNEL_OVERWRITE_DELETE:\n        switch (data.options.type) {\n          case 'member':\n            this.extra = guild.members.cache.get(data.options.id) || { id: data.options.id, type: 'member' };\n            break;\n\n          case 'role':\n            this.extra = guild.roles.cache.get(data.options.id) || {\n              id: data.options.id,\n              name: data.options.role_name,\n              type: 'role',\n            };\n            break;\n\n          default:\n            break;\n        }\n        break;\n\n      default:\n        break;\n    }\n\n    /**\n     * The target of this entry\n     * @type {?AuditLogEntryTarget}\n     */\n    this.target = null;\n    if (targetType === Targets.UNKNOWN) {\n      this.target = this.changes.reduce((o, c) => {\n        o[c.key] = c.new || c.old;\n        return o;\n      }, {});\n      this.target.id = data.target_id;\n      // MEMBER_DISCONNECT and similar types do not provide a target_id.\n    } else if (targetType === Targets.USER && data.target_id) {\n      this.target = guild.client.options.partials.includes(PartialTypes.USER)\n        ? guild.client.users.add({ id: data.target_id })\n        : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.GUILD) {\n      this.target = guild.client.guilds.cache.get(data.target_id);\n    } else if (targetType === Targets.WEBHOOK) {\n      this.target =\n        logs.webhooks.get(data.target_id) ||\n        new Webhook(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new || c.old;\n              return o;\n            },\n            {\n              id: data.target_id,\n              guild_id: guild.id,\n            },\n          ),\n        );\n    } else if (targetType === Targets.INVITE) {\n      this.target = guild.members.fetch(guild.client.user.id).then(me => {\n        if (me.permissions.has('MANAGE_GUILD')) {\n          const change = this.changes.find(c => c.key === 'code');\n          return guild.fetchInvites().then(invites => {\n            this.target = invites.find(i => i.code === (change.new || change.old));\n          });\n        } else {\n          this.target = this.changes.reduce((o, c) => {\n            o[c.key] = c.new || c.old;\n            return o;\n          }, {});\n          return this.target;\n        }\n      });\n    } else if (targetType === Targets.MESSAGE) {\n      // Discord sends a channel id for the MESSAGE_BULK_DELETE action type.\n      this.target =\n        data.action_type === Actions.MESSAGE_BULK_DELETE\n          ? guild.channels.cache.get(data.target_id) || { id: data.target_id }\n          : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.INTEGRATION) {\n      this.target =\n        logs.integrations.get(data.target_id) ||\n        new Integration(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new || c.old;\n              return o;\n            },\n            { id: data.target_id },\n          ),\n          guild,\n        );\n    } else if (data.target_id) {\n      this.target = guild[`${targetType.toLowerCase()}s`].cache.get(data.target_id) || { id: data.target_id };\n    }\n  }\n\n  /**\n   * The timestamp this entry was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time this entry was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  toJSON() {\n    return Util.flatten(this, { createdTimestamp: true });\n  }\n}\n\nGuildAuditLogs.Actions = Actions;\nGuildAuditLogs.Targets = Targets;\nGuildAuditLogs.Entry = GuildAuditLogsEntry;\n\nmodule.exports = GuildAuditLogs;\n"]},"metadata":{},"sourceType":"script"}