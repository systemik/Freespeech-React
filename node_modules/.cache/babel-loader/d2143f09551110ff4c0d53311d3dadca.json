{"ast":null,"code":"'use strict';\n\nconst BitField = require('./BitField');\n/**\n * Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\n * permissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\n * that override their default permissions.\n * @extends {BitField}\n */\n\n\nclass Permissions extends BitField {\n  /**\n   * @name Permissions\n   * @kind constructor\n   * @memberof Permissions\n   * @param {PermissionResolvable} [bits=0] Bit(s) to read from\n   */\n\n  /**\n   * Data that can be resolved to give a permission number. This can be:\n   * * A string (see {@link Permissions.FLAGS})\n   * * A permission number\n   * * An instance of Permissions\n   * * An Array of PermissionResolvable\n   * @typedef {string|number|Permissions|PermissionResolvable[]} PermissionResolvable\n   */\n\n  /**\n   * Checks whether the bitfield has a permission, or any of multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  any(permission) {\n    let checkAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return checkAdmin && super.has(this.constructor.FLAGS.ADMINISTRATOR) || super.any(permission);\n  }\n  /**\n   * Checks whether the bitfield has a permission, or multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n\n\n  has(permission) {\n    let checkAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return checkAdmin && super.has(this.constructor.FLAGS.ADMINISTRATOR) || super.has(permission);\n  }\n\n}\n/**\n * Numeric permission flags. All available properties:\n * * `ADMINISTRATOR` (implicitly has *all* permissions, and bypasses all channel overwrites)\n * * `CREATE_INSTANT_INVITE` (create invitations to the guild)\n * * `KICK_MEMBERS`\n * * `BAN_MEMBERS`\n * * `MANAGE_CHANNELS` (edit and reorder channels)\n * * `MANAGE_GUILD` (edit the guild information, region, etc.)\n * * `ADD_REACTIONS` (add new reactions to messages)\n * * `VIEW_AUDIT_LOG`\n * * `PRIORITY_SPEAKER`\n * * `STREAM`\n * * `VIEW_CHANNEL`\n * * `SEND_MESSAGES`\n * * `SEND_TTS_MESSAGES`\n * * `MANAGE_MESSAGES` (delete messages and reactions)\n * * `EMBED_LINKS` (links posted will have a preview embedded)\n * * `ATTACH_FILES`\n * * `READ_MESSAGE_HISTORY` (view messages that were posted prior to opening Discord)\n * * `MENTION_EVERYONE`\n * * `USE_EXTERNAL_EMOJIS` (use emojis from different guilds)\n * * `VIEW_GUILD_INSIGHTS`\n * * `CONNECT` (connect to a voice channel)\n * * `SPEAK` (speak in a voice channel)\n * * `MUTE_MEMBERS` (mute members across all voice channels)\n * * `DEAFEN_MEMBERS` (deafen members across all voice channels)\n * * `MOVE_MEMBERS` (move members between voice channels)\n * * `USE_VAD` (use voice activity detection)\n * * `CHANGE_NICKNAME`\n * * `MANAGE_NICKNAMES` (change other members' nicknames)\n * * `MANAGE_ROLES`\n * * `MANAGE_WEBHOOKS`\n * * `MANAGE_EMOJIS`\n * @type {Object}\n * @see {@link https://discord.com/developers/docs/topics/permissions}\n */\n\n\nPermissions.FLAGS = {\n  CREATE_INSTANT_INVITE: 1 << 0,\n  KICK_MEMBERS: 1 << 1,\n  BAN_MEMBERS: 1 << 2,\n  ADMINISTRATOR: 1 << 3,\n  MANAGE_CHANNELS: 1 << 4,\n  MANAGE_GUILD: 1 << 5,\n  ADD_REACTIONS: 1 << 6,\n  VIEW_AUDIT_LOG: 1 << 7,\n  PRIORITY_SPEAKER: 1 << 8,\n  STREAM: 1 << 9,\n  VIEW_CHANNEL: 1 << 10,\n  SEND_MESSAGES: 1 << 11,\n  SEND_TTS_MESSAGES: 1 << 12,\n  MANAGE_MESSAGES: 1 << 13,\n  EMBED_LINKS: 1 << 14,\n  ATTACH_FILES: 1 << 15,\n  READ_MESSAGE_HISTORY: 1 << 16,\n  MENTION_EVERYONE: 1 << 17,\n  USE_EXTERNAL_EMOJIS: 1 << 18,\n  VIEW_GUILD_INSIGHTS: 1 << 19,\n  CONNECT: 1 << 20,\n  SPEAK: 1 << 21,\n  MUTE_MEMBERS: 1 << 22,\n  DEAFEN_MEMBERS: 1 << 23,\n  MOVE_MEMBERS: 1 << 24,\n  USE_VAD: 1 << 25,\n  CHANGE_NICKNAME: 1 << 26,\n  MANAGE_NICKNAMES: 1 << 27,\n  MANAGE_ROLES: 1 << 28,\n  MANAGE_WEBHOOKS: 1 << 29,\n  MANAGE_EMOJIS: 1 << 30\n};\n/**\n * Bitfield representing every permission combined\n * @type {number}\n */\n\nPermissions.ALL = Object.values(Permissions.FLAGS).reduce((all, p) => all | p, 0);\n/**\n * Bitfield representing the default permissions for users\n * @type {number}\n */\n\nPermissions.DEFAULT = 104324673;\nmodule.exports = Permissions;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/util/Permissions.js"],"names":["BitField","require","Permissions","any","permission","checkAdmin","has","constructor","FLAGS","ADMINISTRATOR","CREATE_INSTANT_INVITE","KICK_MEMBERS","BAN_MEMBERS","MANAGE_CHANNELS","MANAGE_GUILD","ADD_REACTIONS","VIEW_AUDIT_LOG","PRIORITY_SPEAKER","STREAM","VIEW_CHANNEL","SEND_MESSAGES","SEND_TTS_MESSAGES","MANAGE_MESSAGES","EMBED_LINKS","ATTACH_FILES","READ_MESSAGE_HISTORY","MENTION_EVERYONE","USE_EXTERNAL_EMOJIS","VIEW_GUILD_INSIGHTS","CONNECT","SPEAK","MUTE_MEMBERS","DEAFEN_MEMBERS","MOVE_MEMBERS","USE_VAD","CHANGE_NICKNAME","MANAGE_NICKNAMES","MANAGE_ROLES","MANAGE_WEBHOOKS","MANAGE_EMOJIS","ALL","Object","values","reduce","all","p","DEFAULT","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\n * permissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\n * that override their default permissions.\n * @extends {BitField}\n */\nclass Permissions extends BitField {\n  /**\n   * @name Permissions\n   * @kind constructor\n   * @memberof Permissions\n   * @param {PermissionResolvable} [bits=0] Bit(s) to read from\n   */\n\n  /**\n   * Data that can be resolved to give a permission number. This can be:\n   * * A string (see {@link Permissions.FLAGS})\n   * * A permission number\n   * * An instance of Permissions\n   * * An Array of PermissionResolvable\n   * @typedef {string|number|Permissions|PermissionResolvable[]} PermissionResolvable\n   */\n\n  /**\n   * Checks whether the bitfield has a permission, or any of multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  any(permission, checkAdmin = true) {\n    return (checkAdmin && super.has(this.constructor.FLAGS.ADMINISTRATOR)) || super.any(permission);\n  }\n\n  /**\n   * Checks whether the bitfield has a permission, or multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  has(permission, checkAdmin = true) {\n    return (checkAdmin && super.has(this.constructor.FLAGS.ADMINISTRATOR)) || super.has(permission);\n  }\n}\n\n/**\n * Numeric permission flags. All available properties:\n * * `ADMINISTRATOR` (implicitly has *all* permissions, and bypasses all channel overwrites)\n * * `CREATE_INSTANT_INVITE` (create invitations to the guild)\n * * `KICK_MEMBERS`\n * * `BAN_MEMBERS`\n * * `MANAGE_CHANNELS` (edit and reorder channels)\n * * `MANAGE_GUILD` (edit the guild information, region, etc.)\n * * `ADD_REACTIONS` (add new reactions to messages)\n * * `VIEW_AUDIT_LOG`\n * * `PRIORITY_SPEAKER`\n * * `STREAM`\n * * `VIEW_CHANNEL`\n * * `SEND_MESSAGES`\n * * `SEND_TTS_MESSAGES`\n * * `MANAGE_MESSAGES` (delete messages and reactions)\n * * `EMBED_LINKS` (links posted will have a preview embedded)\n * * `ATTACH_FILES`\n * * `READ_MESSAGE_HISTORY` (view messages that were posted prior to opening Discord)\n * * `MENTION_EVERYONE`\n * * `USE_EXTERNAL_EMOJIS` (use emojis from different guilds)\n * * `VIEW_GUILD_INSIGHTS`\n * * `CONNECT` (connect to a voice channel)\n * * `SPEAK` (speak in a voice channel)\n * * `MUTE_MEMBERS` (mute members across all voice channels)\n * * `DEAFEN_MEMBERS` (deafen members across all voice channels)\n * * `MOVE_MEMBERS` (move members between voice channels)\n * * `USE_VAD` (use voice activity detection)\n * * `CHANGE_NICKNAME`\n * * `MANAGE_NICKNAMES` (change other members' nicknames)\n * * `MANAGE_ROLES`\n * * `MANAGE_WEBHOOKS`\n * * `MANAGE_EMOJIS`\n * @type {Object}\n * @see {@link https://discord.com/developers/docs/topics/permissions}\n */\nPermissions.FLAGS = {\n  CREATE_INSTANT_INVITE: 1 << 0,\n  KICK_MEMBERS: 1 << 1,\n  BAN_MEMBERS: 1 << 2,\n  ADMINISTRATOR: 1 << 3,\n  MANAGE_CHANNELS: 1 << 4,\n  MANAGE_GUILD: 1 << 5,\n  ADD_REACTIONS: 1 << 6,\n  VIEW_AUDIT_LOG: 1 << 7,\n  PRIORITY_SPEAKER: 1 << 8,\n  STREAM: 1 << 9,\n  VIEW_CHANNEL: 1 << 10,\n  SEND_MESSAGES: 1 << 11,\n  SEND_TTS_MESSAGES: 1 << 12,\n  MANAGE_MESSAGES: 1 << 13,\n  EMBED_LINKS: 1 << 14,\n  ATTACH_FILES: 1 << 15,\n  READ_MESSAGE_HISTORY: 1 << 16,\n  MENTION_EVERYONE: 1 << 17,\n  USE_EXTERNAL_EMOJIS: 1 << 18,\n  VIEW_GUILD_INSIGHTS: 1 << 19,\n  CONNECT: 1 << 20,\n  SPEAK: 1 << 21,\n  MUTE_MEMBERS: 1 << 22,\n  DEAFEN_MEMBERS: 1 << 23,\n  MOVE_MEMBERS: 1 << 24,\n  USE_VAD: 1 << 25,\n  CHANGE_NICKNAME: 1 << 26,\n  MANAGE_NICKNAMES: 1 << 27,\n  MANAGE_ROLES: 1 << 28,\n  MANAGE_WEBHOOKS: 1 << 29,\n  MANAGE_EMOJIS: 1 << 30,\n};\n\n/**\n * Bitfield representing every permission combined\n * @type {number}\n */\nPermissions.ALL = Object.values(Permissions.FLAGS).reduce((all, p) => all | p, 0);\n\n/**\n * Bitfield representing the default permissions for users\n * @type {number}\n */\nPermissions.DEFAULT = 104324673;\n\nmodule.exports = Permissions;\n"]},"metadata":{},"sourceType":"script"}