{"ast":null,"code":"'use strict';\n\nconst Role = require('./Role');\n\nconst {\n  TypeError\n} = require('../errors');\n\nconst Permissions = require('../util/Permissions');\n\nconst Util = require('../util/Util');\n/**\n * Represents a permission overwrite for a role or member in a guild channel.\n */\n\n\nclass PermissionOverwrites {\n  constructor(guildChannel, data) {\n    /**\n     * The GuildChannel this overwrite is for\n     * @name PermissionOverwrites#channel\n     * @type {GuildChannel}\n     * @readonly\n     */\n    Object.defineProperty(this, 'channel', {\n      value: guildChannel\n    });\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The ID of this overwrite, either a user ID or a role ID\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    /**\n     * The type of a permission overwrite. It can be one of:\n     * * member\n     * * role\n     * @typedef {string} OverwriteType\n     */\n\n    /**\n     * The type of this overwrite\n     * @type {OverwriteType}\n     */\n\n    this.type = data.type;\n    /**\n     * The permissions that are denied for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n\n    this.deny = new Permissions(data.deny).freeze();\n    /**\n     * The permissions that are allowed for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n\n    this.allow = new Permissions(data.allow).freeze();\n  }\n  /**\n   * Updates this permissionOverwrites.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {string} [reason] Reason for creating/editing this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   * @example\n   * // Update permission overwrites\n   * permissionOverwrites.update({\n   *   SEND_MESSAGES: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n   *   .catch(console.error);\n   */\n\n\n  update(options, reason) {\n    const {\n      allow,\n      deny\n    } = this.constructor.resolveOverwriteOptions(options, this);\n    return this.channel.client.api.channels(this.channel.id).permissions[this.id].put({\n      data: {\n        id: this.id,\n        type: this.type,\n        allow: allow.bitfield,\n        deny: deny.bitfield\n      },\n      reason\n    }).then(() => this);\n  }\n  /**\n   * Deletes this Permission Overwrite.\n   * @param {string} [reason] Reason for deleting this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   */\n\n\n  delete(reason) {\n    return this.channel.client.api.channels[this.channel.id].permissions[this.id].delete({\n      reason\n    }).then(() => this);\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n  /**\n   * An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n   * ```js\n   * {\n   *  'SEND_MESSAGES': true,\n   *  'EMBED_LINKS': null,\n   *  'ATTACH_FILES': false,\n   * }\n   * ```\n   * @typedef {Object} PermissionOverwriteOptions\n   */\n\n  /**\n   * @typedef {object} ResolvedOverwriteOptions\n   * @property {Permissions} allow The allowed permissions\n   * @property {Permissions} deny The denied permissions\n   */\n\n  /**\n   * Resolves bitfield permissions overwrites from an object.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {Object} initialPermissions The initial permissions\n   * @param {PermissionResolvable} initialPermissions.allow Initial allowed permissions\n   * @param {PermissionResolvable} initialPermissions.deny Initial denied permissions\n   * @returns {ResolvedOverwriteOptions}\n   */\n\n\n  static resolveOverwriteOptions(options) {\n    let {\n      allow,\n      deny\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    allow = new Permissions(allow);\n    deny = new Permissions(deny);\n\n    for (const [perm, value] of Object.entries(options)) {\n      if (value === true) {\n        allow.add(Permissions.FLAGS[perm]);\n        deny.remove(Permissions.FLAGS[perm]);\n      } else if (value === false) {\n        allow.remove(Permissions.FLAGS[perm]);\n        deny.add(Permissions.FLAGS[perm]);\n      } else if (value === null) {\n        allow.remove(Permissions.FLAGS[perm]);\n        deny.remove(Permissions.FLAGS[perm]);\n      }\n    }\n\n    return {\n      allow,\n      deny\n    };\n  }\n  /**\n   * The raw data for a permission overwrite\n   * @typedef {Object} RawOverwriteData\n   * @property {Snowflake} id The id of the overwrite\n   * @property {number} allow The permissions to allow\n   * @property {number} deny The permissions to deny\n   * @property {OverwriteType} type The type of this OverwriteData\n   */\n\n  /**\n   * Data that can be resolved into {@link RawOverwriteData}\n   * @typedef {PermissionOverwrites|OverwriteData} OverwriteResolvable\n   */\n\n  /**\n   * Data that can be used for a permission overwrite\n   * @typedef {Object} OverwriteData\n   * @property {GuildMemberResolvable|RoleResolvable} id Member or role this overwrite is for\n   * @property {PermissionResolvable} [allow] The permissions to allow\n   * @property {PermissionResolvable} [deny] The permissions to deny\n   * @property {OverwriteType} [type] The type of this OverwriteData\n   */\n\n  /**\n   * Resolves an overwrite into {@link RawOverwriteData}.\n   * @param {OverwriteResolvable} overwrite The overwrite-like data to resolve\n   * @param {Guild} guild The guild to resolve from\n   * @returns {RawOverwriteData}\n   */\n\n\n  static resolve(overwrite, guild) {\n    if (overwrite instanceof this) return overwrite.toJSON();\n\n    if (typeof overwrite.id === 'string' && ['role', 'member'].includes(overwrite.type)) {\n      return { ...overwrite,\n        allow: Permissions.resolve(overwrite.allow),\n        deny: Permissions.resolve(overwrite.deny)\n      };\n    }\n\n    const userOrRole = guild.roles.resolve(overwrite.id) || guild.client.users.resolve(overwrite.id);\n    if (!userOrRole) throw new TypeError('INVALID_TYPE', 'parameter', 'User nor a Role');\n    const type = userOrRole instanceof Role ? 'role' : 'member';\n    return {\n      id: userOrRole.id,\n      type,\n      allow: Permissions.resolve(overwrite.allow),\n      deny: Permissions.resolve(overwrite.deny)\n    };\n  }\n\n}\n\nmodule.exports = PermissionOverwrites;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/PermissionOverwrites.js"],"names":["Role","require","TypeError","Permissions","Util","PermissionOverwrites","constructor","guildChannel","data","Object","defineProperty","value","_patch","id","type","deny","freeze","allow","update","options","reason","resolveOverwriteOptions","channel","client","api","channels","permissions","put","bitfield","then","delete","toJSON","flatten","perm","entries","add","FLAGS","remove","resolve","overwrite","guild","includes","userOrRole","roles","users","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Role = require('./Role');\nconst { TypeError } = require('../errors');\nconst Permissions = require('../util/Permissions');\nconst Util = require('../util/Util');\n\n/**\n * Represents a permission overwrite for a role or member in a guild channel.\n */\nclass PermissionOverwrites {\n  constructor(guildChannel, data) {\n    /**\n     * The GuildChannel this overwrite is for\n     * @name PermissionOverwrites#channel\n     * @type {GuildChannel}\n     * @readonly\n     */\n    Object.defineProperty(this, 'channel', { value: guildChannel });\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The ID of this overwrite, either a user ID or a role ID\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The type of a permission overwrite. It can be one of:\n     * * member\n     * * role\n     * @typedef {string} OverwriteType\n     */\n\n    /**\n     * The type of this overwrite\n     * @type {OverwriteType}\n     */\n    this.type = data.type;\n\n    /**\n     * The permissions that are denied for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n    this.deny = new Permissions(data.deny).freeze();\n\n    /**\n     * The permissions that are allowed for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n    this.allow = new Permissions(data.allow).freeze();\n  }\n\n  /**\n   * Updates this permissionOverwrites.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {string} [reason] Reason for creating/editing this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   * @example\n   * // Update permission overwrites\n   * permissionOverwrites.update({\n   *   SEND_MESSAGES: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n   *   .catch(console.error);\n   */\n  update(options, reason) {\n    const { allow, deny } = this.constructor.resolveOverwriteOptions(options, this);\n\n    return this.channel.client.api\n      .channels(this.channel.id)\n      .permissions[this.id].put({\n        data: { id: this.id, type: this.type, allow: allow.bitfield, deny: deny.bitfield },\n        reason,\n      })\n      .then(() => this);\n  }\n\n  /**\n   * Deletes this Permission Overwrite.\n   * @param {string} [reason] Reason for deleting this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   */\n  delete(reason) {\n    return this.channel.client.api.channels[this.channel.id].permissions[this.id].delete({ reason }).then(() => this);\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n\n  /**\n   * An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n   * ```js\n   * {\n   *  'SEND_MESSAGES': true,\n   *  'EMBED_LINKS': null,\n   *  'ATTACH_FILES': false,\n   * }\n   * ```\n   * @typedef {Object} PermissionOverwriteOptions\n   */\n\n  /**\n   * @typedef {object} ResolvedOverwriteOptions\n   * @property {Permissions} allow The allowed permissions\n   * @property {Permissions} deny The denied permissions\n   */\n\n  /**\n   * Resolves bitfield permissions overwrites from an object.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {Object} initialPermissions The initial permissions\n   * @param {PermissionResolvable} initialPermissions.allow Initial allowed permissions\n   * @param {PermissionResolvable} initialPermissions.deny Initial denied permissions\n   * @returns {ResolvedOverwriteOptions}\n   */\n  static resolveOverwriteOptions(options, { allow, deny } = {}) {\n    allow = new Permissions(allow);\n    deny = new Permissions(deny);\n\n    for (const [perm, value] of Object.entries(options)) {\n      if (value === true) {\n        allow.add(Permissions.FLAGS[perm]);\n        deny.remove(Permissions.FLAGS[perm]);\n      } else if (value === false) {\n        allow.remove(Permissions.FLAGS[perm]);\n        deny.add(Permissions.FLAGS[perm]);\n      } else if (value === null) {\n        allow.remove(Permissions.FLAGS[perm]);\n        deny.remove(Permissions.FLAGS[perm]);\n      }\n    }\n\n    return { allow, deny };\n  }\n\n  /**\n   * The raw data for a permission overwrite\n   * @typedef {Object} RawOverwriteData\n   * @property {Snowflake} id The id of the overwrite\n   * @property {number} allow The permissions to allow\n   * @property {number} deny The permissions to deny\n   * @property {OverwriteType} type The type of this OverwriteData\n   */\n\n  /**\n   * Data that can be resolved into {@link RawOverwriteData}\n   * @typedef {PermissionOverwrites|OverwriteData} OverwriteResolvable\n   */\n\n  /**\n   * Data that can be used for a permission overwrite\n   * @typedef {Object} OverwriteData\n   * @property {GuildMemberResolvable|RoleResolvable} id Member or role this overwrite is for\n   * @property {PermissionResolvable} [allow] The permissions to allow\n   * @property {PermissionResolvable} [deny] The permissions to deny\n   * @property {OverwriteType} [type] The type of this OverwriteData\n   */\n\n  /**\n   * Resolves an overwrite into {@link RawOverwriteData}.\n   * @param {OverwriteResolvable} overwrite The overwrite-like data to resolve\n   * @param {Guild} guild The guild to resolve from\n   * @returns {RawOverwriteData}\n   */\n  static resolve(overwrite, guild) {\n    if (overwrite instanceof this) return overwrite.toJSON();\n    if (typeof overwrite.id === 'string' && ['role', 'member'].includes(overwrite.type)) {\n      return { ...overwrite, allow: Permissions.resolve(overwrite.allow), deny: Permissions.resolve(overwrite.deny) };\n    }\n\n    const userOrRole = guild.roles.resolve(overwrite.id) || guild.client.users.resolve(overwrite.id);\n    if (!userOrRole) throw new TypeError('INVALID_TYPE', 'parameter', 'User nor a Role');\n    const type = userOrRole instanceof Role ? 'role' : 'member';\n\n    return {\n      id: userOrRole.id,\n      type,\n      allow: Permissions.resolve(overwrite.allow),\n      deny: Permissions.resolve(overwrite.deny),\n    };\n  }\n}\n\nmodule.exports = PermissionOverwrites;\n"]},"metadata":{},"sourceType":"script"}