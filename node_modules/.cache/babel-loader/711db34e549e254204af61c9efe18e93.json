{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst {\n  Events\n} = require('../../util/Constants');\n\nconst {\n  PartialTypes\n} = require('../../util/Constants');\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id',\n     // If originating from a guild\n     guild_id: 'id',\n     member: { ..., user: { ... } } }\n*/\n\n\nclass MessageReactionAdd extends Action {\n  handle(data) {\n    if (!data.emoji) return false;\n    const user = this.getUserFromMember(data);\n    if (!user) return false; // Verify channel\n\n    const channel = this.getChannel(data);\n    if (!channel || channel.type === 'voice') return false; // Verify message\n\n    const message = this.getMessage(data, channel);\n    if (!message) return false; // Verify reaction\n\n    if (message.partial && !this.client.options.partials.includes(PartialTypes.REACTION)) return false;\n    const existing = message.reactions.cache.get(data.emoji.id || data.emoji.name);\n    if (existing && existing.users.cache.has(user.id)) return {\n      message,\n      reaction: existing,\n      user\n    };\n    const reaction = message.reactions.add({\n      emoji: data.emoji,\n      count: message.partial ? null : 0,\n      me: user.id === this.client.user.id\n    });\n    if (!reaction) return false;\n\n    reaction._add(user);\n    /**\n     * Emitted whenever a reaction is added to a cached message.\n     * @event Client#messageReactionAdd\n     * @param {MessageReaction} messageReaction The reaction object\n     * @param {User} user The user that applied the guild or reaction emoji\n     */\n\n\n    this.client.emit(Events.MESSAGE_REACTION_ADD, reaction, user);\n    return {\n      message,\n      reaction,\n      user\n    };\n  }\n\n}\n\nmodule.exports = MessageReactionAdd;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/client/actions/MessageReactionAdd.js"],"names":["Action","require","Events","PartialTypes","MessageReactionAdd","handle","data","emoji","user","getUserFromMember","channel","getChannel","type","message","getMessage","partial","client","options","partials","includes","REACTION","existing","reactions","cache","get","id","name","users","has","reaction","add","count","me","_add","emit","MESSAGE_REACTION_ADD","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,sBAAD,CAA1B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAmBF,OAAO,CAAC,sBAAD,CAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,kBAAN,SAAiCJ,MAAjC,CAAwC;AACtCK,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,QAAI,CAACA,IAAI,CAACC,KAAV,EAAiB,OAAO,KAAP;AAEjB,UAAMC,IAAI,GAAG,KAAKC,iBAAL,CAAuBH,IAAvB,CAAb;AACA,QAAI,CAACE,IAAL,EAAW,OAAO,KAAP,CAJA,CAMX;;AACA,UAAME,OAAO,GAAG,KAAKC,UAAL,CAAgBL,IAAhB,CAAhB;AACA,QAAI,CAACI,OAAD,IAAYA,OAAO,CAACE,IAAR,KAAiB,OAAjC,EAA0C,OAAO,KAAP,CAR/B,CAUX;;AACA,UAAMC,OAAO,GAAG,KAAKC,UAAL,CAAgBR,IAAhB,EAAsBI,OAAtB,CAAhB;AACA,QAAI,CAACG,OAAL,EAAc,OAAO,KAAP,CAZH,CAcX;;AACA,QAAIA,OAAO,CAACE,OAAR,IAAmB,CAAC,KAAKC,MAAL,CAAYC,OAAZ,CAAoBC,QAApB,CAA6BC,QAA7B,CAAsChB,YAAY,CAACiB,QAAnD,CAAxB,EAAsF,OAAO,KAAP;AACtF,UAAMC,QAAQ,GAAGR,OAAO,CAACS,SAAR,CAAkBC,KAAlB,CAAwBC,GAAxB,CAA4BlB,IAAI,CAACC,KAAL,CAAWkB,EAAX,IAAiBnB,IAAI,CAACC,KAAL,CAAWmB,IAAxD,CAAjB;AACA,QAAIL,QAAQ,IAAIA,QAAQ,CAACM,KAAT,CAAeJ,KAAf,CAAqBK,GAArB,CAAyBpB,IAAI,CAACiB,EAA9B,CAAhB,EAAmD,OAAO;AAAEZ,MAAAA,OAAF;AAAWgB,MAAAA,QAAQ,EAAER,QAArB;AAA+Bb,MAAAA;AAA/B,KAAP;AACnD,UAAMqB,QAAQ,GAAGhB,OAAO,CAACS,SAAR,CAAkBQ,GAAlB,CAAsB;AACrCvB,MAAAA,KAAK,EAAED,IAAI,CAACC,KADyB;AAErCwB,MAAAA,KAAK,EAAElB,OAAO,CAACE,OAAR,GAAkB,IAAlB,GAAyB,CAFK;AAGrCiB,MAAAA,EAAE,EAAExB,IAAI,CAACiB,EAAL,KAAY,KAAKT,MAAL,CAAYR,IAAZ,CAAiBiB;AAHI,KAAtB,CAAjB;AAKA,QAAI,CAACI,QAAL,EAAe,OAAO,KAAP;;AACfA,IAAAA,QAAQ,CAACI,IAAT,CAAczB,IAAd;AACA;AACJ;AACA;AACA;AACA;AACA;;;AACI,SAAKQ,MAAL,CAAYkB,IAAZ,CAAiBhC,MAAM,CAACiC,oBAAxB,EAA8CN,QAA9C,EAAwDrB,IAAxD;AAEA,WAAO;AAAEK,MAAAA,OAAF;AAAWgB,MAAAA,QAAX;AAAqBrB,MAAAA;AAArB,KAAP;AACD;;AAnCqC;;AAsCxC4B,MAAM,CAACC,OAAP,GAAiBjC,kBAAjB","sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\nconst { PartialTypes } = require('../../util/Constants');\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id',\n     // If originating from a guild\n     guild_id: 'id',\n     member: { ..., user: { ... } } }\n*/\n\nclass MessageReactionAdd extends Action {\n  handle(data) {\n    if (!data.emoji) return false;\n\n    const user = this.getUserFromMember(data);\n    if (!user) return false;\n\n    // Verify channel\n    const channel = this.getChannel(data);\n    if (!channel || channel.type === 'voice') return false;\n\n    // Verify message\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    // Verify reaction\n    if (message.partial && !this.client.options.partials.includes(PartialTypes.REACTION)) return false;\n    const existing = message.reactions.cache.get(data.emoji.id || data.emoji.name);\n    if (existing && existing.users.cache.has(user.id)) return { message, reaction: existing, user };\n    const reaction = message.reactions.add({\n      emoji: data.emoji,\n      count: message.partial ? null : 0,\n      me: user.id === this.client.user.id,\n    });\n    if (!reaction) return false;\n    reaction._add(user);\n    /**\n     * Emitted whenever a reaction is added to a cached message.\n     * @event Client#messageReactionAdd\n     * @param {MessageReaction} messageReaction The reaction object\n     * @param {User} user The user that applied the guild or reaction emoji\n     */\n    this.client.emit(Events.MESSAGE_REACTION_ADD, reaction, user);\n\n    return { message, reaction, user };\n  }\n}\n\nmodule.exports = MessageReactionAdd;\n"]},"metadata":{},"sourceType":"script"}