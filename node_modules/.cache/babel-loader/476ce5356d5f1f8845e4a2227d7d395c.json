{"ast":null,"code":"'use strict';\n\nconst {\n  Presence\n} = require('./Presence');\n\nconst {\n  TypeError\n} = require('../errors');\n\nconst Collection = require('../util/Collection');\n\nconst {\n  ActivityTypes,\n  OPCodes\n} = require('../util/Constants');\n\nclass ClientPresence extends Presence {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} [data={}] The data for the client presence\n   */\n  constructor(client) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(client, Object.assign(data, {\n      status: 'online',\n      user: {\n        id: null\n      }\n    }));\n  }\n\n  async set(presence) {\n    const packet = await this._parse(presence);\n    this.patch(packet);\n\n    if (typeof presence.shardID === 'undefined') {\n      this.client.ws.broadcast({\n        op: OPCodes.STATUS_UPDATE,\n        d: packet\n      });\n    } else if (Array.isArray(presence.shardID)) {\n      for (const shardID of presence.shardID) {\n        this.client.ws.shards.get(shardID).send({\n          op: OPCodes.STATUS_UPDATE,\n          d: packet\n        });\n      }\n    } else {\n      this.client.ws.shards.get(presence.shardID).send({\n        op: OPCodes.STATUS_UPDATE,\n        d: packet\n      });\n    }\n\n    return this;\n  }\n\n  async _parse(_ref) {\n    let {\n      status,\n      since,\n      afk,\n      activity\n    } = _ref;\n    const applicationID = activity && (activity.application ? activity.application.id || activity.application : null);\n    let assets = new Collection();\n\n    if (activity) {\n      if (typeof activity.name !== 'string') throw new TypeError('INVALID_TYPE', 'name', 'string');\n      if (!activity.type) activity.type = 0;\n\n      if (activity.assets && applicationID) {\n        try {\n          const a = await this.client.api.oauth2.applications(applicationID).assets.get();\n\n          for (const asset of a) assets.set(asset.name, asset.id);\n        } catch {} // eslint-disable-line no-empty\n\n      }\n    }\n\n    const packet = {\n      afk: afk != null ? afk : false,\n      // eslint-disable-line eqeqeq\n      since: since != null ? since : null,\n      // eslint-disable-line eqeqeq\n      status: status || this.status,\n      game: activity ? {\n        type: activity.type,\n        name: activity.name,\n        url: activity.url,\n        details: activity.details || undefined,\n        state: activity.state || undefined,\n        assets: activity.assets ? {\n          large_text: activity.assets.largeText || undefined,\n          small_text: activity.assets.smallText || undefined,\n          large_image: assets.get(activity.assets.largeImage) || activity.assets.largeImage,\n          small_image: assets.get(activity.assets.smallImage) || activity.assets.smallImage\n        } : undefined,\n        timestamps: activity.timestamps || undefined,\n        party: activity.party || undefined,\n        application_id: applicationID || undefined,\n        secrets: activity.secrets || undefined,\n        instance: activity.instance || undefined\n      } : null\n    };\n\n    if ((status || afk || since) && !activity) {\n      packet.game = this.activities[0] || null;\n    }\n\n    if (packet.game) {\n      packet.game.type = typeof packet.game.type === 'number' ? packet.game.type : ActivityTypes.indexOf(packet.game.type);\n    }\n\n    return packet;\n  }\n\n}\n\nmodule.exports = ClientPresence;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/ClientPresence.js"],"names":["Presence","require","TypeError","Collection","ActivityTypes","OPCodes","ClientPresence","constructor","client","data","Object","assign","status","user","id","set","presence","packet","_parse","patch","shardID","ws","broadcast","op","STATUS_UPDATE","d","Array","isArray","shards","get","send","since","afk","activity","applicationID","application","assets","name","type","a","api","oauth2","applications","asset","game","url","details","undefined","state","large_text","largeText","small_text","smallText","large_image","largeImage","small_image","smallImage","timestamps","party","application_id","secrets","instance","activities","indexOf","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { Presence } = require('./Presence');\nconst { TypeError } = require('../errors');\nconst Collection = require('../util/Collection');\nconst { ActivityTypes, OPCodes } = require('../util/Constants');\n\nclass ClientPresence extends Presence {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} [data={}] The data for the client presence\n   */\n  constructor(client, data = {}) {\n    super(client, Object.assign(data, { status: 'online', user: { id: null } }));\n  }\n\n  async set(presence) {\n    const packet = await this._parse(presence);\n    this.patch(packet);\n    if (typeof presence.shardID === 'undefined') {\n      this.client.ws.broadcast({ op: OPCodes.STATUS_UPDATE, d: packet });\n    } else if (Array.isArray(presence.shardID)) {\n      for (const shardID of presence.shardID) {\n        this.client.ws.shards.get(shardID).send({ op: OPCodes.STATUS_UPDATE, d: packet });\n      }\n    } else {\n      this.client.ws.shards.get(presence.shardID).send({ op: OPCodes.STATUS_UPDATE, d: packet });\n    }\n    return this;\n  }\n\n  async _parse({ status, since, afk, activity }) {\n    const applicationID = activity && (activity.application ? activity.application.id || activity.application : null);\n    let assets = new Collection();\n    if (activity) {\n      if (typeof activity.name !== 'string') throw new TypeError('INVALID_TYPE', 'name', 'string');\n      if (!activity.type) activity.type = 0;\n      if (activity.assets && applicationID) {\n        try {\n          const a = await this.client.api.oauth2.applications(applicationID).assets.get();\n          for (const asset of a) assets.set(asset.name, asset.id);\n        } catch {} // eslint-disable-line no-empty\n      }\n    }\n\n    const packet = {\n      afk: afk != null ? afk : false, // eslint-disable-line eqeqeq\n      since: since != null ? since : null, // eslint-disable-line eqeqeq\n      status: status || this.status,\n      game: activity\n        ? {\n            type: activity.type,\n            name: activity.name,\n            url: activity.url,\n            details: activity.details || undefined,\n            state: activity.state || undefined,\n            assets: activity.assets\n              ? {\n                  large_text: activity.assets.largeText || undefined,\n                  small_text: activity.assets.smallText || undefined,\n                  large_image: assets.get(activity.assets.largeImage) || activity.assets.largeImage,\n                  small_image: assets.get(activity.assets.smallImage) || activity.assets.smallImage,\n                }\n              : undefined,\n            timestamps: activity.timestamps || undefined,\n            party: activity.party || undefined,\n            application_id: applicationID || undefined,\n            secrets: activity.secrets || undefined,\n            instance: activity.instance || undefined,\n          }\n        : null,\n    };\n\n    if ((status || afk || since) && !activity) {\n      packet.game = this.activities[0] || null;\n    }\n\n    if (packet.game) {\n      packet.game.type =\n        typeof packet.game.type === 'number' ? packet.game.type : ActivityTypes.indexOf(packet.game.type);\n    }\n\n    return packet;\n  }\n}\n\nmodule.exports = ClientPresence;\n"]},"metadata":{},"sourceType":"script"}