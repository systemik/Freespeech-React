{"ast":null,"code":"'use strict';\n\nconst {\n  Events,\n  Status\n} = require('../../../util/Constants');\n\nmodule.exports = async (client, _ref, shard) => {\n  let {\n    d: data\n  } = _ref;\n  let guild = client.guilds.cache.get(data.id);\n\n  if (guild) {\n    if (!guild.available && !data.unavailable) {\n      // A newly available guild\n      guild._patch(data); // If the client was ready before and we had unavailable guilds, fetch them\n\n\n      if (client.ws.status === Status.READY && client.options.fetchAllMembers) {\n        await guild.members.fetch().catch(err => client.emit(Events.DEBUG, `Failed to fetch all members: ${err}\\n${err.stack}`));\n      }\n    }\n  } else {\n    // A new guild\n    data.shardID = shard.id;\n    guild = client.guilds.add(data);\n\n    if (client.ws.status === Status.READY) {\n      /**\n       * Emitted whenever the client joins a guild.\n       * @event Client#guildCreate\n       * @param {Guild} guild The created guild\n       */\n      if (client.options.fetchAllMembers) {\n        await guild.members.fetch().catch(err => client.emit(Events.DEBUG, `Failed to fetch all members: ${err}\\n${err.stack}`));\n      }\n\n      client.emit(Events.GUILD_CREATE, guild);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/client/websocket/handlers/GUILD_CREATE.js"],"names":["Events","Status","require","module","exports","client","shard","d","data","guild","guilds","cache","get","id","available","unavailable","_patch","ws","status","READY","options","fetchAllMembers","members","fetch","catch","err","emit","DEBUG","stack","shardID","add","GUILD_CREATE"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA,MAAF;AAAUC,EAAAA;AAAV,IAAqBC,OAAO,CAAC,yBAAD,CAAlC;;AAEAC,MAAM,CAACC,OAAP,GAAiB,OAAOC,MAAP,QAA4BC,KAA5B,KAAsC;AAAA,MAAvB;AAAEC,IAAAA,CAAC,EAAEC;AAAL,GAAuB;AACrD,MAAIC,KAAK,GAAGJ,MAAM,CAACK,MAAP,CAAcC,KAAd,CAAoBC,GAApB,CAAwBJ,IAAI,CAACK,EAA7B,CAAZ;;AACA,MAAIJ,KAAJ,EAAW;AACT,QAAI,CAACA,KAAK,CAACK,SAAP,IAAoB,CAACN,IAAI,CAACO,WAA9B,EAA2C;AACzC;AACAN,MAAAA,KAAK,CAACO,MAAN,CAAaR,IAAb,EAFyC,CAGzC;;;AACA,UAAIH,MAAM,CAACY,EAAP,CAAUC,MAAV,KAAqBjB,MAAM,CAACkB,KAA5B,IAAqCd,MAAM,CAACe,OAAP,CAAeC,eAAxD,EAAyE;AACvE,cAAMZ,KAAK,CAACa,OAAN,CACHC,KADG,GAEHC,KAFG,CAEGC,GAAG,IAAIpB,MAAM,CAACqB,IAAP,CAAY1B,MAAM,CAAC2B,KAAnB,EAA2B,gCAA+BF,GAAI,KAAIA,GAAG,CAACG,KAAM,EAA5E,CAFV,CAAN;AAGD;AACF;AACF,GAXD,MAWO;AACL;AACApB,IAAAA,IAAI,CAACqB,OAAL,GAAevB,KAAK,CAACO,EAArB;AACAJ,IAAAA,KAAK,GAAGJ,MAAM,CAACK,MAAP,CAAcoB,GAAd,CAAkBtB,IAAlB,CAAR;;AACA,QAAIH,MAAM,CAACY,EAAP,CAAUC,MAAV,KAAqBjB,MAAM,CAACkB,KAAhC,EAAuC;AACrC;AACN;AACA;AACA;AACA;AACM,UAAId,MAAM,CAACe,OAAP,CAAeC,eAAnB,EAAoC;AAClC,cAAMZ,KAAK,CAACa,OAAN,CACHC,KADG,GAEHC,KAFG,CAEGC,GAAG,IAAIpB,MAAM,CAACqB,IAAP,CAAY1B,MAAM,CAAC2B,KAAnB,EAA2B,gCAA+BF,GAAI,KAAIA,GAAG,CAACG,KAAM,EAA5E,CAFV,CAAN;AAGD;;AACDvB,MAAAA,MAAM,CAACqB,IAAP,CAAY1B,MAAM,CAAC+B,YAAnB,EAAiCtB,KAAjC;AACD;AACF;AACF,CA/BD","sourcesContent":["'use strict';\n\nconst { Events, Status } = require('../../../util/Constants');\n\nmodule.exports = async (client, { d: data }, shard) => {\n  let guild = client.guilds.cache.get(data.id);\n  if (guild) {\n    if (!guild.available && !data.unavailable) {\n      // A newly available guild\n      guild._patch(data);\n      // If the client was ready before and we had unavailable guilds, fetch them\n      if (client.ws.status === Status.READY && client.options.fetchAllMembers) {\n        await guild.members\n          .fetch()\n          .catch(err => client.emit(Events.DEBUG, `Failed to fetch all members: ${err}\\n${err.stack}`));\n      }\n    }\n  } else {\n    // A new guild\n    data.shardID = shard.id;\n    guild = client.guilds.add(data);\n    if (client.ws.status === Status.READY) {\n      /**\n       * Emitted whenever the client joins a guild.\n       * @event Client#guildCreate\n       * @param {Guild} guild The created guild\n       */\n      if (client.options.fetchAllMembers) {\n        await guild.members\n          .fetch()\n          .catch(err => client.emit(Events.DEBUG, `Failed to fetch all members: ${err}\\n${err.stack}`));\n      }\n      client.emit(Events.GUILD_CREATE, guild);\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}