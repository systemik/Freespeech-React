{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst stream = require('stream');\n\nconst fetch = require('node-fetch');\n\nconst {\n  Error: DiscordError,\n  TypeError\n} = require('../errors');\n\nconst {\n  browser\n} = require('../util/Constants');\n\nconst Util = require('../util/Util');\n/**\n * The DataResolver identifies different objects and tries to resolve a specific piece of information from them.\n * @private\n */\n\n\nclass DataResolver {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n  /**\n   * Data that can be resolved to give an invite code. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Data that can be resolved to give an template code. This can be:\n   * * A template code\n   * * A template URL\n   * @typedef {string} GuildTemplateResolvable\n   */\n\n  /**\n   * Resolves the string to a code based on the passed regex.\n   * @param {string} data The string to resolve\n   * @param {RegExp} regex The RegExp used to extract the code\n   * @returns {string}\n   */\n\n\n  static resolveCode(data, regex) {\n    const match = regex.exec(data);\n    return match ? match[1] || data : data;\n  }\n  /**\n   * Resolves InviteResolvable to an invite code.\n   * @param {InviteResolvable} data The invite resolvable to resolve\n   * @returns {string}\n   */\n\n\n  static resolveInviteCode(data) {\n    return this.resolveCode(data, /discord(?:(?:app)?\\.com\\/invite|\\.gg(?:\\/invite)?)\\/([\\w-]{2,255})/i);\n  }\n  /**\n   * Resolves GuildTemplateResolvable to a template code.\n   * @param {GuildTemplateResolvable} data The template resolvable to resolve\n   * @returns {string}\n   */\n\n\n  static resolveGuildTemplateCode(data) {\n    return this.resolveCode(data, /discord(?:app)?\\.(?:com\\/template|new)\\/([\\w-]{2,255})/i);\n  }\n  /**\n   * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.\n   * @param {BufferResolvable|Base64Resolvable} image The image to be resolved\n   * @returns {Promise<?string>}\n   */\n\n\n  static async resolveImage(image) {\n    if (!image) return null;\n\n    if (typeof image === 'string' && image.startsWith('data:')) {\n      return image;\n    }\n\n    const file = await this.resolveFileAsBuffer(image);\n    return DataResolver.resolveBase64(file);\n  }\n  /**\n   * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n   * * A Buffer\n   * * A base64 string\n   * @typedef {Buffer|string} Base64Resolvable\n   */\n\n  /**\n   * Resolves a Base64Resolvable to a Base 64 image.\n   * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n   * @returns {?string}\n   */\n\n\n  static resolveBase64(data) {\n    if (Buffer.isBuffer(data)) return `data:image/jpg;base64,${data.toString('base64')}`;\n    return data;\n  }\n  /**\n   * Data that can be resolved to give a Buffer. This can be:\n   * * A Buffer\n   * * The path to a local file\n   * * A URL\n   * @typedef {string|Buffer} BufferResolvable\n   */\n\n  /**\n   * @external Stream\n   * @see {@link https://nodejs.org/api/stream.html}\n   */\n\n  /**\n   * Resolves a BufferResolvable to a Buffer or a Stream.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer|Stream>}\n   */\n\n\n  static async resolveFile(resource) {\n    if (!browser && Buffer.isBuffer(resource)) return resource;\n    if (browser && resource instanceof ArrayBuffer) return Util.convertToBuffer(resource); // eslint-disable-next-line no-undef\n\n    if (browser && resource instanceof Blob) return resource;\n    if (resource instanceof stream.Readable) return resource;\n\n    if (typeof resource === 'string') {\n      if (/^https?:\\/\\//.test(resource)) {\n        const res = await fetch(resource);\n        return browser ? res.blob() : res.body;\n      } else if (!browser) {\n        return new Promise((resolve, reject) => {\n          const file = path.resolve(resource);\n          fs.stat(file, (err, stats) => {\n            if (err) return reject(err);\n            if (!stats.isFile()) return reject(new DiscordError('FILE_NOT_FOUND', file));\n            return resolve(fs.createReadStream(file));\n          });\n        });\n      }\n    }\n\n    throw new TypeError('REQ_RESOURCE_TYPE');\n  }\n  /**\n   * Resolves a BufferResolvable to a Buffer.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer>}\n   */\n\n\n  static async resolveFileAsBuffer(resource) {\n    const file = await this.resolveFile(resource);\n    if (Buffer.isBuffer(file)) return file;\n    const buffers = [];\n\n    for await (const data of file) buffers.push(data);\n\n    return Buffer.concat(buffers);\n  }\n\n}\n\nmodule.exports = DataResolver;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/util/DataResolver.js"],"names":["fs","require","path","stream","fetch","Error","DiscordError","TypeError","browser","Util","DataResolver","constructor","name","resolveCode","data","regex","match","exec","resolveInviteCode","resolveGuildTemplateCode","resolveImage","image","startsWith","file","resolveFileAsBuffer","resolveBase64","Buffer","isBuffer","toString","resolveFile","resource","ArrayBuffer","convertToBuffer","Blob","Readable","test","res","blob","body","Promise","resolve","reject","stat","err","stats","isFile","createReadStream","buffers","push","concat","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst stream = require('stream');\nconst fetch = require('node-fetch');\nconst { Error: DiscordError, TypeError } = require('../errors');\nconst { browser } = require('../util/Constants');\nconst Util = require('../util/Util');\n\n/**\n * The DataResolver identifies different objects and tries to resolve a specific piece of information from them.\n * @private\n */\nclass DataResolver {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * Data that can be resolved to give an invite code. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Data that can be resolved to give an template code. This can be:\n   * * A template code\n   * * A template URL\n   * @typedef {string} GuildTemplateResolvable\n   */\n\n  /**\n   * Resolves the string to a code based on the passed regex.\n   * @param {string} data The string to resolve\n   * @param {RegExp} regex The RegExp used to extract the code\n   * @returns {string}\n   */\n  static resolveCode(data, regex) {\n    const match = regex.exec(data);\n    return match ? match[1] || data : data;\n  }\n\n  /**\n   * Resolves InviteResolvable to an invite code.\n   * @param {InviteResolvable} data The invite resolvable to resolve\n   * @returns {string}\n   */\n  static resolveInviteCode(data) {\n    return this.resolveCode(data, /discord(?:(?:app)?\\.com\\/invite|\\.gg(?:\\/invite)?)\\/([\\w-]{2,255})/i);\n  }\n\n  /**\n   * Resolves GuildTemplateResolvable to a template code.\n   * @param {GuildTemplateResolvable} data The template resolvable to resolve\n   * @returns {string}\n   */\n  static resolveGuildTemplateCode(data) {\n    return this.resolveCode(data, /discord(?:app)?\\.(?:com\\/template|new)\\/([\\w-]{2,255})/i);\n  }\n\n  /**\n   * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.\n   * @param {BufferResolvable|Base64Resolvable} image The image to be resolved\n   * @returns {Promise<?string>}\n   */\n  static async resolveImage(image) {\n    if (!image) return null;\n    if (typeof image === 'string' && image.startsWith('data:')) {\n      return image;\n    }\n    const file = await this.resolveFileAsBuffer(image);\n    return DataResolver.resolveBase64(file);\n  }\n\n  /**\n   * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n   * * A Buffer\n   * * A base64 string\n   * @typedef {Buffer|string} Base64Resolvable\n   */\n\n  /**\n   * Resolves a Base64Resolvable to a Base 64 image.\n   * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n   * @returns {?string}\n   */\n  static resolveBase64(data) {\n    if (Buffer.isBuffer(data)) return `data:image/jpg;base64,${data.toString('base64')}`;\n    return data;\n  }\n\n  /**\n   * Data that can be resolved to give a Buffer. This can be:\n   * * A Buffer\n   * * The path to a local file\n   * * A URL\n   * @typedef {string|Buffer} BufferResolvable\n   */\n\n  /**\n   * @external Stream\n   * @see {@link https://nodejs.org/api/stream.html}\n   */\n\n  /**\n   * Resolves a BufferResolvable to a Buffer or a Stream.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer|Stream>}\n   */\n  static async resolveFile(resource) {\n    if (!browser && Buffer.isBuffer(resource)) return resource;\n    if (browser && resource instanceof ArrayBuffer) return Util.convertToBuffer(resource);\n    // eslint-disable-next-line no-undef\n    if (browser && resource instanceof Blob) return resource;\n    if (resource instanceof stream.Readable) return resource;\n\n    if (typeof resource === 'string') {\n      if (/^https?:\\/\\//.test(resource)) {\n        const res = await fetch(resource);\n        return browser ? res.blob() : res.body;\n      } else if (!browser) {\n        return new Promise((resolve, reject) => {\n          const file = path.resolve(resource);\n          fs.stat(file, (err, stats) => {\n            if (err) return reject(err);\n            if (!stats.isFile()) return reject(new DiscordError('FILE_NOT_FOUND', file));\n            return resolve(fs.createReadStream(file));\n          });\n        });\n      }\n    }\n\n    throw new TypeError('REQ_RESOURCE_TYPE');\n  }\n\n  /**\n   * Resolves a BufferResolvable to a Buffer.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer>}\n   */\n  static async resolveFileAsBuffer(resource) {\n    const file = await this.resolveFile(resource);\n    if (Buffer.isBuffer(file)) return file;\n\n    const buffers = [];\n    for await (const data of file) buffers.push(data);\n    return Buffer.concat(buffers);\n  }\n}\n\nmodule.exports = DataResolver;\n"]},"metadata":{},"sourceType":"script"}