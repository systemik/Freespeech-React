{"ast":null,"code":"'use strict';\n/**\n * An extendable structure:\n * * **`GuildEmoji`**\n * * **`DMChannel`**\n * * **`TextChannel`**\n * * **`VoiceChannel`**\n * * **`CategoryChannel`**\n * * **`NewsChannel`**\n * * **`StoreChannel`**\n * * **`GuildMember`**\n * * **`Guild`**\n * * **`Message`**\n * * **`MessageReaction`**\n * * **`Presence`**\n * * **`ClientPresence`**\n * * **`VoiceState`**\n * * **`Role`**\n * * **`User`**\n * @typedef {string} ExtendableStructure\n */\n\n/**\n * Allows for the extension of built-in Discord.js structures that are instantiated by {@link BaseManager Managers}.\n */\n\nclass Structures {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n  /**\n   * Retrieves a structure class.\n   * @param {string} structure Name of the structure to retrieve\n   * @returns {Function}\n   */\n\n\n  static get(structure) {\n    if (typeof structure === 'string') return structures[structure];\n    throw new TypeError(`\"structure\" argument must be a string (received ${typeof structure})`);\n  }\n  /**\n   * Extends a structure.\n   * <warn> Make sure to extend all structures before instantiating your client.\n   * Extending after doing so may not work as expected. </warn>\n   * @param {ExtendableStructure} structure Name of the structure class to extend\n   * @param {Function} extender Function that takes the base class to extend as its only parameter and returns the\n   * extended class/prototype\n   * @returns {Function} Extended class/prototype returned from the extender\n   * @example\n   * const { Structures } = require('discord.js');\n   *\n   * Structures.extend('Guild', Guild => {\n   *   class CoolGuild extends Guild {\n   *     constructor(client, data) {\n   *       super(client, data);\n   *       this.cool = true;\n   *     }\n   *   }\n   *\n   *   return CoolGuild;\n   * });\n   */\n\n\n  static extend(structure, extender) {\n    if (!structures[structure]) throw new RangeError(`\"${structure}\" is not a valid extensible structure.`);\n\n    if (typeof extender !== 'function') {\n      const received = `(received ${typeof extender})`;\n      throw new TypeError(`\"extender\" argument must be a function that returns the extended structure class/prototype ${received}.`);\n    }\n\n    const extended = extender(structures[structure]);\n\n    if (typeof extended !== 'function') {\n      const received = `(received ${typeof extended})`;\n      throw new TypeError(`The extender function must return the extended structure class/prototype ${received}.`);\n    }\n\n    if (!(extended.prototype instanceof structures[structure])) {\n      const prototype = Object.getPrototypeOf(extended);\n      const received = `${extended.name || 'unnamed'}${prototype.name ? ` extends ${prototype.name}` : ''}`;\n      throw new Error('The class/prototype returned from the extender function must extend the existing structure class/prototype' + ` (received function ${received}; expected extension of ${structures[structure].name}).`);\n    }\n\n    structures[structure] = extended;\n    return extended;\n  }\n\n}\n\nconst structures = {\n  GuildEmoji: require('../structures/GuildEmoji'),\n  DMChannel: require('../structures/DMChannel'),\n  TextChannel: require('../structures/TextChannel'),\n  VoiceChannel: require('../structures/VoiceChannel'),\n  CategoryChannel: require('../structures/CategoryChannel'),\n  NewsChannel: require('../structures/NewsChannel'),\n  StoreChannel: require('../structures/StoreChannel'),\n  GuildMember: require('../structures/GuildMember'),\n  Guild: require('../structures/Guild'),\n  Message: require('../structures/Message'),\n  MessageReaction: require('../structures/MessageReaction'),\n  Presence: require('../structures/Presence').Presence,\n  ClientPresence: require('../structures/ClientPresence'),\n  VoiceState: require('../structures/VoiceState'),\n  Role: require('../structures/Role'),\n  User: require('../structures/User')\n};\nmodule.exports = Structures;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/util/Structures.js"],"names":["Structures","constructor","Error","name","get","structure","structures","TypeError","extend","extender","RangeError","received","extended","prototype","Object","getPrototypeOf","GuildEmoji","require","DMChannel","TextChannel","VoiceChannel","CategoryChannel","NewsChannel","StoreChannel","GuildMember","Guild","Message","MessageReaction","Presence","ClientPresence","VoiceState","Role","User","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * An extendable structure:\n * * **`GuildEmoji`**\n * * **`DMChannel`**\n * * **`TextChannel`**\n * * **`VoiceChannel`**\n * * **`CategoryChannel`**\n * * **`NewsChannel`**\n * * **`StoreChannel`**\n * * **`GuildMember`**\n * * **`Guild`**\n * * **`Message`**\n * * **`MessageReaction`**\n * * **`Presence`**\n * * **`ClientPresence`**\n * * **`VoiceState`**\n * * **`Role`**\n * * **`User`**\n * @typedef {string} ExtendableStructure\n */\n\n/**\n * Allows for the extension of built-in Discord.js structures that are instantiated by {@link BaseManager Managers}.\n */\nclass Structures {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * Retrieves a structure class.\n   * @param {string} structure Name of the structure to retrieve\n   * @returns {Function}\n   */\n  static get(structure) {\n    if (typeof structure === 'string') return structures[structure];\n    throw new TypeError(`\"structure\" argument must be a string (received ${typeof structure})`);\n  }\n\n  /**\n   * Extends a structure.\n   * <warn> Make sure to extend all structures before instantiating your client.\n   * Extending after doing so may not work as expected. </warn>\n   * @param {ExtendableStructure} structure Name of the structure class to extend\n   * @param {Function} extender Function that takes the base class to extend as its only parameter and returns the\n   * extended class/prototype\n   * @returns {Function} Extended class/prototype returned from the extender\n   * @example\n   * const { Structures } = require('discord.js');\n   *\n   * Structures.extend('Guild', Guild => {\n   *   class CoolGuild extends Guild {\n   *     constructor(client, data) {\n   *       super(client, data);\n   *       this.cool = true;\n   *     }\n   *   }\n   *\n   *   return CoolGuild;\n   * });\n   */\n  static extend(structure, extender) {\n    if (!structures[structure]) throw new RangeError(`\"${structure}\" is not a valid extensible structure.`);\n    if (typeof extender !== 'function') {\n      const received = `(received ${typeof extender})`;\n      throw new TypeError(\n        `\"extender\" argument must be a function that returns the extended structure class/prototype ${received}.`,\n      );\n    }\n\n    const extended = extender(structures[structure]);\n    if (typeof extended !== 'function') {\n      const received = `(received ${typeof extended})`;\n      throw new TypeError(`The extender function must return the extended structure class/prototype ${received}.`);\n    }\n\n    if (!(extended.prototype instanceof structures[structure])) {\n      const prototype = Object.getPrototypeOf(extended);\n      const received = `${extended.name || 'unnamed'}${prototype.name ? ` extends ${prototype.name}` : ''}`;\n      throw new Error(\n        'The class/prototype returned from the extender function must extend the existing structure class/prototype' +\n          ` (received function ${received}; expected extension of ${structures[structure].name}).`,\n      );\n    }\n\n    structures[structure] = extended;\n    return extended;\n  }\n}\n\nconst structures = {\n  GuildEmoji: require('../structures/GuildEmoji'),\n  DMChannel: require('../structures/DMChannel'),\n  TextChannel: require('../structures/TextChannel'),\n  VoiceChannel: require('../structures/VoiceChannel'),\n  CategoryChannel: require('../structures/CategoryChannel'),\n  NewsChannel: require('../structures/NewsChannel'),\n  StoreChannel: require('../structures/StoreChannel'),\n  GuildMember: require('../structures/GuildMember'),\n  Guild: require('../structures/Guild'),\n  Message: require('../structures/Message'),\n  MessageReaction: require('../structures/MessageReaction'),\n  Presence: require('../structures/Presence').Presence,\n  ClientPresence: require('../structures/ClientPresence'),\n  VoiceState: require('../structures/VoiceState'),\n  Role: require('../structures/Role'),\n  User: require('../structures/User'),\n};\n\nmodule.exports = Structures;\n"]},"metadata":{},"sourceType":"script"}