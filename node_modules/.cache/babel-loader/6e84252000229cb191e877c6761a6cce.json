{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst {\n  ChannelTypes\n} = require('../util/Constants');\n\nconst Snowflake = require('../util/Snowflake');\n/**\n * Represents any channel on Discord.\n * @extends {Base}\n * @abstract\n */\n\n\nclass Channel extends Base {\n  constructor(client, data) {\n    super(client);\n    const type = Object.keys(ChannelTypes)[data.type];\n    /**\n     * The type of the channel, either:\n     * * `dm` - a DM channel\n     * * `text` - a guild text channel\n     * * `voice` - a guild voice channel\n     * * `category` - a guild category channel\n     * * `news` - a guild news channel\n     * * `store` - a guild store channel\n     * * `unknown` - a generic channel of unknown type, could be Channel or GuildChannel\n     * @type {string}\n     */\n\n    this.type = type ? type.toLowerCase() : 'unknown';\n    /**\n     * Whether the channel has been deleted\n     * @type {boolean}\n     */\n\n    this.deleted = false;\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The unique ID of the channel\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n  }\n  /**\n   * The timestamp the channel was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time the channel was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <#123456789012345678>!\n   * console.log(`Hello from ${channel}!`);\n   */\n\n\n  toString() {\n    return `<#${this.id}>`;\n  }\n  /**\n   * Deletes this channel.\n   * @returns {Promise<Channel>}\n   * @example\n   * // Delete the channel\n   * channel.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n\n\n  delete() {\n    return this.client.api.channels(this.id).delete().then(() => this);\n  }\n  /**\n   * Fetches this channel.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<Channel>}\n   */\n\n\n  fetch() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return this.client.channels.fetch(this.id, true, force);\n  }\n  /**\n   * Indicates whether this channel is text-based.\n   * @returns {boolean}\n   */\n\n\n  isText() {\n    return 'messages' in this;\n  }\n\n  static create(client, data, guild) {\n    const Structures = require('../util/Structures');\n\n    let channel;\n\n    if (!data.guild_id && !guild) {\n      if (data.recipients && data.type !== ChannelTypes.GROUP || data.type === ChannelTypes.DM) {\n        const DMChannel = Structures.get('DMChannel');\n        channel = new DMChannel(client, data);\n      } else if (data.type === ChannelTypes.GROUP) {\n        const PartialGroupDMChannel = require('./PartialGroupDMChannel');\n\n        channel = new PartialGroupDMChannel(client, data);\n      }\n    } else {\n      guild = guild || client.guilds.cache.get(data.guild_id);\n\n      if (guild) {\n        switch (data.type) {\n          case ChannelTypes.TEXT:\n            {\n              const TextChannel = Structures.get('TextChannel');\n              channel = new TextChannel(guild, data);\n              break;\n            }\n\n          case ChannelTypes.VOICE:\n            {\n              const VoiceChannel = Structures.get('VoiceChannel');\n              channel = new VoiceChannel(guild, data);\n              break;\n            }\n\n          case ChannelTypes.CATEGORY:\n            {\n              const CategoryChannel = Structures.get('CategoryChannel');\n              channel = new CategoryChannel(guild, data);\n              break;\n            }\n\n          case ChannelTypes.NEWS:\n            {\n              const NewsChannel = Structures.get('NewsChannel');\n              channel = new NewsChannel(guild, data);\n              break;\n            }\n\n          case ChannelTypes.STORE:\n            {\n              const StoreChannel = Structures.get('StoreChannel');\n              channel = new StoreChannel(guild, data);\n              break;\n            }\n        }\n\n        if (channel) guild.channels.cache.set(channel.id, channel);\n      }\n    }\n\n    return channel;\n  }\n\n  toJSON() {\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    return super.toJSON({\n      createdTimestamp: true\n    }, ...props);\n  }\n\n}\n\nmodule.exports = Channel;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/Channel.js"],"names":["Base","require","ChannelTypes","Snowflake","Channel","constructor","client","data","type","Object","keys","toLowerCase","deleted","_patch","id","createdTimestamp","deconstruct","timestamp","createdAt","Date","toString","delete","api","channels","then","fetch","force","isText","create","guild","Structures","channel","guild_id","recipients","GROUP","DM","DMChannel","get","PartialGroupDMChannel","guilds","cache","TEXT","TextChannel","VOICE","VoiceChannel","CATEGORY","CategoryChannel","NEWS","NewsChannel","STORE","StoreChannel","set","toJSON","props","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { ChannelTypes } = require('../util/Constants');\nconst Snowflake = require('../util/Snowflake');\n\n/**\n * Represents any channel on Discord.\n * @extends {Base}\n * @abstract\n */\nclass Channel extends Base {\n  constructor(client, data) {\n    super(client);\n\n    const type = Object.keys(ChannelTypes)[data.type];\n    /**\n     * The type of the channel, either:\n     * * `dm` - a DM channel\n     * * `text` - a guild text channel\n     * * `voice` - a guild voice channel\n     * * `category` - a guild category channel\n     * * `news` - a guild news channel\n     * * `store` - a guild store channel\n     * * `unknown` - a generic channel of unknown type, could be Channel or GuildChannel\n     * @type {string}\n     */\n    this.type = type ? type.toLowerCase() : 'unknown';\n\n    /**\n     * Whether the channel has been deleted\n     * @type {boolean}\n     */\n    this.deleted = false;\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The unique ID of the channel\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n  }\n\n  /**\n   * The timestamp the channel was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the channel was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <#123456789012345678>!\n   * console.log(`Hello from ${channel}!`);\n   */\n  toString() {\n    return `<#${this.id}>`;\n  }\n\n  /**\n   * Deletes this channel.\n   * @returns {Promise<Channel>}\n   * @example\n   * // Delete the channel\n   * channel.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  delete() {\n    return this.client.api\n      .channels(this.id)\n      .delete()\n      .then(() => this);\n  }\n\n  /**\n   * Fetches this channel.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<Channel>}\n   */\n  fetch(force = false) {\n    return this.client.channels.fetch(this.id, true, force);\n  }\n\n  /**\n   * Indicates whether this channel is text-based.\n   * @returns {boolean}\n   */\n  isText() {\n    return 'messages' in this;\n  }\n\n  static create(client, data, guild) {\n    const Structures = require('../util/Structures');\n    let channel;\n    if (!data.guild_id && !guild) {\n      if ((data.recipients && data.type !== ChannelTypes.GROUP) || data.type === ChannelTypes.DM) {\n        const DMChannel = Structures.get('DMChannel');\n        channel = new DMChannel(client, data);\n      } else if (data.type === ChannelTypes.GROUP) {\n        const PartialGroupDMChannel = require('./PartialGroupDMChannel');\n        channel = new PartialGroupDMChannel(client, data);\n      }\n    } else {\n      guild = guild || client.guilds.cache.get(data.guild_id);\n      if (guild) {\n        switch (data.type) {\n          case ChannelTypes.TEXT: {\n            const TextChannel = Structures.get('TextChannel');\n            channel = new TextChannel(guild, data);\n            break;\n          }\n          case ChannelTypes.VOICE: {\n            const VoiceChannel = Structures.get('VoiceChannel');\n            channel = new VoiceChannel(guild, data);\n            break;\n          }\n          case ChannelTypes.CATEGORY: {\n            const CategoryChannel = Structures.get('CategoryChannel');\n            channel = new CategoryChannel(guild, data);\n            break;\n          }\n          case ChannelTypes.NEWS: {\n            const NewsChannel = Structures.get('NewsChannel');\n            channel = new NewsChannel(guild, data);\n            break;\n          }\n          case ChannelTypes.STORE: {\n            const StoreChannel = Structures.get('StoreChannel');\n            channel = new StoreChannel(guild, data);\n            break;\n          }\n        }\n        if (channel) guild.channels.cache.set(channel.id, channel);\n      }\n    }\n    return channel;\n  }\n\n  toJSON(...props) {\n    return super.toJSON({ createdTimestamp: true }, ...props);\n  }\n}\n\nmodule.exports = Channel;\n"]},"metadata":{},"sourceType":"script"}