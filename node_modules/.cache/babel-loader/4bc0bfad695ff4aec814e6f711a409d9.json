{"ast":null,"code":"'use strict';\n\nconst GuildChannel = require('./GuildChannel');\n\nconst Webhook = require('./Webhook');\n\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\n\nconst MessageManager = require('../managers/MessageManager');\n\nconst Collection = require('../util/Collection');\n\nconst DataResolver = require('../util/DataResolver');\n/**\n * Represents a guild text channel on Discord.\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\n\n\nclass TextChannel extends GuildChannel {\n  /**\n   * @param {Guild} guild The guild the text channel is part of\n   * @param {Object} data The data for the text channel\n   */\n  constructor(guild, data) {\n    super(guild, data);\n    /**\n     * A manager of the messages sent to this channel\n     * @type {MessageManager}\n     */\n\n    this.messages = new MessageManager(this);\n    /**\n     * If the guild considers this channel NSFW\n     * @type {boolean}\n     * @readonly\n     */\n\n    this.nsfw = Boolean(data.nsfw);\n    this._typing = new Map();\n  }\n\n  _patch(data) {\n    super._patch(data);\n    /**\n     * The topic of the text channel\n     * @type {?string}\n     */\n\n\n    this.topic = data.topic;\n    if (typeof data.nsfw !== 'undefined') this.nsfw = Boolean(data.nsfw);\n    /**\n     * The ID of the last message sent in this channel, if one was sent\n     * @type {?Snowflake}\n     */\n\n    this.lastMessageID = data.last_message_id;\n    /**\n     * The ratelimit per user for this channel in seconds\n     * @type {number}\n     */\n\n    this.rateLimitPerUser = data.rate_limit_per_user || 0;\n    /**\n     * The timestamp when the last pinned message was pinned, if there was one\n     * @type {?number}\n     */\n\n    this.lastPinTimestamp = data.last_pin_timestamp ? new Date(data.last_pin_timestamp).getTime() : null;\n    if (data.messages) for (const message of data.messages) this.messages.add(message);\n  }\n  /**\n   * Sets the rate limit per user for this channel.\n   * @param {number} rateLimitPerUser The new ratelimit in seconds\n   * @param {string} [reason] Reason for changing the channel's ratelimits\n   * @returns {Promise<TextChannel>}\n   */\n\n\n  setRateLimitPerUser(rateLimitPerUser, reason) {\n    return this.edit({\n      rateLimitPerUser\n    }, reason);\n  }\n  /**\n   * Sets whether this channel is flagged as NSFW.\n   * @param {boolean} nsfw Whether the channel should be considered NSFW\n   * @param {string} [reason] Reason for changing the channel's NSFW flag\n   * @returns {Promise<TextChannel>}\n   */\n\n\n  setNSFW(nsfw, reason) {\n    return this.edit({\n      nsfw\n    }, reason);\n  }\n  /**\n   * Fetches all webhooks for the channel.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * channel.fetchWebhooks()\n   *   .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n   *   .catch(console.error);\n   */\n\n\n  fetchWebhooks() {\n    return this.client.api.channels[this.id].webhooks.get().then(data => {\n      const hooks = new Collection();\n\n      for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));\n\n      return hooks;\n    });\n  }\n  /**\n   * Creates a webhook for the channel.\n   * @param {string} name The name of the webhook\n   * @param {Object} [options] Options for creating the webhook\n   * @param {BufferResolvable|Base64Resolvable} [options.avatar] Avatar for the webhook\n   * @param {string} [options.reason] Reason for creating the webhook\n   * @returns {Promise<Webhook>} webhook The created webhook\n   * @example\n   * // Create a webhook for the current channel\n   * channel.createWebhook('Snek', {\n   *   avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n   *   reason: 'Needed a cool new Webhook'\n   * })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n\n\n  async createWebhook(name) {\n    let {\n      avatar,\n      reason\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (typeof avatar === 'string' && !avatar.startsWith('data:')) {\n      avatar = await DataResolver.resolveImage(avatar);\n    }\n\n    return this.client.api.channels[this.id].webhooks.post({\n      data: {\n        name,\n        avatar\n      },\n      reason\n    }).then(data => new Webhook(this.client, data));\n  } // These are here only for documentation purposes - they are implemented by TextBasedChannel\n\n  /* eslint-disable no-empty-function */\n\n\n  get lastMessage() {}\n\n  get lastPinAt() {}\n\n  send() {}\n\n  startTyping() {}\n\n  stopTyping() {}\n\n  get typing() {}\n\n  get typingCount() {}\n\n  createMessageCollector() {}\n\n  awaitMessages() {}\n\n  bulkDelete() {}\n\n}\n\nTextBasedChannel.applyToClass(TextChannel, true);\nmodule.exports = TextChannel;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/TextChannel.js"],"names":["GuildChannel","require","Webhook","TextBasedChannel","MessageManager","Collection","DataResolver","TextChannel","constructor","guild","data","messages","nsfw","Boolean","_typing","Map","_patch","topic","lastMessageID","last_message_id","rateLimitPerUser","rate_limit_per_user","lastPinTimestamp","last_pin_timestamp","Date","getTime","message","add","setRateLimitPerUser","reason","edit","setNSFW","fetchWebhooks","client","api","channels","id","webhooks","get","then","hooks","hook","set","createWebhook","name","avatar","startsWith","resolveImage","post","lastMessage","lastPinAt","send","startTyping","stopTyping","typing","typingCount","createMessageCollector","awaitMessages","bulkDelete","applyToClass","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst GuildChannel = require('./GuildChannel');\nconst Webhook = require('./Webhook');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst MessageManager = require('../managers/MessageManager');\nconst Collection = require('../util/Collection');\nconst DataResolver = require('../util/DataResolver');\n\n/**\n * Represents a guild text channel on Discord.\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\nclass TextChannel extends GuildChannel {\n  /**\n   * @param {Guild} guild The guild the text channel is part of\n   * @param {Object} data The data for the text channel\n   */\n  constructor(guild, data) {\n    super(guild, data);\n    /**\n     * A manager of the messages sent to this channel\n     * @type {MessageManager}\n     */\n    this.messages = new MessageManager(this);\n\n    /**\n     * If the guild considers this channel NSFW\n     * @type {boolean}\n     * @readonly\n     */\n    this.nsfw = Boolean(data.nsfw);\n    this._typing = new Map();\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    /**\n     * The topic of the text channel\n     * @type {?string}\n     */\n    this.topic = data.topic;\n\n    if (typeof data.nsfw !== 'undefined') this.nsfw = Boolean(data.nsfw);\n\n    /**\n     * The ID of the last message sent in this channel, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageID = data.last_message_id;\n\n    /**\n     * The ratelimit per user for this channel in seconds\n     * @type {number}\n     */\n    this.rateLimitPerUser = data.rate_limit_per_user || 0;\n\n    /**\n     * The timestamp when the last pinned message was pinned, if there was one\n     * @type {?number}\n     */\n    this.lastPinTimestamp = data.last_pin_timestamp ? new Date(data.last_pin_timestamp).getTime() : null;\n\n    if (data.messages) for (const message of data.messages) this.messages.add(message);\n  }\n\n  /**\n   * Sets the rate limit per user for this channel.\n   * @param {number} rateLimitPerUser The new ratelimit in seconds\n   * @param {string} [reason] Reason for changing the channel's ratelimits\n   * @returns {Promise<TextChannel>}\n   */\n  setRateLimitPerUser(rateLimitPerUser, reason) {\n    return this.edit({ rateLimitPerUser }, reason);\n  }\n\n  /**\n   * Sets whether this channel is flagged as NSFW.\n   * @param {boolean} nsfw Whether the channel should be considered NSFW\n   * @param {string} [reason] Reason for changing the channel's NSFW flag\n   * @returns {Promise<TextChannel>}\n   */\n  setNSFW(nsfw, reason) {\n    return this.edit({ nsfw }, reason);\n  }\n\n  /**\n   * Fetches all webhooks for the channel.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * channel.fetchWebhooks()\n   *   .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n   *   .catch(console.error);\n   */\n  fetchWebhooks() {\n    return this.client.api.channels[this.id].webhooks.get().then(data => {\n      const hooks = new Collection();\n      for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));\n      return hooks;\n    });\n  }\n\n  /**\n   * Creates a webhook for the channel.\n   * @param {string} name The name of the webhook\n   * @param {Object} [options] Options for creating the webhook\n   * @param {BufferResolvable|Base64Resolvable} [options.avatar] Avatar for the webhook\n   * @param {string} [options.reason] Reason for creating the webhook\n   * @returns {Promise<Webhook>} webhook The created webhook\n   * @example\n   * // Create a webhook for the current channel\n   * channel.createWebhook('Snek', {\n   *   avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n   *   reason: 'Needed a cool new Webhook'\n   * })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  async createWebhook(name, { avatar, reason } = {}) {\n    if (typeof avatar === 'string' && !avatar.startsWith('data:')) {\n      avatar = await DataResolver.resolveImage(avatar);\n    }\n    return this.client.api.channels[this.id].webhooks\n      .post({\n        data: {\n          name,\n          avatar,\n        },\n        reason,\n      })\n      .then(data => new Webhook(this.client, data));\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  get lastPinAt() {}\n  send() {}\n  startTyping() {}\n  stopTyping() {}\n  get typing() {}\n  get typingCount() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  bulkDelete() {}\n}\n\nTextBasedChannel.applyToClass(TextChannel, true);\n\nmodule.exports = TextChannel;\n"]},"metadata":{},"sourceType":"script"}