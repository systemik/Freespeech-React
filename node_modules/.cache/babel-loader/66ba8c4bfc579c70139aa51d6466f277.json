{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst {\n  Status,\n  Events\n} = require('../../util/Constants');\n\nclass GuildMemberUpdateAction extends Action {\n  handle(data, shard) {\n    const {\n      client\n    } = this;\n\n    if (data.user.username) {\n      const user = client.users.cache.get(data.user.id);\n\n      if (!user) {\n        client.users.add(data.user);\n      } else if (!user.equals(data.user)) {\n        client.actions.UserUpdate.handle(data.user);\n      }\n    }\n\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    if (guild) {\n      const member = this.getMember({\n        user: data.user\n      }, guild);\n\n      if (member) {\n        const old = member._update(data);\n        /**\n         * Emitted whenever a guild member changes - i.e. new role, removed role, nickname.\n         * Also emitted when the user's details (e.g. username) change.\n         * @event Client#guildMemberUpdate\n         * @param {GuildMember} oldMember The member before the update\n         * @param {GuildMember} newMember The member after the update\n         */\n\n\n        if (shard.status === Status.READY) client.emit(Events.GUILD_MEMBER_UPDATE, old, member);\n      } else {\n        const newMember = guild.members.add(data);\n        /**\n         * Emitted whenever a member becomes available in a large guild.\n         * @event Client#guildMemberAvailable\n         * @param {GuildMember} member The member that became available\n         */\n\n        this.client.emit(Events.GUILD_MEMBER_AVAILABLE, newMember);\n      }\n    }\n  }\n\n}\n\nmodule.exports = GuildMemberUpdateAction;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/client/actions/GuildMemberUpdate.js"],"names":["Action","require","Status","Events","GuildMemberUpdateAction","handle","data","shard","client","user","username","users","cache","get","id","add","equals","actions","UserUpdate","guild","guilds","guild_id","member","getMember","old","_update","status","READY","emit","GUILD_MEMBER_UPDATE","newMember","members","GUILD_MEMBER_AVAILABLE","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,IAAqBF,OAAO,CAAC,sBAAD,CAAlC;;AAEA,MAAMG,uBAAN,SAAsCJ,MAAtC,CAA6C;AAC3CK,EAAAA,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAc;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAa,IAAnB;;AACA,QAAIF,IAAI,CAACG,IAAL,CAAUC,QAAd,EAAwB;AACtB,YAAMD,IAAI,GAAGD,MAAM,CAACG,KAAP,CAAaC,KAAb,CAAmBC,GAAnB,CAAuBP,IAAI,CAACG,IAAL,CAAUK,EAAjC,CAAb;;AACA,UAAI,CAACL,IAAL,EAAW;AACTD,QAAAA,MAAM,CAACG,KAAP,CAAaI,GAAb,CAAiBT,IAAI,CAACG,IAAtB;AACD,OAFD,MAEO,IAAI,CAACA,IAAI,CAACO,MAAL,CAAYV,IAAI,CAACG,IAAjB,CAAL,EAA6B;AAClCD,QAAAA,MAAM,CAACS,OAAP,CAAeC,UAAf,CAA0Bb,MAA1B,CAAiCC,IAAI,CAACG,IAAtC;AACD;AACF;;AAED,UAAMU,KAAK,GAAGX,MAAM,CAACY,MAAP,CAAcR,KAAd,CAAoBC,GAApB,CAAwBP,IAAI,CAACe,QAA7B,CAAd;;AACA,QAAIF,KAAJ,EAAW;AACT,YAAMG,MAAM,GAAG,KAAKC,SAAL,CAAe;AAAEd,QAAAA,IAAI,EAAEH,IAAI,CAACG;AAAb,OAAf,EAAoCU,KAApC,CAAf;;AACA,UAAIG,MAAJ,EAAY;AACV,cAAME,GAAG,GAAGF,MAAM,CAACG,OAAP,CAAenB,IAAf,CAAZ;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;;AACQ,YAAIC,KAAK,CAACmB,MAAN,KAAiBxB,MAAM,CAACyB,KAA5B,EAAmCnB,MAAM,CAACoB,IAAP,CAAYzB,MAAM,CAAC0B,mBAAnB,EAAwCL,GAAxC,EAA6CF,MAA7C;AACpC,OAVD,MAUO;AACL,cAAMQ,SAAS,GAAGX,KAAK,CAACY,OAAN,CAAchB,GAAd,CAAkBT,IAAlB,CAAlB;AACA;AACR;AACA;AACA;AACA;;AACQ,aAAKE,MAAL,CAAYoB,IAAZ,CAAiBzB,MAAM,CAAC6B,sBAAxB,EAAgDF,SAAhD;AACD;AACF;AACF;;AAnC0C;;AAsC7CG,MAAM,CAACC,OAAP,GAAiB9B,uBAAjB","sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Status, Events } = require('../../util/Constants');\n\nclass GuildMemberUpdateAction extends Action {\n  handle(data, shard) {\n    const { client } = this;\n    if (data.user.username) {\n      const user = client.users.cache.get(data.user.id);\n      if (!user) {\n        client.users.add(data.user);\n      } else if (!user.equals(data.user)) {\n        client.actions.UserUpdate.handle(data.user);\n      }\n    }\n\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      const member = this.getMember({ user: data.user }, guild);\n      if (member) {\n        const old = member._update(data);\n        /**\n         * Emitted whenever a guild member changes - i.e. new role, removed role, nickname.\n         * Also emitted when the user's details (e.g. username) change.\n         * @event Client#guildMemberUpdate\n         * @param {GuildMember} oldMember The member before the update\n         * @param {GuildMember} newMember The member after the update\n         */\n        if (shard.status === Status.READY) client.emit(Events.GUILD_MEMBER_UPDATE, old, member);\n      } else {\n        const newMember = guild.members.add(data);\n        /**\n         * Emitted whenever a member becomes available in a large guild.\n         * @event Client#guildMemberAvailable\n         * @param {GuildMember} member The member that became available\n         */\n        this.client.emit(Events.GUILD_MEMBER_AVAILABLE, newMember);\n      }\n    }\n  }\n}\n\nmodule.exports = GuildMemberUpdateAction;\n"]},"metadata":{},"sourceType":"script"}