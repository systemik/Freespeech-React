{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst GuildPreviewEmoji = require('./GuildPreviewEmoji');\n\nconst Collection = require('../util/Collection');\n/**\n * Represents the data about the guild any bot can preview, connected to the specified guild.\n * @extends {Base}\n */\n\n\nclass GuildPreview extends Base {\n  constructor(client, data) {\n    super(client);\n    if (!data) return;\n\n    this._patch(data);\n  }\n  /**\n   * Builds the guild with the provided data.\n   * @param {*} data The raw data of the guild\n   * @private\n   */\n\n\n  _patch(data) {\n    /**\n     * The id of this guild\n     * @type {string}\n     */\n    this.id = data.id;\n    /**\n     * The name of this guild\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The icon of this guild\n     * @type {?string}\n     */\n\n    this.icon = data.icon;\n    /**\n     * The splash icon of this guild\n     * @type {?string}\n     */\n\n    this.splash = data.splash;\n    /**\n     * The discovery splash icon of this guild\n     * @type {?string}\n     */\n\n    this.discoverySplash = data.discovery_splash;\n    /**\n     * An array of enabled guild features\n     * @type {Features[]}\n     */\n\n    this.features = data.features;\n    /**\n     * The approximate count of members in this guild\n     * @type {number}\n     */\n\n    this.approximateMemberCount = data.approximate_member_count;\n    /**\n     * The approximate count of online members in this guild\n     * @type {number}\n     */\n\n    this.approximatePresenceCount = data.approximate_presence_count;\n    /**\n     * The description for this guild\n     * @type {?string}\n     */\n\n    this.description = data.description || null;\n\n    if (!this.emojis) {\n      /**\n       * Collection of emojis belonging to this guild\n       * @type {Collection<Snowflake, GuildPreviewEmoji>}\n       */\n      this.emojis = new Collection();\n    } else {\n      this.emojis.clear();\n    }\n\n    for (const emoji of data.emojis) {\n      this.emojis.set(emoji.id, new GuildPreviewEmoji(this.client, emoji, this));\n    }\n  }\n  /**\n   * The URL to this guild's splash.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  splashURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.splash) return null;\n    return this.client.rest.cdn.Splash(this.id, this.splash, format, size);\n  }\n  /**\n   * The URL to this guild's discovery splash.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  discoverySplashURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.discoverySplash) return null;\n    return this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n  }\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  iconURL() {\n    let {\n      format,\n      size,\n      dynamic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.icon) return null;\n    return this.client.rest.cdn.Icon(this.id, this.icon, format, size, dynamic);\n  }\n  /**\n   * Fetches this guild.\n   * @returns {Promise<GuildPreview>}\n   */\n\n\n  fetch() {\n    return this.client.api.guilds(this.id).preview.get().then(data => {\n      this._patch(data);\n\n      return this;\n    });\n  }\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${previewGuild}!`);\n   */\n\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    const json = super.toJSON();\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    return json;\n  }\n\n}\n\nmodule.exports = GuildPreview;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/GuildPreview.js"],"names":["Base","require","GuildPreviewEmoji","Collection","GuildPreview","constructor","client","data","_patch","id","name","icon","splash","discoverySplash","discovery_splash","features","approximateMemberCount","approximate_member_count","approximatePresenceCount","approximate_presence_count","description","emojis","clear","emoji","set","splashURL","format","size","rest","cdn","Splash","discoverySplashURL","DiscoverySplash","iconURL","dynamic","Icon","fetch","api","guilds","preview","get","then","toString","toJSON","json","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst GuildPreviewEmoji = require('./GuildPreviewEmoji');\nconst Collection = require('../util/Collection');\n\n/**\n * Represents the data about the guild any bot can preview, connected to the specified guild.\n * @extends {Base}\n */\nclass GuildPreview extends Base {\n  constructor(client, data) {\n    super(client);\n\n    if (!data) return;\n\n    this._patch(data);\n  }\n\n  /**\n   * Builds the guild with the provided data.\n   * @param {*} data The raw data of the guild\n   * @private\n   */\n  _patch(data) {\n    /**\n     * The id of this guild\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of this guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The icon of this guild\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The splash icon of this guild\n     * @type {?string}\n     */\n    this.splash = data.splash;\n\n    /**\n     * The discovery splash icon of this guild\n     * @type {?string}\n     */\n    this.discoverySplash = data.discovery_splash;\n\n    /**\n     * An array of enabled guild features\n     * @type {Features[]}\n     */\n    this.features = data.features;\n\n    /**\n     * The approximate count of members in this guild\n     * @type {number}\n     */\n    this.approximateMemberCount = data.approximate_member_count;\n\n    /**\n     * The approximate count of online members in this guild\n     * @type {number}\n     */\n    this.approximatePresenceCount = data.approximate_presence_count;\n\n    /**\n     * The description for this guild\n     * @type {?string}\n     */\n    this.description = data.description || null;\n\n    if (!this.emojis) {\n      /**\n       * Collection of emojis belonging to this guild\n       * @type {Collection<Snowflake, GuildPreviewEmoji>}\n       */\n      this.emojis = new Collection();\n    } else {\n      this.emojis.clear();\n    }\n    for (const emoji of data.emojis) {\n      this.emojis.set(emoji.id, new GuildPreviewEmoji(this.client, emoji, this));\n    }\n  }\n\n  /**\n   * The URL to this guild's splash.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  splashURL({ format, size } = {}) {\n    if (!this.splash) return null;\n    return this.client.rest.cdn.Splash(this.id, this.splash, format, size);\n  }\n\n  /**\n   * The URL to this guild's discovery splash.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  discoverySplashURL({ format, size } = {}) {\n    if (!this.discoverySplash) return null;\n    return this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  iconURL({ format, size, dynamic } = {}) {\n    if (!this.icon) return null;\n    return this.client.rest.cdn.Icon(this.id, this.icon, format, size, dynamic);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<GuildPreview>}\n   */\n  fetch() {\n    return this.client.api\n      .guilds(this.id)\n      .preview.get()\n      .then(data => {\n        this._patch(data);\n        return this;\n      });\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${previewGuild}!`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    const json = super.toJSON();\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    return json;\n  }\n}\n\nmodule.exports = GuildPreview;\n"]},"metadata":{},"sourceType":"script"}