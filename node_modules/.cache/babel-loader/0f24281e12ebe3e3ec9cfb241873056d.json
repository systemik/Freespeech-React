{"ast":null,"code":"'use strict';\n/**\n * Represents an error from the Discord API.\n * @extends Error\n */\n\nclass DiscordAPIError extends Error {\n  constructor(path, error, method, status) {\n    super();\n    const flattened = this.constructor.flattenErrors(error.errors || error).join('\\n');\n    this.name = 'DiscordAPIError';\n    this.message = error.message && flattened ? `${error.message}\\n${flattened}` : error.message || flattened;\n    /**\n     * The HTTP method used for the request\n     * @type {string}\n     */\n\n    this.method = method;\n    /**\n     * The path of the request relative to the HTTP endpoint\n     * @type {string}\n     */\n\n    this.path = path;\n    /**\n     * HTTP error code returned by Discord\n     * @type {number}\n     */\n\n    this.code = error.code;\n    /**\n     * The HTTP status code\n     * @type {number}\n     */\n\n    this.httpStatus = status;\n  }\n  /**\n   * Flattens an errors object returned from the API into an array.\n   * @param {Object} obj Discord errors object\n   * @param {string} [key] Used internally to determine key names of nested fields\n   * @returns {string[]}\n   * @private\n   */\n\n\n  static flattenErrors(obj) {\n    let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let messages = [];\n\n    for (const [k, v] of Object.entries(obj)) {\n      if (k === 'message') continue;\n      const newKey = key ? isNaN(k) ? `${key}.${k}` : `${key}[${k}]` : k;\n\n      if (v._errors) {\n        messages.push(`${newKey}: ${v._errors.map(e => e.message).join(' ')}`);\n      } else if (v.code || v.message) {\n        messages.push(`${v.code ? `${v.code}: ` : ''}${v.message}`.trim());\n      } else if (typeof v === 'string') {\n        messages.push(v);\n      } else {\n        messages = messages.concat(this.flattenErrors(v, newKey));\n      }\n    }\n\n    return messages;\n  }\n\n}\n\nmodule.exports = DiscordAPIError;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/rest/DiscordAPIError.js"],"names":["DiscordAPIError","Error","constructor","path","error","method","status","flattened","flattenErrors","errors","join","name","message","code","httpStatus","obj","key","messages","k","v","Object","entries","newKey","isNaN","_errors","push","map","e","trim","concat","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;AACA,MAAMA,eAAN,SAA8BC,KAA9B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAsBC,MAAtB,EAA8B;AACvC;AACA,UAAMC,SAAS,GAAG,KAAKL,WAAL,CAAiBM,aAAjB,CAA+BJ,KAAK,CAACK,MAAN,IAAgBL,KAA/C,EAAsDM,IAAtD,CAA2D,IAA3D,CAAlB;AACA,SAAKC,IAAL,GAAY,iBAAZ;AACA,SAAKC,OAAL,GAAeR,KAAK,CAACQ,OAAN,IAAiBL,SAAjB,GAA8B,GAAEH,KAAK,CAACQ,OAAQ,KAAIL,SAAU,EAA5D,GAAgEH,KAAK,CAACQ,OAAN,IAAiBL,SAAhG;AAEA;AACJ;AACA;AACA;;AACI,SAAKF,MAAL,GAAcA,MAAd;AAEA;AACJ;AACA;AACA;;AACI,SAAKF,IAAL,GAAYA,IAAZ;AAEA;AACJ;AACA;AACA;;AACI,SAAKU,IAAL,GAAYT,KAAK,CAACS,IAAlB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,UAAL,GAAkBR,MAAlB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACsB,SAAbE,aAAa,CAACO,GAAD,EAAgB;AAAA,QAAVC,GAAU,uEAAJ,EAAI;AAClC,QAAIC,QAAQ,GAAG,EAAf;;AAEA,SAAK,MAAM,CAACC,CAAD,EAAIC,CAAJ,CAAX,IAAqBC,MAAM,CAACC,OAAP,CAAeN,GAAf,CAArB,EAA0C;AACxC,UAAIG,CAAC,KAAK,SAAV,EAAqB;AACrB,YAAMI,MAAM,GAAGN,GAAG,GAAIO,KAAK,CAACL,CAAD,CAAL,GAAY,GAAEF,GAAI,IAAGE,CAAE,EAAvB,GAA4B,GAAEF,GAAI,IAAGE,CAAE,GAA3C,GAAiDA,CAAnE;;AAEA,UAAIC,CAAC,CAACK,OAAN,EAAe;AACbP,QAAAA,QAAQ,CAACQ,IAAT,CAAe,GAAEH,MAAO,KAAIH,CAAC,CAACK,OAAF,CAAUE,GAAV,CAAcC,CAAC,IAAIA,CAAC,CAACf,OAArB,EAA8BF,IAA9B,CAAmC,GAAnC,CAAwC,EAApE;AACD,OAFD,MAEO,IAAIS,CAAC,CAACN,IAAF,IAAUM,CAAC,CAACP,OAAhB,EAAyB;AAC9BK,QAAAA,QAAQ,CAACQ,IAAT,CAAe,GAAEN,CAAC,CAACN,IAAF,GAAU,GAAEM,CAAC,CAACN,IAAK,IAAnB,GAAyB,EAAG,GAAEM,CAAC,CAACP,OAAQ,EAA3C,CAA6CgB,IAA7C,EAAd;AACD,OAFM,MAEA,IAAI,OAAOT,CAAP,KAAa,QAAjB,EAA2B;AAChCF,QAAAA,QAAQ,CAACQ,IAAT,CAAcN,CAAd;AACD,OAFM,MAEA;AACLF,QAAAA,QAAQ,GAAGA,QAAQ,CAACY,MAAT,CAAgB,KAAKrB,aAAL,CAAmBW,CAAnB,EAAsBG,MAAtB,CAAhB,CAAX;AACD;AACF;;AAED,WAAOL,QAAP;AACD;;AA1DiC;;AA6DpCa,MAAM,CAACC,OAAP,GAAiB/B,eAAjB","sourcesContent":["'use strict';\n\n/**\n * Represents an error from the Discord API.\n * @extends Error\n */\nclass DiscordAPIError extends Error {\n  constructor(path, error, method, status) {\n    super();\n    const flattened = this.constructor.flattenErrors(error.errors || error).join('\\n');\n    this.name = 'DiscordAPIError';\n    this.message = error.message && flattened ? `${error.message}\\n${flattened}` : error.message || flattened;\n\n    /**\n     * The HTTP method used for the request\n     * @type {string}\n     */\n    this.method = method;\n\n    /**\n     * The path of the request relative to the HTTP endpoint\n     * @type {string}\n     */\n    this.path = path;\n\n    /**\n     * HTTP error code returned by Discord\n     * @type {number}\n     */\n    this.code = error.code;\n\n    /**\n     * The HTTP status code\n     * @type {number}\n     */\n    this.httpStatus = status;\n  }\n\n  /**\n   * Flattens an errors object returned from the API into an array.\n   * @param {Object} obj Discord errors object\n   * @param {string} [key] Used internally to determine key names of nested fields\n   * @returns {string[]}\n   * @private\n   */\n  static flattenErrors(obj, key = '') {\n    let messages = [];\n\n    for (const [k, v] of Object.entries(obj)) {\n      if (k === 'message') continue;\n      const newKey = key ? (isNaN(k) ? `${key}.${k}` : `${key}[${k}]`) : k;\n\n      if (v._errors) {\n        messages.push(`${newKey}: ${v._errors.map(e => e.message).join(' ')}`);\n      } else if (v.code || v.message) {\n        messages.push(`${v.code ? `${v.code}: ` : ''}${v.message}`.trim());\n      } else if (typeof v === 'string') {\n        messages.push(v);\n      } else {\n        messages = messages.concat(this.flattenErrors(v, newKey));\n      }\n    }\n\n    return messages;\n  }\n}\n\nmodule.exports = DiscordAPIError;\n"]},"metadata":{},"sourceType":"script"}