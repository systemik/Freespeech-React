{"ast":null,"code":"'use strict';\n\nconst BaseManager = require('./BaseManager');\n\nconst {\n  Presence\n} = require('../structures/Presence');\n/**\n * Manages API methods for Presences and holds their cache.\n * @extends {BaseManager}\n */\n\n\nclass PresenceManager extends BaseManager {\n  constructor(client, iterable) {\n    super(client, iterable, Presence);\n  }\n  /**\n   * The cache of Presences\n   * @type {Collection<Snowflake, Presence>}\n   * @name PresenceManager#cache\n   */\n\n\n  add(data, cache) {\n    const existing = this.cache.get(data.user.id);\n    return existing ? existing.patch(data) : super.add(data, cache, {\n      id: data.user.id\n    });\n  }\n  /**\n   * Data that can be resolved to a Presence object. This can be:\n   * * A Presence\n   * * A UserResolvable\n   * * A Snowflake\n   * @typedef {Presence|UserResolvable|Snowflake} PresenceResolvable\n   */\n\n  /**\n   * Resolves a PresenceResolvable to a Presence object.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Presence}\n   */\n\n\n  resolve(presence) {\n    const presenceResolvable = super.resolve(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const UserResolvable = this.client.users.resolveID(presence);\n    return super.resolve(UserResolvable) || null;\n  }\n  /**\n   * Resolves a PresenceResolvable to a Presence ID string.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n\n  resolveID(presence) {\n    const presenceResolvable = super.resolveID(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const userResolvable = this.client.users.resolveID(presence);\n    return this.cache.has(userResolvable) ? userResolvable : null;\n  }\n\n}\n\nmodule.exports = PresenceManager;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/managers/PresenceManager.js"],"names":["BaseManager","require","Presence","PresenceManager","constructor","client","iterable","add","data","cache","existing","get","user","id","patch","resolve","presence","presenceResolvable","UserResolvable","users","resolveID","userResolvable","has","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeD,OAAO,CAAC,wBAAD,CAA5B;AAEA;AACA;AACA;AACA;;;AACA,MAAME,eAAN,SAA8BH,WAA9B,CAA0C;AACxCI,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmB;AAC5B,UAAMD,MAAN,EAAcC,QAAd,EAAwBJ,QAAxB;AACD;AAED;AACF;AACA;AACA;AACA;;;AAEEK,EAAAA,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAc;AACf,UAAMC,QAAQ,GAAG,KAAKD,KAAL,CAAWE,GAAX,CAAeH,IAAI,CAACI,IAAL,CAAUC,EAAzB,CAAjB;AACA,WAAOH,QAAQ,GAAGA,QAAQ,CAACI,KAAT,CAAeN,IAAf,CAAH,GAA0B,MAAMD,GAAN,CAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AAAEI,MAAAA,EAAE,EAAEL,IAAI,CAACI,IAAL,CAAUC;AAAhB,KAAvB,CAAzC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,UAAMC,kBAAkB,GAAG,MAAMF,OAAN,CAAcC,QAAd,CAA3B;AACA,QAAIC,kBAAJ,EAAwB,OAAOA,kBAAP;AACxB,UAAMC,cAAc,GAAG,KAAKb,MAAL,CAAYc,KAAZ,CAAkBC,SAAlB,CAA4BJ,QAA5B,CAAvB;AACA,WAAO,MAAMD,OAAN,CAAcG,cAAd,KAAiC,IAAxC;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,SAAS,CAACJ,QAAD,EAAW;AAClB,UAAMC,kBAAkB,GAAG,MAAMG,SAAN,CAAgBJ,QAAhB,CAA3B;AACA,QAAIC,kBAAJ,EAAwB,OAAOA,kBAAP;AACxB,UAAMI,cAAc,GAAG,KAAKhB,MAAL,CAAYc,KAAZ,CAAkBC,SAAlB,CAA4BJ,QAA5B,CAAvB;AACA,WAAO,KAAKP,KAAL,CAAWa,GAAX,CAAeD,cAAf,IAAiCA,cAAjC,GAAkD,IAAzD;AACD;;AA9CuC;;AAiD1CE,MAAM,CAACC,OAAP,GAAiBrB,eAAjB","sourcesContent":["'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst { Presence } = require('../structures/Presence');\n\n/**\n * Manages API methods for Presences and holds their cache.\n * @extends {BaseManager}\n */\nclass PresenceManager extends BaseManager {\n  constructor(client, iterable) {\n    super(client, iterable, Presence);\n  }\n\n  /**\n   * The cache of Presences\n   * @type {Collection<Snowflake, Presence>}\n   * @name PresenceManager#cache\n   */\n\n  add(data, cache) {\n    const existing = this.cache.get(data.user.id);\n    return existing ? existing.patch(data) : super.add(data, cache, { id: data.user.id });\n  }\n\n  /**\n   * Data that can be resolved to a Presence object. This can be:\n   * * A Presence\n   * * A UserResolvable\n   * * A Snowflake\n   * @typedef {Presence|UserResolvable|Snowflake} PresenceResolvable\n   */\n\n  /**\n   * Resolves a PresenceResolvable to a Presence object.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Presence}\n   */\n  resolve(presence) {\n    const presenceResolvable = super.resolve(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const UserResolvable = this.client.users.resolveID(presence);\n    return super.resolve(UserResolvable) || null;\n  }\n\n  /**\n   * Resolves a PresenceResolvable to a Presence ID string.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Snowflake}\n   */\n  resolveID(presence) {\n    const presenceResolvable = super.resolveID(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const userResolvable = this.client.users.resolveID(presence);\n    return this.cache.has(userResolvable) ? userResolvable : null;\n  }\n}\n\nmodule.exports = PresenceManager;\n"]},"metadata":{},"sourceType":"script"}