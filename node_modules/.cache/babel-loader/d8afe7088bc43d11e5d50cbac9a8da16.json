{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst {\n  Events\n} = require('../../util/Constants');\n\nconst textBasedChannelTypes = ['dm', 'text', 'news'];\n\nclass TypingStart extends Action {\n  handle(data) {\n    const channel = this.getChannel(data);\n\n    if (!channel) {\n      return;\n    }\n\n    if (!textBasedChannelTypes.includes(channel.type)) {\n      this.client.emit(Events.WARN, `Discord sent a typing packet to a ${channel.type} channel ${channel.id}`);\n      return;\n    }\n\n    const user = this.getUserFromMember(data);\n    const timestamp = new Date(data.timestamp * 1000);\n\n    if (channel && user) {\n      if (channel._typing.has(user.id)) {\n        const typing = channel._typing.get(user.id);\n\n        typing.lastTimestamp = timestamp;\n        typing.elapsedTime = Date.now() - typing.since;\n        this.client.clearTimeout(typing.timeout);\n        typing.timeout = this.tooLate(channel, user);\n      } else {\n        const since = new Date();\n        const lastTimestamp = new Date();\n\n        channel._typing.set(user.id, {\n          user,\n          since,\n          lastTimestamp,\n          elapsedTime: Date.now() - since,\n          timeout: this.tooLate(channel, user)\n        });\n        /**\n         * Emitted whenever a user starts typing in a channel.\n         * @event Client#typingStart\n         * @param {Channel} channel The channel the user started typing in\n         * @param {User} user The user that started typing\n         */\n\n\n        this.client.emit(Events.TYPING_START, channel, user);\n      }\n    }\n  }\n\n  tooLate(channel, user) {\n    return channel.client.setTimeout(() => {\n      channel._typing.delete(user.id);\n    }, 10000);\n  }\n\n}\n\nmodule.exports = TypingStart;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/client/actions/TypingStart.js"],"names":["Action","require","Events","textBasedChannelTypes","TypingStart","handle","data","channel","getChannel","includes","type","client","emit","WARN","id","user","getUserFromMember","timestamp","Date","_typing","has","typing","get","lastTimestamp","elapsedTime","now","since","clearTimeout","timeout","tooLate","set","TYPING_START","setTimeout","delete","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,sBAAD,CAA1B;;AACA,MAAME,qBAAqB,GAAG,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,CAA9B;;AAEA,MAAMC,WAAN,SAA0BJ,MAA1B,CAAiC;AAC/BK,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAMC,OAAO,GAAG,KAAKC,UAAL,CAAgBF,IAAhB,CAAhB;;AACA,QAAI,CAACC,OAAL,EAAc;AACZ;AACD;;AACD,QAAI,CAACJ,qBAAqB,CAACM,QAAtB,CAA+BF,OAAO,CAACG,IAAvC,CAAL,EAAmD;AACjD,WAAKC,MAAL,CAAYC,IAAZ,CAAiBV,MAAM,CAACW,IAAxB,EAA+B,qCAAoCN,OAAO,CAACG,IAAK,YAAWH,OAAO,CAACO,EAAG,EAAtG;AACA;AACD;;AAED,UAAMC,IAAI,GAAG,KAAKC,iBAAL,CAAuBV,IAAvB,CAAb;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,CAASZ,IAAI,CAACW,SAAL,GAAiB,IAA1B,CAAlB;;AAEA,QAAIV,OAAO,IAAIQ,IAAf,EAAqB;AACnB,UAAIR,OAAO,CAACY,OAAR,CAAgBC,GAAhB,CAAoBL,IAAI,CAACD,EAAzB,CAAJ,EAAkC;AAChC,cAAMO,MAAM,GAAGd,OAAO,CAACY,OAAR,CAAgBG,GAAhB,CAAoBP,IAAI,CAACD,EAAzB,CAAf;;AAEAO,QAAAA,MAAM,CAACE,aAAP,GAAuBN,SAAvB;AACAI,QAAAA,MAAM,CAACG,WAAP,GAAqBN,IAAI,CAACO,GAAL,KAAaJ,MAAM,CAACK,KAAzC;AACA,aAAKf,MAAL,CAAYgB,YAAZ,CAAyBN,MAAM,CAACO,OAAhC;AACAP,QAAAA,MAAM,CAACO,OAAP,GAAiB,KAAKC,OAAL,CAAatB,OAAb,EAAsBQ,IAAtB,CAAjB;AACD,OAPD,MAOO;AACL,cAAMW,KAAK,GAAG,IAAIR,IAAJ,EAAd;AACA,cAAMK,aAAa,GAAG,IAAIL,IAAJ,EAAtB;;AACAX,QAAAA,OAAO,CAACY,OAAR,CAAgBW,GAAhB,CAAoBf,IAAI,CAACD,EAAzB,EAA6B;AAC3BC,UAAAA,IAD2B;AAE3BW,UAAAA,KAF2B;AAG3BH,UAAAA,aAH2B;AAI3BC,UAAAA,WAAW,EAAEN,IAAI,CAACO,GAAL,KAAaC,KAJC;AAK3BE,UAAAA,OAAO,EAAE,KAAKC,OAAL,CAAatB,OAAb,EAAsBQ,IAAtB;AALkB,SAA7B;AAQA;AACR;AACA;AACA;AACA;AACA;;;AACQ,aAAKJ,MAAL,CAAYC,IAAZ,CAAiBV,MAAM,CAAC6B,YAAxB,EAAsCxB,OAAtC,EAA+CQ,IAA/C;AACD;AACF;AACF;;AAEDc,EAAAA,OAAO,CAACtB,OAAD,EAAUQ,IAAV,EAAgB;AACrB,WAAOR,OAAO,CAACI,MAAR,CAAeqB,UAAf,CAA0B,MAAM;AACrCzB,MAAAA,OAAO,CAACY,OAAR,CAAgBc,MAAhB,CAAuBlB,IAAI,CAACD,EAA5B;AACD,KAFM,EAEJ,KAFI,CAAP;AAGD;;AAhD8B;;AAmDjCoB,MAAM,CAACC,OAAP,GAAiB/B,WAAjB","sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\nconst textBasedChannelTypes = ['dm', 'text', 'news'];\n\nclass TypingStart extends Action {\n  handle(data) {\n    const channel = this.getChannel(data);\n    if (!channel) {\n      return;\n    }\n    if (!textBasedChannelTypes.includes(channel.type)) {\n      this.client.emit(Events.WARN, `Discord sent a typing packet to a ${channel.type} channel ${channel.id}`);\n      return;\n    }\n\n    const user = this.getUserFromMember(data);\n    const timestamp = new Date(data.timestamp * 1000);\n\n    if (channel && user) {\n      if (channel._typing.has(user.id)) {\n        const typing = channel._typing.get(user.id);\n\n        typing.lastTimestamp = timestamp;\n        typing.elapsedTime = Date.now() - typing.since;\n        this.client.clearTimeout(typing.timeout);\n        typing.timeout = this.tooLate(channel, user);\n      } else {\n        const since = new Date();\n        const lastTimestamp = new Date();\n        channel._typing.set(user.id, {\n          user,\n          since,\n          lastTimestamp,\n          elapsedTime: Date.now() - since,\n          timeout: this.tooLate(channel, user),\n        });\n\n        /**\n         * Emitted whenever a user starts typing in a channel.\n         * @event Client#typingStart\n         * @param {Channel} channel The channel the user started typing in\n         * @param {User} user The user that started typing\n         */\n        this.client.emit(Events.TYPING_START, channel, user);\n      }\n    }\n  }\n\n  tooLate(channel, user) {\n    return channel.client.setTimeout(() => {\n      channel._typing.delete(user.id);\n    }, 10000);\n  }\n}\n\nmodule.exports = TypingStart;\n"]},"metadata":{},"sourceType":"script"}