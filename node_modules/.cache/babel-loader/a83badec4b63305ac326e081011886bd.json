{"ast":null,"code":"'use strict';\n\nconst BaseManager = require('./BaseManager');\n\nconst MessageReaction = require('../structures/MessageReaction');\n/**\n * Manages API methods for reactions and holds their cache.\n * @extends {BaseManager}\n */\n\n\nclass ReactionManager extends BaseManager {\n  constructor(message, iterable) {\n    super(message.client, iterable, MessageReaction);\n    /**\n     * The message that this manager belongs to\n     * @type {Message}\n     */\n\n    this.message = message;\n  }\n\n  add(data, cache) {\n    return super.add(data, cache, {\n      id: data.emoji.id || data.emoji.name,\n      extras: [this.message]\n    });\n  }\n  /**\n   * The reaction cache of this manager\n   * @type {Collection<string|Snowflake, MessageReaction>}\n   * @name ReactionManager#cache\n   */\n\n  /**\n   * Data that can be resolved to a MessageReaction object. This can be:\n   * * A MessageReaction\n   * * A Snowflake\n   * @typedef {MessageReaction|Snowflake} MessageReactionResolvable\n   */\n\n  /**\n   * Resolves a MessageReactionResolvable to a MessageReaction object.\n   * @method resolve\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?MessageReaction}\n   */\n\n  /**\n   * Resolves a MessageReactionResolvable to a MessageReaction ID string.\n   * @method resolveID\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Removes all reactions from a message.\n   * @returns {Promise<Message>}\n   */\n\n\n  removeAll() {\n    return this.client.api.channels(this.message.channel.id).messages(this.message.id).reactions.delete().then(() => this.message);\n  }\n\n}\n\nmodule.exports = ReactionManager;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/managers/ReactionManager.js"],"names":["BaseManager","require","MessageReaction","ReactionManager","constructor","message","iterable","client","add","data","cache","id","emoji","name","extras","removeAll","api","channels","channel","messages","reactions","delete","then","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,+BAAD,CAA/B;AAEA;AACA;AACA;AACA;;;AACA,MAAME,eAAN,SAA8BH,WAA9B,CAA0C;AACxCI,EAAAA,WAAW,CAACC,OAAD,EAAUC,QAAV,EAAoB;AAC7B,UAAMD,OAAO,CAACE,MAAd,EAAsBD,QAAtB,EAAgCJ,eAAhC;AAEA;AACJ;AACA;AACA;;AACI,SAAKG,OAAL,GAAeA,OAAf;AACD;;AAEDG,EAAAA,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAc;AACf,WAAO,MAAMF,GAAN,CAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AAAEC,MAAAA,EAAE,EAAEF,IAAI,CAACG,KAAL,CAAWD,EAAX,IAAiBF,IAAI,CAACG,KAAL,CAAWC,IAAlC;AAAwCC,MAAAA,MAAM,EAAE,CAAC,KAAKT,OAAN;AAAhD,KAAvB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;;;AACEU,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKR,MAAL,CAAYS,GAAZ,CACJC,QADI,CACK,KAAKZ,OAAL,CAAaa,OAAb,CAAqBP,EAD1B,EAEJQ,QAFI,CAEK,KAAKd,OAAL,CAAaM,EAFlB,EAGJS,SAHI,CAGMC,MAHN,GAIJC,IAJI,CAIC,MAAM,KAAKjB,OAJZ,CAAP;AAKD;;AAxDuC;;AA2D1CkB,MAAM,CAACC,OAAP,GAAiBrB,eAAjB","sourcesContent":["'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst MessageReaction = require('../structures/MessageReaction');\n\n/**\n * Manages API methods for reactions and holds their cache.\n * @extends {BaseManager}\n */\nclass ReactionManager extends BaseManager {\n  constructor(message, iterable) {\n    super(message.client, iterable, MessageReaction);\n\n    /**\n     * The message that this manager belongs to\n     * @type {Message}\n     */\n    this.message = message;\n  }\n\n  add(data, cache) {\n    return super.add(data, cache, { id: data.emoji.id || data.emoji.name, extras: [this.message] });\n  }\n\n  /**\n   * The reaction cache of this manager\n   * @type {Collection<string|Snowflake, MessageReaction>}\n   * @name ReactionManager#cache\n   */\n\n  /**\n   * Data that can be resolved to a MessageReaction object. This can be:\n   * * A MessageReaction\n   * * A Snowflake\n   * @typedef {MessageReaction|Snowflake} MessageReactionResolvable\n   */\n\n  /**\n   * Resolves a MessageReactionResolvable to a MessageReaction object.\n   * @method resolve\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?MessageReaction}\n   */\n\n  /**\n   * Resolves a MessageReactionResolvable to a MessageReaction ID string.\n   * @method resolveID\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Removes all reactions from a message.\n   * @returns {Promise<Message>}\n   */\n  removeAll() {\n    return this.client.api\n      .channels(this.message.channel.id)\n      .messages(this.message.id)\n      .reactions.delete()\n      .then(() => this.message);\n  }\n}\n\nmodule.exports = ReactionManager;\n"]},"metadata":{},"sourceType":"script"}