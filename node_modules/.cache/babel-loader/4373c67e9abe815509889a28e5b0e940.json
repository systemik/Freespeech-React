{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/freespeechreact/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Tile from './Tile.js';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport React, { useRef, useMemo, useEffect, useState, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: 'dark'\n    }\n  }); // Update the theme only if the mode changes\n\n  const theme = React.useMemo(() => createTheme(getDesignTokens(mode)), [mode]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [theme, /*#__PURE__*/_jsxDEV(Tile, {\n      name: \"Animals\",\n      image: \"cat\",\n      isFolder: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tile, {\n      name: \"School\",\n      image: \"school\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"TF0AHbRu8DO10P/SWtT0KIxHEhc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/macbookpro/Desktop/freespeechreact/src/App.js"],"names":["Tile","useMediaQuery","createTheme","ThemeProvider","CssBaseline","React","useRef","useMemo","useEffect","useState","useCallback","App","darkTheme","palette","mode","theme","getDesignTokens"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,sBAA3C;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,KAAP,IACEC,MADF,EAEEC,OAFF,EAGEC,SAHF,EAIEC,QAJF,EAKEC,WALF,QAMO,OANP;;;;AAQA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,SAAS,GAAGV,WAAW,CAAC;AAC5BW,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE;AADC;AADmB,GAAD,CAA7B,CADa,CAOb;;AACA,QAAMC,KAAK,GAAGV,KAAK,CAACE,OAAN,CAAc,MAAML,WAAW,CAACc,eAAe,CAACF,IAAD,CAAhB,CAA/B,EAAwD,CAACA,IAAD,CAAxD,CAAd;AAGA,sBACE;AAAA,eACGC,KADH,eAEE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,KAAK,EAAC,KAA3B;AAAiC,MAAA,QAAQ,EAAE;AAA3C;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,QAAX;AAAoB,MAAA,KAAK,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAOD;;GAlBQJ,G;;KAAAA,G;AAoBT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport Tile from './Tile.js'\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport React, {\n  useRef,\n  useMemo,\n  useEffect,\n  useState,\n  useCallback\n} from \"react\";\n\nfunction App() {\n  const darkTheme = createTheme({\n    palette: {\n      mode: 'dark',\n    },\n  });\n\n  // Update the theme only if the mode changes\n  const theme = React.useMemo(() => createTheme(getDesignTokens(mode)), [mode]);\n\n\n  return (\n    <>\n      {theme}\n      <Tile name='Animals' image='cat' isFolder={true} ></Tile>\n      <Tile name='School' image='school' ></Tile>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}