{"ast":null,"code":"'use strict';\n\nconst BaseManager = require('./BaseManager');\n\nconst {\n  Error\n} = require('../errors');\n\nconst Collection = require('../util/Collection');\n/**\n * Manages API methods for users who reacted to a reaction and stores their cache.\n * @extends {BaseManager}\n */\n\n\nclass ReactionUserManager extends BaseManager {\n  constructor(client, iterable, reaction) {\n    super(client, iterable, {\n      name: 'User'\n    });\n    /**\n     * The reaction that this manager belongs to\n     * @type {MessageReaction}\n     */\n\n    this.reaction = reaction;\n  }\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name ReactionUserManager#cache\n   */\n\n  /**\n   * Fetches the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.\n   * @param {Object} [options] Options for fetching the users\n   * @param {number} [options.limit=100] The maximum amount of users to fetch, defaults to 100\n   * @param {Snowflake} [options.before] Limit fetching users to those with an id lower than the supplied id\n   * @param {Snowflake} [options.after] Limit fetching users to those with an id greater than the supplied id\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n\n\n  async fetch() {\n    let {\n      limit = 100,\n      after,\n      before\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const message = this.reaction.message;\n    const data = await this.client.api.channels[message.channel.id].messages[message.id].reactions[this.reaction.emoji.identifier].get({\n      query: {\n        limit,\n        before,\n        after\n      }\n    });\n    const users = new Collection();\n\n    for (const rawUser of data) {\n      const user = this.client.users.add(rawUser);\n      this.cache.set(user.id, user);\n      users.set(user.id, user);\n    }\n\n    return users;\n  }\n  /**\n   * Removes a user from this reaction.\n   * @param {UserResolvable} [user=this.client.user] The user to remove the reaction of\n   * @returns {Promise<MessageReaction>}\n   */\n\n\n  remove() {\n    let user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.client.user;\n    const userID = this.client.users.resolveID(user);\n    if (!userID) return Promise.reject(new Error('REACTION_RESOLVE_USER'));\n    const message = this.reaction.message;\n    return this.client.api.channels[message.channel.id].messages[message.id].reactions[this.reaction.emoji.identifier][userID === this.client.user.id ? '@me' : userID].delete().then(() => this.reaction);\n  }\n\n}\n\nmodule.exports = ReactionUserManager;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/managers/ReactionUserManager.js"],"names":["BaseManager","require","Error","Collection","ReactionUserManager","constructor","client","iterable","reaction","name","fetch","limit","after","before","message","data","api","channels","channel","id","messages","reactions","emoji","identifier","get","query","users","rawUser","user","add","cache","set","remove","userID","resolveID","Promise","reject","delete","then","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,oBAAD,CAA1B;AAEA;AACA;AACA;AACA;;;AACA,MAAMG,mBAAN,SAAkCJ,WAAlC,CAA8C;AAC5CK,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBC,QAAnB,EAA6B;AACtC,UAAMF,MAAN,EAAcC,QAAd,EAAwB;AAAEE,MAAAA,IAAI,EAAE;AAAR,KAAxB;AACA;AACJ;AACA;AACA;;AACI,SAAKD,QAAL,GAAgBA,QAAhB;AACD;AAED;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACa,QAALE,KAAK,GAAsC;AAAA,QAArC;AAAEC,MAAAA,KAAK,GAAG,GAAV;AAAeC,MAAAA,KAAf;AAAsBC,MAAAA;AAAtB,KAAqC,uEAAJ,EAAI;AAC/C,UAAMC,OAAO,GAAG,KAAKN,QAAL,CAAcM,OAA9B;AACA,UAAMC,IAAI,GAAG,MAAM,KAAKT,MAAL,CAAYU,GAAZ,CAAgBC,QAAhB,CAAyBH,OAAO,CAACI,OAAR,CAAgBC,EAAzC,EAA6CC,QAA7C,CAAsDN,OAAO,CAACK,EAA9D,EAAkEE,SAAlE,CACjB,KAAKb,QAAL,CAAcc,KAAd,CAAoBC,UADH,EAEjBC,GAFiB,CAEb;AAAEC,MAAAA,KAAK,EAAE;AAAEd,QAAAA,KAAF;AAASE,QAAAA,MAAT;AAAiBD,QAAAA;AAAjB;AAAT,KAFa,CAAnB;AAGA,UAAMc,KAAK,GAAG,IAAIvB,UAAJ,EAAd;;AACA,SAAK,MAAMwB,OAAX,IAAsBZ,IAAtB,EAA4B;AAC1B,YAAMa,IAAI,GAAG,KAAKtB,MAAL,CAAYoB,KAAZ,CAAkBG,GAAlB,CAAsBF,OAAtB,CAAb;AACA,WAAKG,KAAL,CAAWC,GAAX,CAAeH,IAAI,CAACT,EAApB,EAAwBS,IAAxB;AACAF,MAAAA,KAAK,CAACK,GAAN,CAAUH,IAAI,CAACT,EAAf,EAAmBS,IAAnB;AACD;;AACD,WAAOF,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEM,EAAAA,MAAM,GAA0B;AAAA,QAAzBJ,IAAyB,uEAAlB,KAAKtB,MAAL,CAAYsB,IAAM;AAC9B,UAAMK,MAAM,GAAG,KAAK3B,MAAL,CAAYoB,KAAZ,CAAkBQ,SAAlB,CAA4BN,IAA5B,CAAf;AACA,QAAI,CAACK,MAAL,EAAa,OAAOE,OAAO,CAACC,MAAR,CAAe,IAAIlC,KAAJ,CAAU,uBAAV,CAAf,CAAP;AACb,UAAMY,OAAO,GAAG,KAAKN,QAAL,CAAcM,OAA9B;AACA,WAAO,KAAKR,MAAL,CAAYU,GAAZ,CAAgBC,QAAhB,CAAyBH,OAAO,CAACI,OAAR,CAAgBC,EAAzC,EAA6CC,QAA7C,CAAsDN,OAAO,CAACK,EAA9D,EAAkEE,SAAlE,CAA4E,KAAKb,QAAL,CAAcc,KAAd,CAAoBC,UAAhG,EACLU,MAAM,KAAK,KAAK3B,MAAL,CAAYsB,IAAZ,CAAiBT,EAA5B,GAAiC,KAAjC,GAAyCc,MADpC,EAGJI,MAHI,GAIJC,IAJI,CAIC,MAAM,KAAK9B,QAJZ,CAAP;AAKD;;AApD2C;;AAuD9C+B,MAAM,CAACC,OAAP,GAAiBpC,mBAAjB","sourcesContent":["'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst { Error } = require('../errors');\nconst Collection = require('../util/Collection');\n\n/**\n * Manages API methods for users who reacted to a reaction and stores their cache.\n * @extends {BaseManager}\n */\nclass ReactionUserManager extends BaseManager {\n  constructor(client, iterable, reaction) {\n    super(client, iterable, { name: 'User' });\n    /**\n     * The reaction that this manager belongs to\n     * @type {MessageReaction}\n     */\n    this.reaction = reaction;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name ReactionUserManager#cache\n   */\n\n  /**\n   * Fetches the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.\n   * @param {Object} [options] Options for fetching the users\n   * @param {number} [options.limit=100] The maximum amount of users to fetch, defaults to 100\n   * @param {Snowflake} [options.before] Limit fetching users to those with an id lower than the supplied id\n   * @param {Snowflake} [options.after] Limit fetching users to those with an id greater than the supplied id\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n  async fetch({ limit = 100, after, before } = {}) {\n    const message = this.reaction.message;\n    const data = await this.client.api.channels[message.channel.id].messages[message.id].reactions[\n      this.reaction.emoji.identifier\n    ].get({ query: { limit, before, after } });\n    const users = new Collection();\n    for (const rawUser of data) {\n      const user = this.client.users.add(rawUser);\n      this.cache.set(user.id, user);\n      users.set(user.id, user);\n    }\n    return users;\n  }\n\n  /**\n   * Removes a user from this reaction.\n   * @param {UserResolvable} [user=this.client.user] The user to remove the reaction of\n   * @returns {Promise<MessageReaction>}\n   */\n  remove(user = this.client.user) {\n    const userID = this.client.users.resolveID(user);\n    if (!userID) return Promise.reject(new Error('REACTION_RESOLVE_USER'));\n    const message = this.reaction.message;\n    return this.client.api.channels[message.channel.id].messages[message.id].reactions[this.reaction.emoji.identifier][\n      userID === this.client.user.id ? '@me' : userID\n    ]\n      .delete()\n      .then(() => this.reaction);\n  }\n}\n\nmodule.exports = ReactionUserManager;\n"]},"metadata":{},"sourceType":"script"}