{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst {\n  Events\n} = require('../../util/Constants');\n\nconst Structures = require('../../util/Structures');\n\nclass VoiceStateUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    if (guild) {\n      const VoiceState = Structures.get('VoiceState'); // Update the state\n\n      const oldState = guild.voiceStates.cache.has(data.user_id) ? guild.voiceStates.cache.get(data.user_id)._clone() : new VoiceState(guild, {\n        user_id: data.user_id\n      });\n      const newState = guild.voiceStates.add(data); // Get the member\n\n      let member = guild.members.cache.get(data.user_id);\n\n      if (member && data.member) {\n        member._patch(data.member);\n      } else if (data.member && data.member.user && data.member.joined_at) {\n        member = guild.members.add(data.member);\n      } // Emit event\n\n\n      if (member && member.user.id === client.user.id) {\n        client.emit('debug', `[VOICE] received voice state update: ${JSON.stringify(data)}`);\n        client.voice.onVoiceStateUpdate(data);\n      }\n      /**\n       * Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.\n       * @event Client#voiceStateUpdate\n       * @param {VoiceState} oldState The voice state before the update\n       * @param {VoiceState} newState The voice state after the update\n       */\n\n\n      client.emit(Events.VOICE_STATE_UPDATE, oldState, newState);\n    }\n  }\n\n}\n\nmodule.exports = VoiceStateUpdate;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/client/actions/VoiceStateUpdate.js"],"names":["Action","require","Events","Structures","VoiceStateUpdate","handle","data","client","guild","guilds","cache","get","guild_id","VoiceState","oldState","voiceStates","has","user_id","_clone","newState","add","member","members","_patch","user","joined_at","id","emit","JSON","stringify","voice","onVoiceStateUpdate","VOICE_STATE_UPDATE","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,sBAAD,CAA1B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,uBAAD,CAA1B;;AAEA,MAAMG,gBAAN,SAA+BJ,MAA/B,CAAsC;AACpCK,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAMC,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACE,MAAP,CAAcC,KAAd,CAAoBC,GAApB,CAAwBL,IAAI,CAACM,QAA7B,CAAd;;AACA,QAAIJ,KAAJ,EAAW;AACT,YAAMK,UAAU,GAAGV,UAAU,CAACQ,GAAX,CAAe,YAAf,CAAnB,CADS,CAET;;AACA,YAAMG,QAAQ,GAAGN,KAAK,CAACO,WAAN,CAAkBL,KAAlB,CAAwBM,GAAxB,CAA4BV,IAAI,CAACW,OAAjC,IACbT,KAAK,CAACO,WAAN,CAAkBL,KAAlB,CAAwBC,GAAxB,CAA4BL,IAAI,CAACW,OAAjC,EAA0CC,MAA1C,EADa,GAEb,IAAIL,UAAJ,CAAeL,KAAf,EAAsB;AAAES,QAAAA,OAAO,EAAEX,IAAI,CAACW;AAAhB,OAAtB,CAFJ;AAIA,YAAME,QAAQ,GAAGX,KAAK,CAACO,WAAN,CAAkBK,GAAlB,CAAsBd,IAAtB,CAAjB,CAPS,CAST;;AACA,UAAIe,MAAM,GAAGb,KAAK,CAACc,OAAN,CAAcZ,KAAd,CAAoBC,GAApB,CAAwBL,IAAI,CAACW,OAA7B,CAAb;;AACA,UAAII,MAAM,IAAIf,IAAI,CAACe,MAAnB,EAA2B;AACzBA,QAAAA,MAAM,CAACE,MAAP,CAAcjB,IAAI,CAACe,MAAnB;AACD,OAFD,MAEO,IAAIf,IAAI,CAACe,MAAL,IAAef,IAAI,CAACe,MAAL,CAAYG,IAA3B,IAAmClB,IAAI,CAACe,MAAL,CAAYI,SAAnD,EAA8D;AACnEJ,QAAAA,MAAM,GAAGb,KAAK,CAACc,OAAN,CAAcF,GAAd,CAAkBd,IAAI,CAACe,MAAvB,CAAT;AACD,OAfQ,CAiBT;;;AACA,UAAIA,MAAM,IAAIA,MAAM,CAACG,IAAP,CAAYE,EAAZ,KAAmBnB,MAAM,CAACiB,IAAP,CAAYE,EAA7C,EAAiD;AAC/CnB,QAAAA,MAAM,CAACoB,IAAP,CAAY,OAAZ,EAAsB,wCAAuCC,IAAI,CAACC,SAAL,CAAevB,IAAf,CAAqB,EAAlF;AACAC,QAAAA,MAAM,CAACuB,KAAP,CAAaC,kBAAb,CAAgCzB,IAAhC;AACD;AAED;AACN;AACA;AACA;AACA;AACA;;;AACMC,MAAAA,MAAM,CAACoB,IAAP,CAAYzB,MAAM,CAAC8B,kBAAnB,EAAuClB,QAAvC,EAAiDK,QAAjD;AACD;AACF;;AAnCmC;;AAsCtCc,MAAM,CAACC,OAAP,GAAiB9B,gBAAjB","sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\nconst Structures = require('../../util/Structures');\n\nclass VoiceStateUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      const VoiceState = Structures.get('VoiceState');\n      // Update the state\n      const oldState = guild.voiceStates.cache.has(data.user_id)\n        ? guild.voiceStates.cache.get(data.user_id)._clone()\n        : new VoiceState(guild, { user_id: data.user_id });\n\n      const newState = guild.voiceStates.add(data);\n\n      // Get the member\n      let member = guild.members.cache.get(data.user_id);\n      if (member && data.member) {\n        member._patch(data.member);\n      } else if (data.member && data.member.user && data.member.joined_at) {\n        member = guild.members.add(data.member);\n      }\n\n      // Emit event\n      if (member && member.user.id === client.user.id) {\n        client.emit('debug', `[VOICE] received voice state update: ${JSON.stringify(data)}`);\n        client.voice.onVoiceStateUpdate(data);\n      }\n\n      /**\n       * Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.\n       * @event Client#voiceStateUpdate\n       * @param {VoiceState} oldState The voice state before the update\n       * @param {VoiceState} newState The voice state after the update\n       */\n      client.emit(Events.VOICE_STATE_UPDATE, oldState, newState);\n    }\n  }\n}\n\nmodule.exports = VoiceStateUpdate;\n"]},"metadata":{},"sourceType":"script"}