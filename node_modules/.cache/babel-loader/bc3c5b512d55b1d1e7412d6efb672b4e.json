{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst Snowflake = require('../util/Snowflake');\n/**\n * Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.\n * @extends {Base}\n */\n\n\nclass Emoji extends Base {\n  constructor(client, emoji) {\n    super(client);\n    /**\n     * Whether this emoji is animated\n     * @type {boolean}\n     */\n\n    this.animated = emoji.animated;\n    /**\n     * The name of this emoji\n     * @type {string}\n     */\n\n    this.name = emoji.name;\n    /**\n     * The ID of this emoji\n     * @type {?Snowflake}\n     */\n\n    this.id = emoji.id;\n    /**\n     * Whether this emoji has been deleted\n     * @type {boolean}\n     */\n\n    this.deleted = false;\n  }\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n\n\n  get identifier() {\n    if (this.id) return `${this.animated ? 'a:' : ''}${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n  /**\n   * The URL to the emoji file if its a custom emoji\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get url() {\n    if (!this.id) return null;\n    return this.client.rest.cdn.Emoji(this.id, this.animated ? 'gif' : 'png');\n  }\n  /**\n   * The timestamp the emoji was created at, or null if unicode\n   * @type {?number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    if (!this.id) return null;\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time the emoji was created at, or null if unicode\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    if (!this.id) return null;\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\n   * instead of the Emoji object.\n   * @returns {string}\n   * @example\n   * // Send a custom emoji from a guild:\n   * const emoji = guild.emojis.cache.first();\n   * msg.reply(`Hello! ${emoji}`);\n   * @example\n   * // Send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);\n   */\n\n\n  toString() {\n    return this.id ? `<${this.animated ? 'a' : ''}:${this.name}:${this.id}>` : this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildID',\n      createdTimestamp: true,\n      url: true,\n      identifier: true\n    });\n  }\n\n}\n\nmodule.exports = Emoji;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/Emoji.js"],"names":["Base","require","Snowflake","Emoji","constructor","client","emoji","animated","name","id","deleted","identifier","encodeURIComponent","url","rest","cdn","createdTimestamp","deconstruct","timestamp","createdAt","Date","toString","toJSON","guild","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,mBAAD,CAAzB;AAEA;AACA;AACA;AACA;;;AACA,MAAME,KAAN,SAAoBH,IAApB,CAAyB;AACvBI,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgB;AACzB,UAAMD,MAAN;AACA;AACJ;AACA;AACA;;AACI,SAAKE,QAAL,GAAgBD,KAAK,CAACC,QAAtB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,IAAL,GAAYF,KAAK,CAACE,IAAlB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,EAAL,GAAUH,KAAK,CAACG,EAAhB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,OAAL,GAAe,KAAf;AACD;AAED;AACF;AACA;AACA;AACA;;;AACgB,MAAVC,UAAU,GAAG;AACf,QAAI,KAAKF,EAAT,EAAa,OAAQ,GAAE,KAAKF,QAAL,GAAgB,IAAhB,GAAuB,EAAG,GAAE,KAAKC,IAAK,IAAG,KAAKC,EAAG,EAA3D;AACb,WAAOG,kBAAkB,CAAC,KAAKJ,IAAN,CAAzB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACS,MAAHK,GAAG,GAAG;AACR,QAAI,CAAC,KAAKJ,EAAV,EAAc,OAAO,IAAP;AACd,WAAO,KAAKJ,MAAL,CAAYS,IAAZ,CAAiBC,GAAjB,CAAqBZ,KAArB,CAA2B,KAAKM,EAAhC,EAAoC,KAAKF,QAAL,GAAgB,KAAhB,GAAwB,KAA5D,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACsB,MAAhBS,gBAAgB,GAAG;AACrB,QAAI,CAAC,KAAKP,EAAV,EAAc,OAAO,IAAP;AACd,WAAOP,SAAS,CAACe,WAAV,CAAsB,KAAKR,EAA3B,EAA+BS,SAAtC;AACD;AAED;AACF;AACA;AACA;AACA;;;AACe,MAATC,SAAS,GAAG;AACd,QAAI,CAAC,KAAKV,EAAV,EAAc,OAAO,IAAP;AACd,WAAO,IAAIW,IAAJ,CAAS,KAAKJ,gBAAd,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKZ,EAAL,GAAW,IAAG,KAAKF,QAAL,GAAgB,GAAhB,GAAsB,EAAG,IAAG,KAAKC,IAAK,IAAG,KAAKC,EAAG,GAA/D,GAAoE,KAAKD,IAAhF;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP,WAAO,MAAMA,MAAN,CAAa;AAClBC,MAAAA,KAAK,EAAE,SADW;AAElBP,MAAAA,gBAAgB,EAAE,IAFA;AAGlBH,MAAAA,GAAG,EAAE,IAHa;AAIlBF,MAAAA,UAAU,EAAE;AAJM,KAAb,CAAP;AAMD;;AA3FsB;;AA8FzBa,MAAM,CAACC,OAAP,GAAiBtB,KAAjB","sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst Snowflake = require('../util/Snowflake');\n\n/**\n * Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.\n * @extends {Base}\n */\nclass Emoji extends Base {\n  constructor(client, emoji) {\n    super(client);\n    /**\n     * Whether this emoji is animated\n     * @type {boolean}\n     */\n    this.animated = emoji.animated;\n\n    /**\n     * The name of this emoji\n     * @type {string}\n     */\n    this.name = emoji.name;\n\n    /**\n     * The ID of this emoji\n     * @type {?Snowflake}\n     */\n    this.id = emoji.id;\n\n    /**\n     * Whether this emoji has been deleted\n     * @type {boolean}\n     */\n    this.deleted = false;\n  }\n\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n  get identifier() {\n    if (this.id) return `${this.animated ? 'a:' : ''}${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n\n  /**\n   * The URL to the emoji file if its a custom emoji\n   * @type {?string}\n   * @readonly\n   */\n  get url() {\n    if (!this.id) return null;\n    return this.client.rest.cdn.Emoji(this.id, this.animated ? 'gif' : 'png');\n  }\n\n  /**\n   * The timestamp the emoji was created at, or null if unicode\n   * @type {?number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    if (!this.id) return null;\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the emoji was created at, or null if unicode\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    if (!this.id) return null;\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\n   * instead of the Emoji object.\n   * @returns {string}\n   * @example\n   * // Send a custom emoji from a guild:\n   * const emoji = guild.emojis.cache.first();\n   * msg.reply(`Hello! ${emoji}`);\n   * @example\n   * // Send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);\n   */\n  toString() {\n    return this.id ? `<${this.animated ? 'a' : ''}:${this.name}:${this.id}>` : this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildID',\n      createdTimestamp: true,\n      url: true,\n      identifier: true,\n    });\n  }\n}\n\nmodule.exports = Emoji;\n"]},"metadata":{},"sourceType":"script"}