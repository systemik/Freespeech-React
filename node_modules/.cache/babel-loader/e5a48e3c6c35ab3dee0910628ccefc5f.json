{"ast":null,"code":"'use strict';\n\nconst Util = require('../util/Util');\n/**\n * Represents an attachment in a message.\n */\n\n\nclass MessageAttachment {\n  /**\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {string} [name=null] The name of the file, if any\n   * @param {Object} [data] Extra data\n   */\n  constructor(attachment) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let data = arguments.length > 2 ? arguments[2] : undefined;\n    this.attachment = attachment;\n    /**\n     * The name of this attachment\n     * @type {?string}\n     */\n\n    this.name = name;\n    if (data) this._patch(data);\n  }\n  /**\n   * Sets the file of this attachment.\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {string} [name=null] The name of the file, if any\n   * @returns {MessageAttachment} This attachment\n   */\n\n\n  setFile(attachment) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    this.attachment = attachment;\n    this.name = name;\n    return this;\n  }\n  /**\n   * Sets the name of this attachment.\n   * @param {string} name The name of the file\n   * @returns {MessageAttachment} This attachment\n   */\n\n\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  _patch(data) {\n    /**\n     * The ID of this attachment\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    /**\n     * The size of this attachment in bytes\n     * @type {number}\n     */\n\n    this.size = data.size;\n    /**\n     * The URL to this attachment\n     * @type {string}\n     */\n\n    this.url = data.url;\n    /**\n     * The Proxy URL to this attachment\n     * @type {string}\n     */\n\n    this.proxyURL = data.proxy_url;\n    /**\n     * The height of this attachment (if an image or video)\n     * @type {?number}\n     */\n\n    this.height = typeof data.height !== 'undefined' ? data.height : null;\n    /**\n     * The width of this attachment (if an image or video)\n     * @type {?number}\n     */\n\n    this.width = typeof data.width !== 'undefined' ? data.width : null;\n  }\n  /**\n   * Whether or not this attachment has been marked as a spoiler\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get spoiler() {\n    return Util.basename(this.url).startsWith('SPOILER_');\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n\n}\n\nmodule.exports = MessageAttachment;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/MessageAttachment.js"],"names":["Util","require","MessageAttachment","constructor","attachment","name","data","_patch","setFile","setName","id","size","url","proxyURL","proxy_url","height","width","spoiler","basename","startsWith","toJSON","flatten","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAApB;AAEA;AACA;AACA;;;AACA,MAAMC,iBAAN,CAAwB;AACtB;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,UAAD,EAAgC;AAAA,QAAnBC,IAAmB,uEAAZ,IAAY;AAAA,QAANC,IAAM;AACzC,SAAKF,UAAL,GAAkBA,UAAlB;AACA;AACJ;AACA;AACA;;AACI,SAAKC,IAAL,GAAYA,IAAZ;AACA,QAAIC,IAAJ,EAAU,KAAKC,MAAL,CAAYD,IAAZ;AACX;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,OAAO,CAACJ,UAAD,EAA0B;AAAA,QAAbC,IAAa,uEAAN,IAAM;AAC/B,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEI,EAAAA,OAAO,CAACJ,IAAD,EAAO;AACZ,SAAKA,IAAL,GAAYA,IAAZ;AACA,WAAO,IAAP;AACD;;AAEDE,EAAAA,MAAM,CAACD,IAAD,EAAO;AACX;AACJ;AACA;AACA;AACI,SAAKI,EAAL,GAAUJ,IAAI,CAACI,EAAf;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,IAAL,GAAYL,IAAI,CAACK,IAAjB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,GAAL,GAAWN,IAAI,CAACM,GAAhB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,QAAL,GAAgBP,IAAI,CAACQ,SAArB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,MAAL,GAAc,OAAOT,IAAI,CAACS,MAAZ,KAAuB,WAAvB,GAAqCT,IAAI,CAACS,MAA1C,GAAmD,IAAjE;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,KAAL,GAAa,OAAOV,IAAI,CAACU,KAAZ,KAAsB,WAAtB,GAAoCV,IAAI,CAACU,KAAzC,GAAiD,IAA9D;AACD;AAED;AACF;AACA;AACA;AACA;;;AACa,MAAPC,OAAO,GAAG;AACZ,WAAOjB,IAAI,CAACkB,QAAL,CAAc,KAAKN,GAAnB,EAAwBO,UAAxB,CAAmC,UAAnC,CAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAOpB,IAAI,CAACqB,OAAL,CAAa,IAAb,CAAP;AACD;;AAvFqB;;AA0FxBC,MAAM,CAACC,OAAP,GAAiBrB,iBAAjB","sourcesContent":["'use strict';\n\nconst Util = require('../util/Util');\n\n/**\n * Represents an attachment in a message.\n */\nclass MessageAttachment {\n  /**\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {string} [name=null] The name of the file, if any\n   * @param {Object} [data] Extra data\n   */\n  constructor(attachment, name = null, data) {\n    this.attachment = attachment;\n    /**\n     * The name of this attachment\n     * @type {?string}\n     */\n    this.name = name;\n    if (data) this._patch(data);\n  }\n\n  /**\n   * Sets the file of this attachment.\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {string} [name=null] The name of the file, if any\n   * @returns {MessageAttachment} This attachment\n   */\n  setFile(attachment, name = null) {\n    this.attachment = attachment;\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets the name of this attachment.\n   * @param {string} name The name of the file\n   * @returns {MessageAttachment} This attachment\n   */\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  _patch(data) {\n    /**\n     * The ID of this attachment\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The size of this attachment in bytes\n     * @type {number}\n     */\n    this.size = data.size;\n\n    /**\n     * The URL to this attachment\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * The Proxy URL to this attachment\n     * @type {string}\n     */\n    this.proxyURL = data.proxy_url;\n\n    /**\n     * The height of this attachment (if an image or video)\n     * @type {?number}\n     */\n    this.height = typeof data.height !== 'undefined' ? data.height : null;\n\n    /**\n     * The width of this attachment (if an image or video)\n     * @type {?number}\n     */\n    this.width = typeof data.width !== 'undefined' ? data.width : null;\n  }\n\n  /**\n   * Whether or not this attachment has been marked as a spoiler\n   * @type {boolean}\n   * @readonly\n   */\n  get spoiler() {\n    return Util.basename(this.url).startsWith('SPOILER_');\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\nmodule.exports = MessageAttachment;\n"]},"metadata":{},"sourceType":"script"}