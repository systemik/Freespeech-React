{"ast":null,"code":"'use strict';\n\nrequire('setimmediate');\n\nconst EventEmitter = require('events');\n\nconst RESTManager = require('../rest/RESTManager');\n\nconst {\n  DefaultOptions\n} = require('../util/Constants');\n\nconst Util = require('../util/Util');\n/**\n * The base class for all clients.\n * @extends {EventEmitter}\n */\n\n\nclass BaseClient extends EventEmitter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    /**\n     * Timeouts set by {@link BaseClient#setTimeout} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n\n    this._timeouts = new Set();\n    /**\n     * Intervals set by {@link BaseClient#setInterval} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n\n    this._intervals = new Set();\n    /**\n     * Intervals set by {@link BaseClient#setImmediate} that are still active\n     * @type {Set<Immediate>}\n     * @private\n     */\n\n    this._immediates = new Set();\n    /**\n     * The options the client was instantiated with\n     * @type {ClientOptions}\n     */\n\n    this.options = Util.mergeDefault(DefaultOptions, options);\n    /**\n     * The REST manager of the client\n     * @type {RESTManager}\n     * @private\n     */\n\n    this.rest = new RESTManager(this, options._tokenType);\n  }\n  /**\n   * API shortcut\n   * @type {Object}\n   * @readonly\n   * @private\n   */\n\n\n  get api() {\n    return this.rest.api;\n  }\n  /**\n   * Destroys all assets used by the base client.\n   */\n\n\n  destroy() {\n    for (const t of this._timeouts) this.clearTimeout(t);\n\n    for (const i of this._intervals) this.clearInterval(i);\n\n    for (const i of this._immediates) this.clearImmediate(i);\n\n    this._timeouts.clear();\n\n    this._intervals.clear();\n\n    this._immediates.clear();\n  }\n  /**\n   * Sets a timeout that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait before executing (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n\n\n  setTimeout(fn, delay) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    const timeout = setTimeout(() => {\n      fn(...args);\n\n      this._timeouts.delete(timeout);\n    }, delay);\n\n    this._timeouts.add(timeout);\n\n    return timeout;\n  }\n  /**\n   * Clears a timeout.\n   * @param {Timeout} timeout Timeout to cancel\n   */\n\n\n  clearTimeout(timeout) {\n    clearTimeout(timeout);\n\n    this._timeouts.delete(timeout);\n  }\n  /**\n   * Sets an interval that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait between executions (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n\n\n  setInterval(fn, delay) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    const interval = setInterval(fn, delay, ...args);\n\n    this._intervals.add(interval);\n\n    return interval;\n  }\n  /**\n   * Clears an interval.\n   * @param {Timeout} interval Interval to cancel\n   */\n\n\n  clearInterval(interval) {\n    clearInterval(interval);\n\n    this._intervals.delete(interval);\n  }\n  /**\n   * Sets an immediate that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {...*} args Arguments for the function\n   * @returns {Immediate}\n   */\n\n\n  setImmediate(fn) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    const immediate = setImmediate(fn, ...args);\n\n    this._immediates.add(immediate);\n\n    return immediate;\n  }\n  /**\n   * Clears an immediate.\n   * @param {Immediate} immediate Immediate to cancel\n   */\n\n\n  clearImmediate(immediate) {\n    clearImmediate(immediate);\n\n    this._immediates.delete(immediate);\n  }\n  /**\n   * Increments max listeners by one, if they are not zero.\n   * @private\n   */\n\n\n  incrementMaxListeners() {\n    const maxListeners = this.getMaxListeners();\n\n    if (maxListeners !== 0) {\n      this.setMaxListeners(maxListeners + 1);\n    }\n  }\n  /**\n   * Decrements max listeners by one, if they are not zero.\n   * @private\n   */\n\n\n  decrementMaxListeners() {\n    const maxListeners = this.getMaxListeners();\n\n    if (maxListeners !== 0) {\n      this.setMaxListeners(maxListeners - 1);\n    }\n  }\n\n  toJSON() {\n    for (var _len4 = arguments.length, props = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      props[_key4] = arguments[_key4];\n    }\n\n    return Util.flatten(this, {\n      domain: false\n    }, ...props);\n  }\n\n}\n\nmodule.exports = BaseClient;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/client/BaseClient.js"],"names":["require","EventEmitter","RESTManager","DefaultOptions","Util","BaseClient","constructor","options","_timeouts","Set","_intervals","_immediates","mergeDefault","rest","_tokenType","api","destroy","t","clearTimeout","i","clearInterval","clearImmediate","clear","setTimeout","fn","delay","args","timeout","delete","add","setInterval","interval","setImmediate","immediate","incrementMaxListeners","maxListeners","getMaxListeners","setMaxListeners","decrementMaxListeners","toJSON","props","flatten","domain","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nrequire('setimmediate');\nconst EventEmitter = require('events');\nconst RESTManager = require('../rest/RESTManager');\nconst { DefaultOptions } = require('../util/Constants');\nconst Util = require('../util/Util');\n\n/**\n * The base class for all clients.\n * @extends {EventEmitter}\n */\nclass BaseClient extends EventEmitter {\n  constructor(options = {}) {\n    super();\n\n    /**\n     * Timeouts set by {@link BaseClient#setTimeout} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n    this._timeouts = new Set();\n\n    /**\n     * Intervals set by {@link BaseClient#setInterval} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n    this._intervals = new Set();\n\n    /**\n     * Intervals set by {@link BaseClient#setImmediate} that are still active\n     * @type {Set<Immediate>}\n     * @private\n     */\n    this._immediates = new Set();\n\n    /**\n     * The options the client was instantiated with\n     * @type {ClientOptions}\n     */\n    this.options = Util.mergeDefault(DefaultOptions, options);\n\n    /**\n     * The REST manager of the client\n     * @type {RESTManager}\n     * @private\n     */\n    this.rest = new RESTManager(this, options._tokenType);\n  }\n\n  /**\n   * API shortcut\n   * @type {Object}\n   * @readonly\n   * @private\n   */\n  get api() {\n    return this.rest.api;\n  }\n\n  /**\n   * Destroys all assets used by the base client.\n   */\n  destroy() {\n    for (const t of this._timeouts) this.clearTimeout(t);\n    for (const i of this._intervals) this.clearInterval(i);\n    for (const i of this._immediates) this.clearImmediate(i);\n    this._timeouts.clear();\n    this._intervals.clear();\n    this._immediates.clear();\n  }\n\n  /**\n   * Sets a timeout that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait before executing (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n  setTimeout(fn, delay, ...args) {\n    const timeout = setTimeout(() => {\n      fn(...args);\n      this._timeouts.delete(timeout);\n    }, delay);\n    this._timeouts.add(timeout);\n    return timeout;\n  }\n\n  /**\n   * Clears a timeout.\n   * @param {Timeout} timeout Timeout to cancel\n   */\n  clearTimeout(timeout) {\n    clearTimeout(timeout);\n    this._timeouts.delete(timeout);\n  }\n\n  /**\n   * Sets an interval that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait between executions (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n  setInterval(fn, delay, ...args) {\n    const interval = setInterval(fn, delay, ...args);\n    this._intervals.add(interval);\n    return interval;\n  }\n\n  /**\n   * Clears an interval.\n   * @param {Timeout} interval Interval to cancel\n   */\n  clearInterval(interval) {\n    clearInterval(interval);\n    this._intervals.delete(interval);\n  }\n\n  /**\n   * Sets an immediate that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {...*} args Arguments for the function\n   * @returns {Immediate}\n   */\n  setImmediate(fn, ...args) {\n    const immediate = setImmediate(fn, ...args);\n    this._immediates.add(immediate);\n    return immediate;\n  }\n\n  /**\n   * Clears an immediate.\n   * @param {Immediate} immediate Immediate to cancel\n   */\n  clearImmediate(immediate) {\n    clearImmediate(immediate);\n    this._immediates.delete(immediate);\n  }\n\n  /**\n   * Increments max listeners by one, if they are not zero.\n   * @private\n   */\n  incrementMaxListeners() {\n    const maxListeners = this.getMaxListeners();\n    if (maxListeners !== 0) {\n      this.setMaxListeners(maxListeners + 1);\n    }\n  }\n\n  /**\n   * Decrements max listeners by one, if they are not zero.\n   * @private\n   */\n  decrementMaxListeners() {\n    const maxListeners = this.getMaxListeners();\n    if (maxListeners !== 0) {\n      this.setMaxListeners(maxListeners - 1);\n    }\n  }\n\n  toJSON(...props) {\n    return Util.flatten(this, { domain: false }, ...props);\n  }\n}\n\nmodule.exports = BaseClient;\n"]},"metadata":{},"sourceType":"script"}