{"ast":null,"code":"'use strict';\n\nconst Util = require('../util/Util'); // Discord epoch (2015-01-01T00:00:00.000Z)\n\n\nconst EPOCH = 1420070400000;\nlet INCREMENT = 0;\n/**\n * A container for useful snowflake-related methods.\n */\n\nclass SnowflakeUtil {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n  /**\n   * A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n   * ```\n   * If we have a snowflake '266241948824764416' we can represent it as binary:\n   *\n   * 64                                          22     17     12          0\n   *  000000111011000111100001101001000101000000  00001  00000  000000000000\n   *       number of ms since Discord epoch       worker  pid    increment\n   * ```\n   * @typedef {string} Snowflake\n   */\n\n  /**\n   * Generates a Discord snowflake.\n   * <info>This hardcodes the worker ID as 1 and the process ID as 0.</info>\n   * @param {number|Date} [timestamp=Date.now()] Timestamp or date of the snowflake to generate\n   * @returns {Snowflake} The generated snowflake\n   */\n\n\n  static generate() {\n    let timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n\n    if (typeof timestamp !== 'number' || isNaN(timestamp)) {\n      throw new TypeError(`\"timestamp\" argument must be a number (received ${isNaN(timestamp) ? 'NaN' : typeof timestamp})`);\n    }\n\n    if (INCREMENT >= 4095) INCREMENT = 0;\n    const BINARY = `${(timestamp - EPOCH).toString(2).padStart(42, '0')}0000100000${(INCREMENT++).toString(2).padStart(12, '0')}`;\n    return Util.binaryToID(BINARY);\n  }\n  /**\n   * A deconstructed snowflake.\n   * @typedef {Object} DeconstructedSnowflake\n   * @property {number} timestamp Timestamp the snowflake was created\n   * @property {Date} date Date the snowflake was created\n   * @property {number} workerID Worker ID in the snowflake\n   * @property {number} processID Process ID in the snowflake\n   * @property {number} increment Increment in the snowflake\n   * @property {string} binary Binary representation of the snowflake\n   */\n\n  /**\n   * Deconstructs a Discord snowflake.\n   * @param {Snowflake} snowflake Snowflake to deconstruct\n   * @returns {DeconstructedSnowflake} Deconstructed snowflake\n   */\n\n\n  static deconstruct(snowflake) {\n    const BINARY = Util.idToBinary(snowflake).toString(2).padStart(64, '0');\n    const res = {\n      timestamp: parseInt(BINARY.substring(0, 42), 2) + EPOCH,\n      workerID: parseInt(BINARY.substring(42, 47), 2),\n      processID: parseInt(BINARY.substring(47, 52), 2),\n      increment: parseInt(BINARY.substring(52, 64), 2),\n      binary: BINARY\n    };\n    Object.defineProperty(res, 'date', {\n      get: function get() {\n        return new Date(this.timestamp);\n      },\n      enumerable: true\n    });\n    return res;\n  }\n  /**\n   * Discord's epoch value (2015-01-01T00:00:00.000Z).\n   * @type {number}\n   * @readonly\n   */\n\n\n  static get EPOCH() {\n    return EPOCH;\n  }\n\n}\n\nmodule.exports = SnowflakeUtil;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/util/Snowflake.js"],"names":["Util","require","EPOCH","INCREMENT","SnowflakeUtil","constructor","Error","name","generate","timestamp","Date","now","getTime","isNaN","TypeError","BINARY","toString","padStart","binaryToID","deconstruct","snowflake","idToBinary","res","parseInt","substring","workerID","processID","increment","binary","Object","defineProperty","get","enumerable","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,cAAD,CAApB,C,CAEA;;;AACA,MAAMC,KAAK,GAAG,aAAd;AACA,IAAIC,SAAS,GAAG,CAAhB;AAEA;AACA;AACA;;AACA,MAAMC,aAAN,CAAoB;AAClBC,EAAAA,WAAW,GAAG;AACZ,UAAM,IAAIC,KAAJ,CAAW,OAAM,KAAKD,WAAL,CAAiBE,IAAK,iCAAvC,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;;;AACiB,SAARC,QAAQ,GAAyB;AAAA,QAAxBC,SAAwB,uEAAZC,IAAI,CAACC,GAAL,EAAY;AACtC,QAAIF,SAAS,YAAYC,IAAzB,EAA+BD,SAAS,GAAGA,SAAS,CAACG,OAAV,EAAZ;;AAC/B,QAAI,OAAOH,SAAP,KAAqB,QAArB,IAAiCI,KAAK,CAACJ,SAAD,CAA1C,EAAuD;AACrD,YAAM,IAAIK,SAAJ,CACH,mDAAkDD,KAAK,CAACJ,SAAD,CAAL,GAAmB,KAAnB,GAA2B,OAAOA,SAAU,GAD3F,CAAN;AAGD;;AACD,QAAIN,SAAS,IAAI,IAAjB,EAAuBA,SAAS,GAAG,CAAZ;AACvB,UAAMY,MAAM,GAAI,GAAE,CAACN,SAAS,GAAGP,KAAb,EAAoBc,QAApB,CAA6B,CAA7B,EAAgCC,QAAhC,CAAyC,EAAzC,EAA6C,GAA7C,CAAkD,aAAY,CAACd,SAAS,EAAV,EAC7Ea,QAD6E,CACpE,CADoE,EAE7EC,QAF6E,CAEpE,EAFoE,EAEhE,GAFgE,CAE3D,EAFrB;AAGA,WAAOjB,IAAI,CAACkB,UAAL,CAAgBH,MAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;;;AACoB,SAAXI,WAAW,CAACC,SAAD,EAAY;AAC5B,UAAML,MAAM,GAAGf,IAAI,CAACqB,UAAL,CAAgBD,SAAhB,EAA2BJ,QAA3B,CAAoC,CAApC,EAAuCC,QAAvC,CAAgD,EAAhD,EAAoD,GAApD,CAAf;AACA,UAAMK,GAAG,GAAG;AACVb,MAAAA,SAAS,EAAEc,QAAQ,CAACR,MAAM,CAACS,SAAP,CAAiB,CAAjB,EAAoB,EAApB,CAAD,EAA0B,CAA1B,CAAR,GAAuCtB,KADxC;AAEVuB,MAAAA,QAAQ,EAAEF,QAAQ,CAACR,MAAM,CAACS,SAAP,CAAiB,EAAjB,EAAqB,EAArB,CAAD,EAA2B,CAA3B,CAFR;AAGVE,MAAAA,SAAS,EAAEH,QAAQ,CAACR,MAAM,CAACS,SAAP,CAAiB,EAAjB,EAAqB,EAArB,CAAD,EAA2B,CAA3B,CAHT;AAIVG,MAAAA,SAAS,EAAEJ,QAAQ,CAACR,MAAM,CAACS,SAAP,CAAiB,EAAjB,EAAqB,EAArB,CAAD,EAA2B,CAA3B,CAJT;AAKVI,MAAAA,MAAM,EAAEb;AALE,KAAZ;AAOAc,IAAAA,MAAM,CAACC,cAAP,CAAsBR,GAAtB,EAA2B,MAA3B,EAAmC;AACjCS,MAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,eAAO,IAAIrB,IAAJ,CAAS,KAAKD,SAAd,CAAP;AACD,OAHgC;AAIjCuB,MAAAA,UAAU,EAAE;AAJqB,KAAnC;AAMA,WAAOV,GAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACkB,aAALpB,KAAK,GAAG;AACjB,WAAOA,KAAP;AACD;;AA9EiB;;AAiFpB+B,MAAM,CAACC,OAAP,GAAiB9B,aAAjB","sourcesContent":["'use strict';\n\nconst Util = require('../util/Util');\n\n// Discord epoch (2015-01-01T00:00:00.000Z)\nconst EPOCH = 1420070400000;\nlet INCREMENT = 0;\n\n/**\n * A container for useful snowflake-related methods.\n */\nclass SnowflakeUtil {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n   * ```\n   * If we have a snowflake '266241948824764416' we can represent it as binary:\n   *\n   * 64                                          22     17     12          0\n   *  000000111011000111100001101001000101000000  00001  00000  000000000000\n   *       number of ms since Discord epoch       worker  pid    increment\n   * ```\n   * @typedef {string} Snowflake\n   */\n\n  /**\n   * Generates a Discord snowflake.\n   * <info>This hardcodes the worker ID as 1 and the process ID as 0.</info>\n   * @param {number|Date} [timestamp=Date.now()] Timestamp or date of the snowflake to generate\n   * @returns {Snowflake} The generated snowflake\n   */\n  static generate(timestamp = Date.now()) {\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    if (typeof timestamp !== 'number' || isNaN(timestamp)) {\n      throw new TypeError(\n        `\"timestamp\" argument must be a number (received ${isNaN(timestamp) ? 'NaN' : typeof timestamp})`,\n      );\n    }\n    if (INCREMENT >= 4095) INCREMENT = 0;\n    const BINARY = `${(timestamp - EPOCH).toString(2).padStart(42, '0')}0000100000${(INCREMENT++)\n      .toString(2)\n      .padStart(12, '0')}`;\n    return Util.binaryToID(BINARY);\n  }\n\n  /**\n   * A deconstructed snowflake.\n   * @typedef {Object} DeconstructedSnowflake\n   * @property {number} timestamp Timestamp the snowflake was created\n   * @property {Date} date Date the snowflake was created\n   * @property {number} workerID Worker ID in the snowflake\n   * @property {number} processID Process ID in the snowflake\n   * @property {number} increment Increment in the snowflake\n   * @property {string} binary Binary representation of the snowflake\n   */\n\n  /**\n   * Deconstructs a Discord snowflake.\n   * @param {Snowflake} snowflake Snowflake to deconstruct\n   * @returns {DeconstructedSnowflake} Deconstructed snowflake\n   */\n  static deconstruct(snowflake) {\n    const BINARY = Util.idToBinary(snowflake).toString(2).padStart(64, '0');\n    const res = {\n      timestamp: parseInt(BINARY.substring(0, 42), 2) + EPOCH,\n      workerID: parseInt(BINARY.substring(42, 47), 2),\n      processID: parseInt(BINARY.substring(47, 52), 2),\n      increment: parseInt(BINARY.substring(52, 64), 2),\n      binary: BINARY,\n    };\n    Object.defineProperty(res, 'date', {\n      get: function get() {\n        return new Date(this.timestamp);\n      },\n      enumerable: true,\n    });\n    return res;\n  }\n\n  /**\n   * Discord's epoch value (2015-01-01T00:00:00.000Z).\n   * @type {number}\n   * @readonly\n   */\n  static get EPOCH() {\n    return EPOCH;\n  }\n}\n\nmodule.exports = SnowflakeUtil;\n"]},"metadata":{},"sourceType":"script"}