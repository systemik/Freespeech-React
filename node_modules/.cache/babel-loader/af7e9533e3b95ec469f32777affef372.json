{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collection = void 0;\n/**\n * A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\n * an ID, for significantly improved performance and ease-of-use.\n * @extends {Map}\n * @property {number} size - The amount of elements in this collection.\n */\n\nclass Collection extends Map {\n  constructor(entries) {\n    super(entries);\n    /**\n     * Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called\n     * @name Collection#_array\n     * @type {?Array}\n     * @private\n     */\n\n    Object.defineProperty(this, '_array', {\n      value: null,\n      writable: true,\n      configurable: true\n    });\n    /**\n     * Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called\n     * @name Collection#_keyArray\n     * @type {?Array}\n     * @private\n     */\n\n    Object.defineProperty(this, '_keyArray', {\n      value: null,\n      writable: true,\n      configurable: true\n    });\n  }\n  /**\n   * Identical to [Map.get()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get).\n   * Gets an element with the specified key, and returns its value, or `undefined` if the element does not exist.\n   * @param {*} key - The key to get from this collection\n   * @returns {* | undefined}\n   */\n\n\n  get(key) {\n    return super.get(key);\n  }\n  /**\n   * Identical to [Map.set()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set).\n   * Sets a new element in the collection with the specified key and value.\n   * @param {*} key - The key of the element to add\n   * @param {*} value - The value of the element to add\n   * @returns {Collection}\n   */\n\n\n  set(key, value) {\n    this._array = null;\n    this._keyArray = null;\n    return super.set(key, value);\n  }\n  /**\n   * Identical to [Map.has()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has).\n   * Checks if an element exists in the collection.\n   * @param {*} key - The key of the element to check for\n   * @returns {boolean} `true` if the element exists, `false` if it does not exist.\n   */\n\n\n  has(key) {\n    return super.has(key);\n  }\n  /**\n   * Identical to [Map.delete()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete).\n   * Deletes an element from the collection.\n   * @param {*} key - The key to delete from the collection\n   * @returns {boolean} `true` if the element was removed, `false` if the element does not exist.\n   */\n\n\n  delete(key) {\n    this._array = null;\n    this._keyArray = null;\n    return super.delete(key);\n  }\n  /**\n   * Identical to [Map.clear()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear).\n   * Removes all elements from the collection.\n   * @returns {undefined}\n   */\n\n\n  clear() {\n    return super.clear();\n  }\n  /**\n   * Creates an ordered array of the values of this collection, and caches it internally. The array will only be\n   * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n   * itself. If you don't want this caching behavior, use `[...collection.values()]` or\n   * `Array.from(collection.values())` instead.\n   * @returns {Array}\n   */\n\n\n  array() {\n    if (!this._array || this._array.length !== this.size) this._array = [...this.values()];\n    return this._array;\n  }\n  /**\n   * Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\n   * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n   * itself. If you don't want this caching behavior, use `[...collection.keys()]` or\n   * `Array.from(collection.keys())` instead.\n   * @returns {Array}\n   */\n\n\n  keyArray() {\n    if (!this._keyArray || this._keyArray.length !== this.size) this._keyArray = [...this.keys()];\n    return this._keyArray;\n  }\n\n  first(amount) {\n    if (typeof amount === 'undefined') return this.values().next().value;\n    if (amount < 0) return this.last(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.values();\n    return Array.from({\n      length: amount\n    }, () => iter.next().value);\n  }\n\n  firstKey(amount) {\n    if (typeof amount === 'undefined') return this.keys().next().value;\n    if (amount < 0) return this.lastKey(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.keys();\n    return Array.from({\n      length: amount\n    }, () => iter.next().value);\n  }\n\n  last(amount) {\n    const arr = this.array();\n    if (typeof amount === 'undefined') return arr[arr.length - 1];\n    if (amount < 0) return this.first(amount * -1);\n    if (!amount) return [];\n    return arr.slice(-amount);\n  }\n\n  lastKey(amount) {\n    const arr = this.keyArray();\n    if (typeof amount === 'undefined') return arr[arr.length - 1];\n    if (amount < 0) return this.firstKey(amount * -1);\n    if (!amount) return [];\n    return arr.slice(-amount);\n  }\n\n  random(amount) {\n    let arr = this.array();\n    if (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n    if (arr.length === 0 || !amount) return [];\n    arr = arr.slice();\n    return Array.from({\n      length: amount\n    }, () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n  }\n\n  randomKey(amount) {\n    let arr = this.keyArray();\n    if (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n    if (arr.length === 0 || !amount) return [];\n    arr = arr.slice();\n    return Array.from({\n      length: amount\n    }, () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n  }\n\n  find(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return val;\n    }\n\n    return undefined;\n  }\n\n  findKey(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return key;\n    }\n\n    return undefined;\n  }\n\n  sweep(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    const previousSize = this.size;\n\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) this.delete(key);\n    }\n\n    return previousSize - this.size;\n  }\n\n  filter(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    const results = new this.constructor[Symbol.species]();\n\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) results.set(key, val);\n    }\n\n    return results;\n  }\n\n  partition(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg); // TODO: consider removing the <K, V> from the constructors after TS 3.7.0 is released, as it infers it\n\n    const results = [new this.constructor[Symbol.species](), new this.constructor[Symbol.species]()];\n\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) {\n        results[0].set(key, val);\n      } else {\n        results[1].set(key, val);\n      }\n    }\n\n    return results;\n  }\n\n  flatMap(fn, thisArg) {\n    const collections = this.map(fn, thisArg);\n    return new this.constructor[Symbol.species]().concat(...collections);\n  }\n\n  map(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    const iter = this.entries();\n    return Array.from({\n      length: this.size\n    }, () => {\n      const [key, value] = iter.next().value;\n      return fn(value, key, this);\n    });\n  }\n\n  mapValues(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    const coll = new this.constructor[Symbol.species]();\n\n    for (const [key, val] of this) coll.set(key, fn(val, key, this));\n\n    return coll;\n  }\n\n  some(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return true;\n    }\n\n    return false;\n  }\n\n  every(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\n    for (const [key, val] of this) {\n      if (!fn(val, key, this)) return false;\n    }\n\n    return true;\n  }\n  /**\n   * Applies a function to produce a single value. Identical in behavior to\n   * [Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n   * @param {Function} fn Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\n   * and `collection`\n   * @param {*} [initialValue] Starting value for the accumulator\n   * @returns {*}\n   * @example collection.reduce((acc, guild) => acc + guild.memberCount, 0);\n   */\n\n\n  reduce(fn, initialValue) {\n    let accumulator;\n\n    if (typeof initialValue !== 'undefined') {\n      accumulator = initialValue;\n\n      for (const [key, val] of this) accumulator = fn(accumulator, val, key, this);\n\n      return accumulator;\n    }\n\n    let first = true;\n\n    for (const [key, val] of this) {\n      if (first) {\n        accumulator = val;\n        first = false;\n        continue;\n      }\n\n      accumulator = fn(accumulator, val, key, this);\n    } // No items iterated.\n\n\n    if (first) {\n      throw new TypeError('Reduce of empty collection with no initial value');\n    }\n\n    return accumulator;\n  }\n\n  each(fn, thisArg) {\n    this.forEach(fn, thisArg);\n    return this;\n  }\n\n  tap(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    fn(this);\n    return this;\n  }\n  /**\n   * Creates an identical shallow copy of this collection.\n   * @returns {Collection}\n   * @example const newColl = someColl.clone();\n   */\n\n\n  clone() {\n    return new this.constructor[Symbol.species](this);\n  }\n  /**\n   * Combines this collection with others into a new collection. None of the source collections are modified.\n   * @param {...Collection} collections Collections to merge\n   * @returns {Collection}\n   * @example const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n   */\n\n\n  concat() {\n    const newColl = this.clone();\n\n    for (var _len = arguments.length, collections = new Array(_len), _key = 0; _key < _len; _key++) {\n      collections[_key] = arguments[_key];\n    }\n\n    for (const coll of collections) {\n      for (const [key, val] of coll) newColl.set(key, val);\n    }\n\n    return newColl;\n  }\n  /**\n   * Checks if this collection shares identical items with another.\n   * This is different to checking for equality using equal-signs, because\n   * the collections may be different objects, but contain the same data.\n   * @param {Collection} collection Collection to compare with\n   * @returns {boolean} Whether the collections have identical contents\n   */\n\n\n  equals(collection) {\n    if (!collection) return false;\n    if (this === collection) return true;\n    if (this.size !== collection.size) return false;\n\n    for (const [key, value] of this) {\n      if (!collection.has(key) || value !== collection.get(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * The sort method sorts the items of a collection in place and returns it.\n   * The sort is not necessarily stable in Node 10 or older.\n   * The default sort order is according to string Unicode code points.\n   * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n   * If omitted, the collection is sorted according to each character's Unicode code point value,\n   * according to the string conversion of each element.\n   * @returns {Collection}\n   * @example collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n   */\n\n\n  sort() {\n    let compareFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (x, y) => Number(x > y) || Number(x === y) - 1;\n    const entries = [...this.entries()];\n    entries.sort((a, b) => compareFunction(a[1], b[1], a[0], b[0])); // Perform clean-up\n\n    super.clear();\n    this._array = null;\n    this._keyArray = null; // Set the new entries\n\n    for (const [k, v] of entries) {\n      super.set(k, v);\n    }\n\n    return this;\n  }\n  /**\n   * The intersect method returns a new structure containing items where the keys are present in both original structures.\n   * @param {Collection} other The other Collection to filter against\n   * @returns {Collection}\n   */\n\n\n  intersect(other) {\n    return other.filter((_, k) => this.has(k));\n  }\n  /**\n   * The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.\n   * @param {Collection} other The other Collection to filter against\n   * @returns {Collection}\n   */\n\n\n  difference(other) {\n    return other.filter((_, k) => !this.has(k)).concat(this.filter((_, k) => !other.has(k)));\n  }\n  /**\n   * The sorted method sorts the items of a collection and returns it.\n   * The sort is not necessarily stable in Node 10 or older.\n   * The default sort order is according to string Unicode code points.\n   * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n   * If omitted, the collection is sorted according to each character's Unicode code point value,\n   * according to the string conversion of each element.\n   * @returns {Collection}\n   * @example collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n   */\n\n\n  sorted() {\n    let compareFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (x, y) => Number(x > y) || Number(x === y) - 1;\n    return new this.constructor[Symbol.species]([...this.entries()]).sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));\n  }\n\n}\n\nexports.Collection = Collection;\nCollection.default = Collection;\nmodule.exports = Collection;\nexports.default = Collection;","map":{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["export interface CollectionConstructor {\n\tnew(): Collection<unknown, unknown>;\n\tnew<K, V>(entries?: ReadonlyArray<readonly [K, V]> | null): Collection<K, V>;\n\tnew<K, V>(iterable: Iterable<readonly [K, V]>): Collection<K, V>;\n\treadonly prototype: Collection<unknown, unknown>;\n\treadonly [Symbol.species]: CollectionConstructor;\n}\n\n/**\n * A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\n * an ID, for significantly improved performance and ease-of-use.\n * @extends {Map}\n * @property {number} size - The amount of elements in this collection.\n */\nclass Collection<K, V> extends Map<K, V> {\n\tprivate _array!: V[] | null;\n\tprivate _keyArray!: K[] | null;\n\tpublic static readonly default: typeof Collection = Collection;\n\tpublic ['constructor']: typeof Collection;\n\n\tpublic constructor(entries?: ReadonlyArray<readonly [K, V]> | null) {\n\t\tsuper(entries);\n\n\t\t/**\n\t\t * Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called\n\t\t * @name Collection#_array\n\t\t * @type {?Array}\n\t\t * @private\n\t\t */\n\t\tObject.defineProperty(this, '_array', { value: null, writable: true, configurable: true });\n\n\t\t/**\n\t\t * Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called\n\t\t * @name Collection#_keyArray\n\t\t * @type {?Array}\n\t\t * @private\n\t\t */\n\t\tObject.defineProperty(this, '_keyArray', { value: null, writable: true, configurable: true });\n\t}\n\n\t/**\n\t * Identical to [Map.get()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get).\n\t * Gets an element with the specified key, and returns its value, or `undefined` if the element does not exist.\n\t * @param {*} key - The key to get from this collection\n\t * @returns {* | undefined}\n\t */\n\tpublic get(key: K): V | undefined {\n\t\treturn super.get(key);\n\t}\n\n\t/**\n\t * Identical to [Map.set()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set).\n\t * Sets a new element in the collection with the specified key and value.\n\t * @param {*} key - The key of the element to add\n\t * @param {*} value - The value of the element to add\n\t * @returns {Collection}\n\t */\n\tpublic set(key: K, value: V): this {\n\t\tthis._array = null;\n\t\tthis._keyArray = null;\n\t\treturn super.set(key, value);\n\t}\n\n\t/**\n\t * Identical to [Map.has()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has).\n\t * Checks if an element exists in the collection.\n\t * @param {*} key - The key of the element to check for\n\t * @returns {boolean} `true` if the element exists, `false` if it does not exist.\n\t */\n\tpublic has(key: K): boolean {\n\t\treturn super.has(key);\n\t}\n\n\t/**\n\t * Identical to [Map.delete()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete).\n\t * Deletes an element from the collection.\n\t * @param {*} key - The key to delete from the collection\n\t * @returns {boolean} `true` if the element was removed, `false` if the element does not exist.\n\t */\n\tpublic delete(key: K): boolean {\n\t\tthis._array = null;\n\t\tthis._keyArray = null;\n\t\treturn super.delete(key);\n\t}\n\n\t/**\n\t * Identical to [Map.clear()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear).\n\t * Removes all elements from the collection.\n\t * @returns {undefined}\n\t */\n\tpublic clear(): void {\n\t\treturn super.clear();\n\t}\n\n\t/**\n\t * Creates an ordered array of the values of this collection, and caches it internally. The array will only be\n\t * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n\t * itself. If you don't want this caching behavior, use `[...collection.values()]` or\n\t * `Array.from(collection.values())` instead.\n\t * @returns {Array}\n\t */\n\tpublic array(): V[] {\n\t\tif (!this._array || this._array.length !== this.size) this._array = [...this.values()];\n\t\treturn this._array;\n\t}\n\n\t/**\n\t * Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\n\t * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n\t * itself. If you don't want this caching behavior, use `[...collection.keys()]` or\n\t * `Array.from(collection.keys())` instead.\n\t * @returns {Array}\n\t */\n\tpublic keyArray(): K[] {\n\t\tif (!this._keyArray || this._keyArray.length !== this.size) this._keyArray = [...this.keys()];\n\t\treturn this._keyArray;\n\t}\n\n\t/**\n\t * Obtains the first value(s) in this collection.\n\t * @param {number} [amount] Amount of values to obtain from the beginning\n\t * @returns {*|Array<*>} A single value if no amount is provided or an array of values, starting from the end if\n\t * amount is negative\n\t */\n\tpublic first(): V | undefined;\n\tpublic first(amount: number): V[];\n\tpublic first(amount?: number): V | V[] | undefined {\n\t\tif (typeof amount === 'undefined') return this.values().next().value;\n\t\tif (amount < 0) return this.last(amount * -1);\n\t\tamount = Math.min(this.size, amount);\n\t\tconst iter = this.values();\n\t\treturn Array.from({ length: amount }, (): V => iter.next().value);\n\t}\n\n\t/**\n\t * Obtains the first key(s) in this collection.\n\t * @param {number} [amount] Amount of keys to obtain from the beginning\n\t * @returns {*|Array<*>} A single key if no amount is provided or an array of keys, starting from the end if\n\t * amount is negative\n\t */\n\tpublic firstKey(): K | undefined;\n\tpublic firstKey(amount: number): K[];\n\tpublic firstKey(amount?: number): K | K[] | undefined {\n\t\tif (typeof amount === 'undefined') return this.keys().next().value;\n\t\tif (amount < 0) return this.lastKey(amount * -1);\n\t\tamount = Math.min(this.size, amount);\n\t\tconst iter = this.keys();\n\t\treturn Array.from({ length: amount }, (): K => iter.next().value);\n\t}\n\n\t/**\n\t * Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\n\t * mechanism applies here as well.\n\t * @param {number} [amount] Amount of values to obtain from the end\n\t * @returns {*|Array<*>} A single value if no amount is provided or an array of values, starting from the start if\n\t * amount is negative\n\t */\n\tpublic last(): V | undefined;\n\tpublic last(amount: number): V[];\n\tpublic last(amount?: number): V | V[] | undefined {\n\t\tconst arr = this.array();\n\t\tif (typeof amount === 'undefined') return arr[arr.length - 1];\n\t\tif (amount < 0) return this.first(amount * -1);\n\t\tif (!amount) return [];\n\t\treturn arr.slice(-amount);\n\t}\n\n\t/**\n\t * Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\n\t * mechanism applies here as well.\n\t * @param {number} [amount] Amount of keys to obtain from the end\n\t * @returns {*|Array<*>} A single key if no amount is provided or an array of keys, starting from the start if\n\t * amount is negative\n\t */\n\tpublic lastKey(): K | undefined;\n\tpublic lastKey(amount: number): K[];\n\tpublic lastKey(amount?: number): K | K[] | undefined {\n\t\tconst arr = this.keyArray();\n\t\tif (typeof amount === 'undefined') return arr[arr.length - 1];\n\t\tif (amount < 0) return this.firstKey(amount * -1);\n\t\tif (!amount) return [];\n\t\treturn arr.slice(-amount);\n\t}\n\n\t/**\n\t * Obtains unique random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\n\t * mechanism applies here as well.\n\t * @param {number} [amount] Amount of values to obtain randomly\n\t * @returns {*|Array<*>} A single value if no amount is provided or an array of values\n\t */\n\tpublic random(): V;\n\tpublic random(amount: number): V[];\n\tpublic random(amount?: number): V | V[] {\n\t\tlet arr = this.array();\n\t\tif (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n\t\tif (arr.length === 0 || !amount) return [];\n\t\tarr = arr.slice();\n\t\treturn Array.from({ length: amount }, (): V => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n\t}\n\n\t/**\n\t * Obtains unique random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\n\t * mechanism applies here as well.\n\t * @param {number} [amount] Amount of keys to obtain randomly\n\t * @returns {*|Array<*>} A single key if no amount is provided or an array\n\t */\n\tpublic randomKey(): K;\n\tpublic randomKey(amount: number): K[];\n\tpublic randomKey(amount?: number): K | K[] {\n\t\tlet arr = this.keyArray();\n\t\tif (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n\t\tif (arr.length === 0 || !amount) return [];\n\t\tarr = arr.slice();\n\t\treturn Array.from({ length: amount }, (): K => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n\t}\n\n\t/**\n\t * Searches for a single item where the given function returns a truthy value. This behaves like\n\t * [Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n\t * <warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\n\t * should use the `get` method. See\n\t * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>\n\t * @param {Function} fn The function to test with (should return boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {*}\n\t * @example collection.find(user => user.username === 'Bob');\n\t */\n\tpublic find(fn: (value: V, key: K, collection: this) => boolean): V | undefined;\n\tpublic find<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): V | undefined;\n\tpublic find(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): V | undefined {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return val;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Searches for the key of a single item where the given function returns a truthy value. This behaves like\n\t * [Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\n\t * but returns the key rather than the positional index.\n\t * @param {Function} fn The function to test with (should return boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {*}\n\t * @example collection.findKey(user => user.username === 'Bob');\n\t */\n\tpublic findKey(fn: (value: V, key: K, collection: this) => boolean): K | undefined;\n\tpublic findKey<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): K | undefined;\n\tpublic findKey(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): K | undefined {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return key;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Removes items that satisfy the provided filter function.\n\t * @param {Function} fn Function used to test (should return a boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {number} The number of removed entries\n\t */\n\tpublic sweep(fn: (value: V, key: K, collection: this) => boolean): number;\n\tpublic sweep<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): number;\n\tpublic sweep(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): number {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst previousSize = this.size;\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) this.delete(key);\n\t\t}\n\t\treturn previousSize - this.size;\n\t}\n\n\t/**\n\t * Identical to\n\t * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n\t * but returns a Collection instead of an Array.\n\t * @param {Function} fn The function to test with (should return boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example collection.filter(user => user.username === 'Bob');\n\t */\n\tpublic filter(fn: (value: V, key: K, collection: this) => boolean): this;\n\tpublic filter<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): this;\n\tpublic filter(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): this {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst results = new this.constructor[Symbol.species]<K, V>() as this;\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) results.set(key, val);\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Partitions the collection into two collections where the first collection\n\t * contains the items that passed and the second contains the items that failed.\n\t * @param {Function} fn Function used to test (should return a boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection[]}\n\t * @example const [big, small] = collection.partition(guild => guild.memberCount > 250);\n\t */\n\tpublic partition(fn: (value: V, key: K, collection: this) => boolean): [this, this];\n\tpublic partition<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): [this, this];\n\tpublic partition(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): [this, this] {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\t// TODO: consider removing the <K, V> from the constructors after TS 3.7.0 is released, as it infers it\n\t\tconst results: [this, this] = [new this.constructor[Symbol.species]<K, V>() as this, new this.constructor[Symbol.species]<K, V>() as this];\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) {\n\t\t\t\tresults[0].set(key, val);\n\t\t\t} else {\n\t\t\t\tresults[1].set(key, val);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n\t * [Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).\n\t * @param {Function} fn Function that produces a new Collection\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example collection.flatMap(guild => guild.members.cache);\n\t */\n\tpublic flatMap<T>(fn: (value: V, key: K, collection: this) => Collection<K, T>): Collection<K, T>;\n\tpublic flatMap<T, This>(fn: (this: This, value: V, key: K, collection: this) => Collection<K, T>, thisArg: This): Collection<K, T>;\n\tpublic flatMap<T>(fn: (value: V, key: K, collection: this) => Collection<K, T>, thisArg?: unknown): Collection<K, T> {\n\t\tconst collections = this.map(fn, thisArg);\n\t\treturn (new this.constructor[Symbol.species]<K, T>() as Collection<K, T>).concat(...collections);\n\t}\n\n\t/**\n\t * Maps each item to another value into an array. Identical in behavior to\n\t * [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\t * @param {Function} fn Function that produces an element of the new array, taking three arguments\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Array}\n\t * @example collection.map(user => user.tag);\n\t */\n\tpublic map<T>(fn: (value: V, key: K, collection: this) => T): T[];\n\tpublic map<This, T>(fn: (this: This, value: V, key: K, collection: this) => T, thisArg: This): T[];\n\tpublic map<T>(fn: (value: V, key: K, collection: this) => T, thisArg?: unknown): T[] {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst iter = this.entries();\n\t\treturn Array.from({ length: this.size }, (): T => {\n\t\t\tconst [key, value] = iter.next().value;\n\t\t\treturn fn(value, key, this);\n\t\t});\n\t}\n\n\t/**\n\t * Maps each item to another value into a collection. Identical in behavior to\n\t * [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\t * @param {Function} fn Function that produces an element of the new collection, taking three arguments\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example collection.mapValues(user => user.tag);\n\t */\n\tpublic mapValues<T>(fn: (value: V, key: K, collection: this) => T): Collection<K, T>;\n\tpublic mapValues<This, T>(fn: (this: This, value: V, key: K, collection: this) => T, thisArg: This): Collection<K, T>;\n\tpublic mapValues<T>(fn: (value: V, key: K, collection: this) => T, thisArg?: unknown): Collection<K, T> {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst coll = new this.constructor[Symbol.species]<K, T>() as Collection<K, T>;\n\t\tfor (const [key, val] of this) coll.set(key, fn(val, key, this));\n\t\treturn coll;\n\t}\n\n\t/**\n\t * Checks if there exists an item that passes a test. Identical in behavior to\n\t * [Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).\n\t * @param {Function} fn Function used to test (should return a boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {boolean}\n\t * @example collection.some(user => user.discriminator === '0000');\n\t */\n\tpublic some(fn: (value: V, key: K, collection: this) => boolean): boolean;\n\tpublic some<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): boolean;\n\tpublic some(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): boolean {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if all items passes a test. Identical in behavior to\n\t * [Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).\n\t * @param {Function} fn Function used to test (should return a boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {boolean}\n\t * @example collection.every(user => !user.bot);\n\t */\n\tpublic every(fn: (value: V, key: K, collection: this) => boolean): boolean;\n\tpublic every<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): boolean;\n\tpublic every(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): boolean {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (!fn(val, key, this)) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Applies a function to produce a single value. Identical in behavior to\n\t * [Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n\t * @param {Function} fn Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\n\t * and `collection`\n\t * @param {*} [initialValue] Starting value for the accumulator\n\t * @returns {*}\n\t * @example collection.reduce((acc, guild) => acc + guild.memberCount, 0);\n\t */\n\tpublic reduce<T>(fn: (accumulator: T, value: V, key: K, collection: this) => T, initialValue?: T): T {\n\t\tlet accumulator!: T;\n\n\t\tif (typeof initialValue !== 'undefined') {\n\t\t\taccumulator = initialValue;\n\t\t\tfor (const [key, val] of this) accumulator = fn(accumulator, val, key, this);\n\t\t\treturn accumulator;\n\t\t}\n\t\tlet first = true;\n\t\tfor (const [key, val] of this) {\n\t\t\tif (first) {\n\t\t\t\taccumulator = val as unknown as T;\n\t\t\t\tfirst = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\taccumulator = fn(accumulator, val, key, this);\n\t\t}\n\n\t\t// No items iterated.\n\t\tif (first) {\n\t\t\tthrow new TypeError('Reduce of empty collection with no initial value');\n\t\t}\n\n\t\treturn accumulator;\n\t}\n\n\t/**\n\t * Identical to\n\t * [Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\n\t * but returns the collection instead of undefined.\n\t * @param {Function} fn Function to execute for each element\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example\n\t * collection\n\t *  .each(user => console.log(user.username))\n\t *  .filter(user => user.bot)\n\t *  .each(user => console.log(user.username));\n\t */\n\tpublic each(fn: (value: V, key: K, collection: this) => void): this;\n\tpublic each<T>(fn: (this: T, value: V, key: K, collection: this) => void, thisArg: T): this;\n\tpublic each(fn: (value: V, key: K, collection: this) => void, thisArg?: unknown): this {\n\t\tthis.forEach(fn as (value: V, key: K, map: Map<K, V>) => void, thisArg);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Runs a function on the collection and returns the collection.\n\t * @param {Function} fn Function to execute\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example\n\t * collection\n\t *  .tap(coll => console.log(coll.size))\n\t *  .filter(user => user.bot)\n\t *  .tap(coll => console.log(coll.size))\n\t */\n\tpublic tap(fn: (collection: this) => void): this;\n\tpublic tap<T>(fn: (this: T, collection: this) => void, thisArg: T): this;\n\tpublic tap(fn: (collection: this) => void, thisArg?: unknown): this {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfn(this);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates an identical shallow copy of this collection.\n\t * @returns {Collection}\n\t * @example const newColl = someColl.clone();\n\t */\n\tpublic clone(): this {\n\t\treturn new this.constructor[Symbol.species](this) as this;\n\t}\n\n\t/**\n\t * Combines this collection with others into a new collection. None of the source collections are modified.\n\t * @param {...Collection} collections Collections to merge\n\t * @returns {Collection}\n\t * @example const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n\t */\n\tpublic concat(...collections: Collection<K, V>[]): this {\n\t\tconst newColl = this.clone();\n\t\tfor (const coll of collections) {\n\t\t\tfor (const [key, val] of coll) newColl.set(key, val);\n\t\t}\n\t\treturn newColl;\n\t}\n\n\t/**\n\t * Checks if this collection shares identical items with another.\n\t * This is different to checking for equality using equal-signs, because\n\t * the collections may be different objects, but contain the same data.\n\t * @param {Collection} collection Collection to compare with\n\t * @returns {boolean} Whether the collections have identical contents\n\t */\n\tpublic equals(collection: Collection<K, V>): boolean {\n\t\tif (!collection) return false;\n\t\tif (this === collection) return true;\n\t\tif (this.size !== collection.size) return false;\n\t\tfor (const [key, value] of this) {\n\t\t\tif (!collection.has(key) || value !== collection.get(key)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * The sort method sorts the items of a collection in place and returns it.\n\t * The sort is not necessarily stable in Node 10 or older.\n\t * The default sort order is according to string Unicode code points.\n\t * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n\t * If omitted, the collection is sorted according to each character's Unicode code point value,\n\t * according to the string conversion of each element.\n\t * @returns {Collection}\n\t * @example collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n\t */\n\tpublic sort(compareFunction: (firstValue: V, secondValue: V, firstKey: K, secondKey: K) => number = (x, y): number => Number(x > y) || Number(x === y) - 1): this {\n\t\tconst entries = [...this.entries()];\n\t\tentries.sort((a, b): number => compareFunction(a[1], b[1], a[0], b[0]));\n\n\t\t// Perform clean-up\n\t\tsuper.clear();\n\t\tthis._array = null;\n\t\tthis._keyArray = null;\n\n\t\t// Set the new entries\n\t\tfor (const [k, v] of entries) {\n\t\t\tsuper.set(k, v);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The intersect method returns a new structure containing items where the keys are present in both original structures.\n\t * @param {Collection} other The other Collection to filter against\n\t * @returns {Collection}\n\t */\n\tpublic intersect(other: Collection<K, V>): Collection<K, V> {\n\t\treturn other.filter((_, k) => this.has(k));\n\t}\n\n\t/**\n\t * The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.\n\t * @param {Collection} other The other Collection to filter against\n\t * @returns {Collection}\n\t */\n\tpublic difference(other: Collection<K, V>): Collection<K, V> {\n\t\treturn other.filter((_, k) => !this.has(k)).concat(this.filter((_, k) => !other.has(k)));\n\t}\n\n\t/**\n\t * The sorted method sorts the items of a collection and returns it.\n\t * The sort is not necessarily stable in Node 10 or older.\n\t * The default sort order is according to string Unicode code points.\n\t * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n\t * If omitted, the collection is sorted according to each character's Unicode code point value,\n\t * according to the string conversion of each element.\n\t * @returns {Collection}\n\t * @example collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n\t */\n\tpublic sorted(compareFunction: (firstValue: V, secondValue: V, firstKey: K, secondKey: K) => number = (x, y): number => Number(x > y) || Number(x === y) - 1): this {\n\t\treturn (new this.constructor[Symbol.species]([...this.entries()]) as this)\n\t\t\t.sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));\n\t}\n}\n\nmodule.exports = Collection;\nexport { Collection };\nexport default Collection;\n"],"sourceRoot":"/"},"metadata":{},"sourceType":"script"}