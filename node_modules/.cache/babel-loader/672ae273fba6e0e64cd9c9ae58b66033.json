{"ast":null,"code":"'use strict';\n\nconst {\n  RangeError\n} = require('../errors');\n\nconst Util = require('../util/Util');\n/**\n * Represents an embed in a message (image/video preview, rich embed, etc.)\n */\n\n\nclass MessageEmbed {\n  /**\n   * @name MessageEmbed\n   * @kind constructor\n   * @memberof MessageEmbed\n   * @param {MessageEmbed|Object} [data={}] MessageEmbed to clone or raw embed data\n   */\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let skipValidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.setup(data, skipValidation);\n  }\n\n  setup(data, skipValidation) {\n    /**\n     * The type of this embed, either:\n     * * `rich` - a rich embed\n     * * `image` - an image embed\n     * * `video` - a video embed\n     * * `gifv` - a gifv embed\n     * * `article` - an article embed\n     * * `link` - a link embed\n     * @type {string}\n     */\n    this.type = data.type || 'rich';\n    /**\n     * The title of this embed\n     * @type {?string}\n     */\n\n    this.title = 'title' in data ? data.title : null;\n    /**\n     * The description of this embed\n     * @type {?string}\n     */\n\n    this.description = 'description' in data ? data.description : null;\n    /**\n     * The URL of this embed\n     * @type {?string}\n     */\n\n    this.url = 'url' in data ? data.url : null;\n    /**\n     * The color of this embed\n     * @type {?number}\n     */\n\n    this.color = 'color' in data ? Util.resolveColor(data.color) : null;\n    /**\n     * The timestamp of this embed\n     * @type {?number}\n     */\n\n    this.timestamp = 'timestamp' in data ? new Date(data.timestamp).getTime() : null;\n    /**\n     * Represents a field of a MessageEmbed\n     * @typedef {Object} EmbedField\n     * @property {string} name The name of this field\n     * @property {string} value The value of this field\n     * @property {boolean} inline If this field will be displayed inline\n     */\n\n    /**\n     * The fields of this embed\n     * @type {EmbedField[]}\n     */\n\n    this.fields = [];\n\n    if (data.fields) {\n      this.fields = skipValidation ? data.fields.map(Util.cloneObject) : this.constructor.normalizeFields(data.fields);\n    }\n    /**\n     * Represents the thumbnail of a MessageEmbed\n     * @typedef {Object} MessageEmbedThumbnail\n     * @property {string} url URL for this thumbnail\n     * @property {string} proxyURL ProxyURL for this thumbnail\n     * @property {number} height Height of this thumbnail\n     * @property {number} width Width of this thumbnail\n     */\n\n    /**\n     * The thumbnail of this embed (if there is one)\n     * @type {?MessageEmbedThumbnail}\n     */\n\n\n    this.thumbnail = data.thumbnail ? {\n      url: data.thumbnail.url,\n      proxyURL: data.thumbnail.proxyURL || data.thumbnail.proxy_url,\n      height: data.thumbnail.height,\n      width: data.thumbnail.width\n    } : null;\n    /**\n     * Represents the image of a MessageEmbed\n     * @typedef {Object} MessageEmbedImage\n     * @property {string} url URL for this image\n     * @property {string} proxyURL ProxyURL for this image\n     * @property {number} height Height of this image\n     * @property {number} width Width of this image\n     */\n\n    /**\n     * The image of this embed, if there is one\n     * @type {?MessageEmbedImage}\n     */\n\n    this.image = data.image ? {\n      url: data.image.url,\n      proxyURL: data.image.proxyURL || data.image.proxy_url,\n      height: data.image.height,\n      width: data.image.width\n    } : null;\n    /**\n     * Represents the video of a MessageEmbed\n     * @typedef {Object} MessageEmbedVideo\n     * @property {string} url URL of this video\n     * @property {string} proxyURL ProxyURL for this video\n     * @property {number} height Height of this video\n     * @property {number} width Width of this video\n     */\n\n    /**\n     * The video of this embed (if there is one)\n     * @type {?MessageEmbedVideo}\n     * @readonly\n     */\n\n    this.video = data.video ? {\n      url: data.video.url,\n      proxyURL: data.video.proxyURL || data.video.proxy_url,\n      height: data.video.height,\n      width: data.video.width\n    } : null;\n    /**\n     * Represents the author field of a MessageEmbed\n     * @typedef {Object} MessageEmbedAuthor\n     * @property {string} name The name of this author\n     * @property {string} url URL of this author\n     * @property {string} iconURL URL of the icon for this author\n     * @property {string} proxyIconURL Proxied URL of the icon for this author\n     */\n\n    /**\n     * The author of this embed (if there is one)\n     * @type {?MessageEmbedAuthor}\n     */\n\n    this.author = data.author ? {\n      name: data.author.name,\n      url: data.author.url,\n      iconURL: data.author.iconURL || data.author.icon_url,\n      proxyIconURL: data.author.proxyIconURL || data.author.proxy_icon_url\n    } : null;\n    /**\n     * Represents the provider of a MessageEmbed\n     * @typedef {Object} MessageEmbedProvider\n     * @property {string} name The name of this provider\n     * @property {string} url URL of this provider\n     */\n\n    /**\n     * The provider of this embed (if there is one)\n     * @type {?MessageEmbedProvider}\n     */\n\n    this.provider = data.provider ? {\n      name: data.provider.name,\n      url: data.provider.name\n    } : null;\n    /**\n     * Represents the footer field of a MessageEmbed\n     * @typedef {Object} MessageEmbedFooter\n     * @property {string} text The text of this footer\n     * @property {string} iconURL URL of the icon for this footer\n     * @property {string} proxyIconURL Proxied URL of the icon for this footer\n     */\n\n    /**\n     * The footer of this embed\n     * @type {?MessageEmbedFooter}\n     */\n\n    this.footer = data.footer ? {\n      text: data.footer.text,\n      iconURL: data.footer.iconURL || data.footer.icon_url,\n      proxyIconURL: data.footer.proxyIconURL || data.footer.proxy_icon_url\n    } : null;\n    /**\n     * The files of this embed\n     * @type {Array<FileOptions|string|MessageAttachment>}\n     */\n\n    this.files = data.files || [];\n  }\n  /**\n   * The date displayed on this embed\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return this.timestamp ? new Date(this.timestamp) : null;\n  }\n  /**\n   * The hexadecimal version of the embed color, with a leading hash\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get hexColor() {\n    return this.color ? `#${this.color.toString(16).padStart(6, '0')}` : null;\n  }\n  /**\n   * The accumulated length for the embed title, description, fields and footer text\n   * @type {number}\n   * @readonly\n   */\n\n\n  get length() {\n    return (this.title ? this.title.length : 0) + (this.description ? this.description.length : 0) + (this.fields.length >= 1 ? this.fields.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) : 0) + (this.footer ? this.footer.text.length : 0);\n  }\n  /**\n   * Adds a field to the embed (max 25).\n   * @param {StringResolvable} name The name of this field\n   * @param {StringResolvable} value The value of this field\n   * @param {boolean} [inline=false] If this field will be displayed inline\n   * @returns {MessageEmbed}\n   */\n\n\n  addField(name, value, inline) {\n    return this.addFields({\n      name,\n      value,\n      inline\n    });\n  }\n  /**\n   * Adds fields to the embed (max 25).\n   * @param {...EmbedFieldData|EmbedFieldData[]} fields The fields to add\n   * @returns {MessageEmbed}\n   */\n\n\n  addFields() {\n    for (var _len = arguments.length, fields = new Array(_len), _key = 0; _key < _len; _key++) {\n      fields[_key] = arguments[_key];\n    }\n\n    this.fields.push(...this.constructor.normalizeFields(fields));\n    return this;\n  }\n  /**\n   * Removes, replaces, and inserts fields in the embed (max 25).\n   * @param {number} index The index to start at\n   * @param {number} deleteCount The number of fields to remove\n   * @param {...EmbedFieldData|EmbedFieldData[]} [fields] The replacing field objects\n   * @returns {MessageEmbed}\n   */\n\n\n  spliceFields(index, deleteCount) {\n    for (var _len2 = arguments.length, fields = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      fields[_key2 - 2] = arguments[_key2];\n    }\n\n    this.fields.splice(index, deleteCount, ...this.constructor.normalizeFields(...fields));\n    return this;\n  }\n  /**\n   * Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when\n   * setting an embed image or author/footer icons. Multiple files can be attached.\n   * @param {Array<FileOptions|string|MessageAttachment>} files Files to attach\n   * @returns {MessageEmbed}\n   */\n\n\n  attachFiles(files) {\n    this.files = this.files.concat(files);\n    return this;\n  }\n  /**\n   * Sets the author of this embed.\n   * @param {StringResolvable} name The name of the author\n   * @param {string} [iconURL] The icon URL of the author\n   * @param {string} [url] The URL of the author\n   * @returns {MessageEmbed}\n   */\n\n\n  setAuthor(name, iconURL, url) {\n    this.author = {\n      name: Util.resolveString(name),\n      iconURL,\n      url\n    };\n    return this;\n  }\n  /**\n   * Sets the color of this embed.\n   * @param {ColorResolvable} color The color of the embed\n   * @returns {MessageEmbed}\n   */\n\n\n  setColor(color) {\n    this.color = Util.resolveColor(color);\n    return this;\n  }\n  /**\n   * Sets the description of this embed.\n   * @param {StringResolvable} description The description\n   * @returns {MessageEmbed}\n   */\n\n\n  setDescription(description) {\n    description = Util.resolveString(description);\n    this.description = description;\n    return this;\n  }\n  /**\n   * Sets the footer of this embed.\n   * @param {StringResolvable} text The text of the footer\n   * @param {string} [iconURL] The icon URL of the footer\n   * @returns {MessageEmbed}\n   */\n\n\n  setFooter(text, iconURL) {\n    text = Util.resolveString(text);\n    this.footer = {\n      text,\n      iconURL\n    };\n    return this;\n  }\n  /**\n   * Sets the image of this embed.\n   * @param {string} url The URL of the image\n   * @returns {MessageEmbed}\n   */\n\n\n  setImage(url) {\n    this.image = {\n      url\n    };\n    return this;\n  }\n  /**\n   * Sets the thumbnail of this embed.\n   * @param {string} url The URL of the thumbnail\n   * @returns {MessageEmbed}\n   */\n\n\n  setThumbnail(url) {\n    this.thumbnail = {\n      url\n    };\n    return this;\n  }\n  /**\n   * Sets the timestamp of this embed.\n   * @param {Date|number} [timestamp=Date.now()] The timestamp or date\n   * @returns {MessageEmbed}\n   */\n\n\n  setTimestamp() {\n    let timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    this.timestamp = timestamp;\n    return this;\n  }\n  /**\n   * Sets the title of this embed.\n   * @param {StringResolvable} title The title\n   * @returns {MessageEmbed}\n   */\n\n\n  setTitle(title) {\n    title = Util.resolveString(title);\n    this.title = title;\n    return this;\n  }\n  /**\n   * Sets the URL of this embed.\n   * @param {string} url The URL\n   * @returns {MessageEmbed}\n   */\n\n\n  setURL(url) {\n    this.url = url;\n    return this;\n  }\n  /**\n   * Transforms the embed to a plain object.\n   * @returns {Object} The raw data of this embed\n   */\n\n\n  toJSON() {\n    return {\n      title: this.title,\n      type: 'rich',\n      description: this.description,\n      url: this.url,\n      timestamp: this.timestamp ? new Date(this.timestamp) : null,\n      color: this.color,\n      fields: this.fields,\n      thumbnail: this.thumbnail,\n      image: this.image,\n      author: this.author ? {\n        name: this.author.name,\n        url: this.author.url,\n        icon_url: this.author.iconURL\n      } : null,\n      footer: this.footer ? {\n        text: this.footer.text,\n        icon_url: this.footer.iconURL\n      } : null\n    };\n  }\n  /**\n   * Normalizes field input and resolves strings.\n   * @param {StringResolvable} name The name of the field\n   * @param {StringResolvable} value The value of the field\n   * @param {boolean} [inline=false] Set the field to display inline\n   * @returns {EmbedField}\n   */\n\n\n  static normalizeField(name, value) {\n    let inline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    name = Util.resolveString(name);\n    if (!name) throw new RangeError('EMBED_FIELD_NAME');\n    value = Util.resolveString(value);\n    if (!value) throw new RangeError('EMBED_FIELD_VALUE');\n    return {\n      name,\n      value,\n      inline\n    };\n  }\n  /**\n   * @typedef {Object} EmbedFieldData\n   * @property {StringResolvable} name The name of this field\n   * @property {StringResolvable} value The value of this field\n   * @property {boolean} [inline] If this field will be displayed inline\n   */\n\n  /**\n   * Normalizes field input and resolves strings.\n   * @param  {...EmbedFieldData|EmbedFieldData[]} fields Fields to normalize\n   * @returns {EmbedField[]}\n   */\n\n\n  static normalizeFields() {\n    for (var _len3 = arguments.length, fields = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      fields[_key3] = arguments[_key3];\n    }\n\n    return fields.flat(2).map(field => this.normalizeField(field && field.name, field && field.value, field && typeof field.inline === 'boolean' ? field.inline : false));\n  }\n\n}\n\nmodule.exports = MessageEmbed;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/MessageEmbed.js"],"names":["RangeError","require","Util","MessageEmbed","constructor","data","skipValidation","setup","type","title","description","url","color","resolveColor","timestamp","Date","getTime","fields","map","cloneObject","normalizeFields","thumbnail","proxyURL","proxy_url","height","width","image","video","author","name","iconURL","icon_url","proxyIconURL","proxy_icon_url","provider","footer","text","files","createdAt","hexColor","toString","padStart","length","reduce","prev","curr","value","addField","inline","addFields","push","spliceFields","index","deleteCount","splice","attachFiles","concat","setAuthor","resolveString","setColor","setDescription","setFooter","setImage","setThumbnail","setTimestamp","now","setTitle","setURL","toJSON","normalizeField","flat","field","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { RangeError } = require('../errors');\nconst Util = require('../util/Util');\n\n/**\n * Represents an embed in a message (image/video preview, rich embed, etc.)\n */\nclass MessageEmbed {\n  /**\n   * @name MessageEmbed\n   * @kind constructor\n   * @memberof MessageEmbed\n   * @param {MessageEmbed|Object} [data={}] MessageEmbed to clone or raw embed data\n   */\n\n  constructor(data = {}, skipValidation = false) {\n    this.setup(data, skipValidation);\n  }\n\n  setup(data, skipValidation) {\n    /**\n     * The type of this embed, either:\n     * * `rich` - a rich embed\n     * * `image` - an image embed\n     * * `video` - a video embed\n     * * `gifv` - a gifv embed\n     * * `article` - an article embed\n     * * `link` - a link embed\n     * @type {string}\n     */\n    this.type = data.type || 'rich';\n\n    /**\n     * The title of this embed\n     * @type {?string}\n     */\n    this.title = 'title' in data ? data.title : null;\n\n    /**\n     * The description of this embed\n     * @type {?string}\n     */\n    this.description = 'description' in data ? data.description : null;\n\n    /**\n     * The URL of this embed\n     * @type {?string}\n     */\n    this.url = 'url' in data ? data.url : null;\n\n    /**\n     * The color of this embed\n     * @type {?number}\n     */\n    this.color = 'color' in data ? Util.resolveColor(data.color) : null;\n\n    /**\n     * The timestamp of this embed\n     * @type {?number}\n     */\n    this.timestamp = 'timestamp' in data ? new Date(data.timestamp).getTime() : null;\n\n    /**\n     * Represents a field of a MessageEmbed\n     * @typedef {Object} EmbedField\n     * @property {string} name The name of this field\n     * @property {string} value The value of this field\n     * @property {boolean} inline If this field will be displayed inline\n     */\n\n    /**\n     * The fields of this embed\n     * @type {EmbedField[]}\n     */\n    this.fields = [];\n    if (data.fields) {\n      this.fields = skipValidation ? data.fields.map(Util.cloneObject) : this.constructor.normalizeFields(data.fields);\n    }\n\n    /**\n     * Represents the thumbnail of a MessageEmbed\n     * @typedef {Object} MessageEmbedThumbnail\n     * @property {string} url URL for this thumbnail\n     * @property {string} proxyURL ProxyURL for this thumbnail\n     * @property {number} height Height of this thumbnail\n     * @property {number} width Width of this thumbnail\n     */\n\n    /**\n     * The thumbnail of this embed (if there is one)\n     * @type {?MessageEmbedThumbnail}\n     */\n    this.thumbnail = data.thumbnail\n      ? {\n          url: data.thumbnail.url,\n          proxyURL: data.thumbnail.proxyURL || data.thumbnail.proxy_url,\n          height: data.thumbnail.height,\n          width: data.thumbnail.width,\n        }\n      : null;\n\n    /**\n     * Represents the image of a MessageEmbed\n     * @typedef {Object} MessageEmbedImage\n     * @property {string} url URL for this image\n     * @property {string} proxyURL ProxyURL for this image\n     * @property {number} height Height of this image\n     * @property {number} width Width of this image\n     */\n\n    /**\n     * The image of this embed, if there is one\n     * @type {?MessageEmbedImage}\n     */\n    this.image = data.image\n      ? {\n          url: data.image.url,\n          proxyURL: data.image.proxyURL || data.image.proxy_url,\n          height: data.image.height,\n          width: data.image.width,\n        }\n      : null;\n\n    /**\n     * Represents the video of a MessageEmbed\n     * @typedef {Object} MessageEmbedVideo\n     * @property {string} url URL of this video\n     * @property {string} proxyURL ProxyURL for this video\n     * @property {number} height Height of this video\n     * @property {number} width Width of this video\n     */\n\n    /**\n     * The video of this embed (if there is one)\n     * @type {?MessageEmbedVideo}\n     * @readonly\n     */\n    this.video = data.video\n      ? {\n          url: data.video.url,\n          proxyURL: data.video.proxyURL || data.video.proxy_url,\n          height: data.video.height,\n          width: data.video.width,\n        }\n      : null;\n\n    /**\n     * Represents the author field of a MessageEmbed\n     * @typedef {Object} MessageEmbedAuthor\n     * @property {string} name The name of this author\n     * @property {string} url URL of this author\n     * @property {string} iconURL URL of the icon for this author\n     * @property {string} proxyIconURL Proxied URL of the icon for this author\n     */\n\n    /**\n     * The author of this embed (if there is one)\n     * @type {?MessageEmbedAuthor}\n     */\n    this.author = data.author\n      ? {\n          name: data.author.name,\n          url: data.author.url,\n          iconURL: data.author.iconURL || data.author.icon_url,\n          proxyIconURL: data.author.proxyIconURL || data.author.proxy_icon_url,\n        }\n      : null;\n\n    /**\n     * Represents the provider of a MessageEmbed\n     * @typedef {Object} MessageEmbedProvider\n     * @property {string} name The name of this provider\n     * @property {string} url URL of this provider\n     */\n\n    /**\n     * The provider of this embed (if there is one)\n     * @type {?MessageEmbedProvider}\n     */\n    this.provider = data.provider\n      ? {\n          name: data.provider.name,\n          url: data.provider.name,\n        }\n      : null;\n\n    /**\n     * Represents the footer field of a MessageEmbed\n     * @typedef {Object} MessageEmbedFooter\n     * @property {string} text The text of this footer\n     * @property {string} iconURL URL of the icon for this footer\n     * @property {string} proxyIconURL Proxied URL of the icon for this footer\n     */\n\n    /**\n     * The footer of this embed\n     * @type {?MessageEmbedFooter}\n     */\n    this.footer = data.footer\n      ? {\n          text: data.footer.text,\n          iconURL: data.footer.iconURL || data.footer.icon_url,\n          proxyIconURL: data.footer.proxyIconURL || data.footer.proxy_icon_url,\n        }\n      : null;\n\n    /**\n     * The files of this embed\n     * @type {Array<FileOptions|string|MessageAttachment>}\n     */\n    this.files = data.files || [];\n  }\n\n  /**\n   * The date displayed on this embed\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.timestamp ? new Date(this.timestamp) : null;\n  }\n\n  /**\n   * The hexadecimal version of the embed color, with a leading hash\n   * @type {?string}\n   * @readonly\n   */\n  get hexColor() {\n    return this.color ? `#${this.color.toString(16).padStart(6, '0')}` : null;\n  }\n\n  /**\n   * The accumulated length for the embed title, description, fields and footer text\n   * @type {number}\n   * @readonly\n   */\n  get length() {\n    return (\n      (this.title ? this.title.length : 0) +\n      (this.description ? this.description.length : 0) +\n      (this.fields.length >= 1\n        ? this.fields.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0)\n        : 0) +\n      (this.footer ? this.footer.text.length : 0)\n    );\n  }\n\n  /**\n   * Adds a field to the embed (max 25).\n   * @param {StringResolvable} name The name of this field\n   * @param {StringResolvable} value The value of this field\n   * @param {boolean} [inline=false] If this field will be displayed inline\n   * @returns {MessageEmbed}\n   */\n  addField(name, value, inline) {\n    return this.addFields({ name, value, inline });\n  }\n\n  /**\n   * Adds fields to the embed (max 25).\n   * @param {...EmbedFieldData|EmbedFieldData[]} fields The fields to add\n   * @returns {MessageEmbed}\n   */\n  addFields(...fields) {\n    this.fields.push(...this.constructor.normalizeFields(fields));\n    return this;\n  }\n\n  /**\n   * Removes, replaces, and inserts fields in the embed (max 25).\n   * @param {number} index The index to start at\n   * @param {number} deleteCount The number of fields to remove\n   * @param {...EmbedFieldData|EmbedFieldData[]} [fields] The replacing field objects\n   * @returns {MessageEmbed}\n   */\n  spliceFields(index, deleteCount, ...fields) {\n    this.fields.splice(index, deleteCount, ...this.constructor.normalizeFields(...fields));\n    return this;\n  }\n\n  /**\n   * Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when\n   * setting an embed image or author/footer icons. Multiple files can be attached.\n   * @param {Array<FileOptions|string|MessageAttachment>} files Files to attach\n   * @returns {MessageEmbed}\n   */\n  attachFiles(files) {\n    this.files = this.files.concat(files);\n    return this;\n  }\n\n  /**\n   * Sets the author of this embed.\n   * @param {StringResolvable} name The name of the author\n   * @param {string} [iconURL] The icon URL of the author\n   * @param {string} [url] The URL of the author\n   * @returns {MessageEmbed}\n   */\n  setAuthor(name, iconURL, url) {\n    this.author = { name: Util.resolveString(name), iconURL, url };\n    return this;\n  }\n\n  /**\n   * Sets the color of this embed.\n   * @param {ColorResolvable} color The color of the embed\n   * @returns {MessageEmbed}\n   */\n  setColor(color) {\n    this.color = Util.resolveColor(color);\n    return this;\n  }\n\n  /**\n   * Sets the description of this embed.\n   * @param {StringResolvable} description The description\n   * @returns {MessageEmbed}\n   */\n  setDescription(description) {\n    description = Util.resolveString(description);\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets the footer of this embed.\n   * @param {StringResolvable} text The text of the footer\n   * @param {string} [iconURL] The icon URL of the footer\n   * @returns {MessageEmbed}\n   */\n  setFooter(text, iconURL) {\n    text = Util.resolveString(text);\n    this.footer = { text, iconURL };\n    return this;\n  }\n\n  /**\n   * Sets the image of this embed.\n   * @param {string} url The URL of the image\n   * @returns {MessageEmbed}\n   */\n  setImage(url) {\n    this.image = { url };\n    return this;\n  }\n\n  /**\n   * Sets the thumbnail of this embed.\n   * @param {string} url The URL of the thumbnail\n   * @returns {MessageEmbed}\n   */\n  setThumbnail(url) {\n    this.thumbnail = { url };\n    return this;\n  }\n\n  /**\n   * Sets the timestamp of this embed.\n   * @param {Date|number} [timestamp=Date.now()] The timestamp or date\n   * @returns {MessageEmbed}\n   */\n  setTimestamp(timestamp = Date.now()) {\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    this.timestamp = timestamp;\n    return this;\n  }\n\n  /**\n   * Sets the title of this embed.\n   * @param {StringResolvable} title The title\n   * @returns {MessageEmbed}\n   */\n  setTitle(title) {\n    title = Util.resolveString(title);\n    this.title = title;\n    return this;\n  }\n\n  /**\n   * Sets the URL of this embed.\n   * @param {string} url The URL\n   * @returns {MessageEmbed}\n   */\n  setURL(url) {\n    this.url = url;\n    return this;\n  }\n\n  /**\n   * Transforms the embed to a plain object.\n   * @returns {Object} The raw data of this embed\n   */\n  toJSON() {\n    return {\n      title: this.title,\n      type: 'rich',\n      description: this.description,\n      url: this.url,\n      timestamp: this.timestamp ? new Date(this.timestamp) : null,\n      color: this.color,\n      fields: this.fields,\n      thumbnail: this.thumbnail,\n      image: this.image,\n      author: this.author\n        ? {\n            name: this.author.name,\n            url: this.author.url,\n            icon_url: this.author.iconURL,\n          }\n        : null,\n      footer: this.footer\n        ? {\n            text: this.footer.text,\n            icon_url: this.footer.iconURL,\n          }\n        : null,\n    };\n  }\n\n  /**\n   * Normalizes field input and resolves strings.\n   * @param {StringResolvable} name The name of the field\n   * @param {StringResolvable} value The value of the field\n   * @param {boolean} [inline=false] Set the field to display inline\n   * @returns {EmbedField}\n   */\n  static normalizeField(name, value, inline = false) {\n    name = Util.resolveString(name);\n    if (!name) throw new RangeError('EMBED_FIELD_NAME');\n    value = Util.resolveString(value);\n    if (!value) throw new RangeError('EMBED_FIELD_VALUE');\n    return { name, value, inline };\n  }\n\n  /**\n   * @typedef {Object} EmbedFieldData\n   * @property {StringResolvable} name The name of this field\n   * @property {StringResolvable} value The value of this field\n   * @property {boolean} [inline] If this field will be displayed inline\n   */\n\n  /**\n   * Normalizes field input and resolves strings.\n   * @param  {...EmbedFieldData|EmbedFieldData[]} fields Fields to normalize\n   * @returns {EmbedField[]}\n   */\n  static normalizeFields(...fields) {\n    return fields\n      .flat(2)\n      .map(field =>\n        this.normalizeField(\n          field && field.name,\n          field && field.value,\n          field && typeof field.inline === 'boolean' ? field.inline : false,\n        ),\n      );\n  }\n}\n\nmodule.exports = MessageEmbed;\n"]},"metadata":{},"sourceType":"script"}