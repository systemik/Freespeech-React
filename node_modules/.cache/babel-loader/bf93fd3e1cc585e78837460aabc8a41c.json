{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst {\n  Events\n} = require('../util/Constants');\n\nconst DataResolver = require('../util/DataResolver');\n/**\n * Represents the template for a guild.\n * @extends {Base}\n */\n\n\nclass GuildTemplate extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The raw data for the template\n   */\n  constructor(client, data) {\n    super(client);\n\n    this._patch(data);\n  }\n  /**\n   * Builds or updates the template with the provided data.\n   * @param {Object} data The raw data for the template\n   * @returns {GuildTemplate}\n   * @private\n   */\n\n\n  _patch(data) {\n    /**\n     * The unique code of this template\n     * @type {string}\n     */\n    this.code = data.code;\n    /**\n     * The name of this template\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The description of this template\n     * @type {?string}\n     */\n\n    this.description = data.description;\n    /**\n     * The amount of times this template has been used\n     * @type {number}\n     */\n\n    this.usageCount = data.usage_count;\n    /**\n     * The ID of the user that created this template\n     * @type {Snowflake}\n     */\n\n    this.creatorID = data.creator_id;\n    /**\n     * The user that created this template\n     * @type {User}\n     */\n\n    this.creator = this.client.users.add(data.creator);\n    /**\n     * The time of when this template was created at\n     * @type {Date}\n     */\n\n    this.createdAt = new Date(data.created_at);\n    /**\n     * The time of when this template was last synced to the guild\n     * @type {Date}\n     */\n\n    this.updatedAt = new Date(data.updated_at);\n    /**\n     * The ID of the guild that this template belongs to\n     * @type {Snowflake}\n     */\n\n    this.guildID = data.source_guild_id;\n    /**\n     * The data of the guild that this template would create\n     * @type {Object}\n     * @see {@link https://discord.com/developers/docs/resources/guild#guild-resource}\n     */\n\n    this.serializedGuild = data.serialized_source_guild;\n    /**\n     * Whether this template has unsynced changes\n     * @type {?boolean}\n     */\n\n    this.unSynced = 'is_dirty' in data ? Boolean(data.is_dirty) : null;\n    return this;\n  }\n  /**\n   * Creates a guild based from this template.\n   * <warn>This is only available to bots in fewer than 10 guilds.</warn>\n   * @param {string} name The name of the guild\n   * @param {BufferResolvable|Base64Resolvable} [icon] The icon for the guild\n   * @returns {Promise<Guild>}\n   */\n\n\n  async createGuild(name, icon) {\n    const {\n      client\n    } = this;\n    const data = await client.api.guilds.templates(this.code).post({\n      data: {\n        name,\n        icon: await DataResolver.resolveImage(icon)\n      }\n    }); // eslint-disable-next-line consistent-return\n\n    return new Promise(resolve => {\n      const createdGuild = client.guilds.cache.get(data.id);\n      if (createdGuild) return resolve(createdGuild);\n\n      const resolveGuild = guild => {\n        client.off(Events.GUILD_CREATE, handleGuild);\n        client.decrementMaxListeners();\n        resolve(guild);\n      };\n\n      const handleGuild = guild => {\n        if (guild.id === data.id) {\n          client.clearTimeout(timeout);\n          resolveGuild(guild);\n        }\n      };\n\n      client.incrementMaxListeners();\n      client.on(Events.GUILD_CREATE, handleGuild);\n      const timeout = client.setTimeout(() => resolveGuild(client.guilds.add(data)), 10000);\n    });\n  }\n  /**\n   * Updates the metadata on this template.\n   * @param {Object} options Options for the template\n   * @param {string} [options.name] The name of this template\n   * @param {string} [options.description] The description of this template\n   * @returns {Promise<GuildTemplate>}\n   */\n\n\n  edit() {\n    let {\n      name,\n      description\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.client.api.guilds(this.guildID).templates(this.code).patch({\n      data: {\n        name,\n        description\n      }\n    }).then(data => this._patch(data));\n  }\n  /**\n   * Deletes this template.\n   * @returns {Promise<GuildTemplate>}\n   */\n\n\n  delete() {\n    return this.client.api.guilds(this.guildID).templates(this.code).delete().then(() => this);\n  }\n  /**\n   * Syncs this template to the current state of the guild.\n   * @returns {Promise<GuildTemplate>}\n   */\n\n\n  sync() {\n    return this.client.api.guilds(this.guildID).templates(this.code).put().then(data => this._patch(data));\n  }\n  /**\n   * The timestamp of when this template was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return this.createdAt.getTime();\n  }\n  /**\n   * The timestamp of when this template was last synced to the guild\n   * @type {number}\n   * @readonly\n   */\n\n\n  get updatedTimestamp() {\n    return this.updatedAt.getTime();\n  }\n  /**\n   * The guild that this template belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n\n\n  get guild() {\n    return this.client.guilds.cache.get(this.guildID) || null;\n  }\n  /**\n   * The URL of this template\n   * @type {string}\n   * @readonly\n   */\n\n\n  get url() {\n    return `${this.client.options.http.template}/${this.code}`;\n  }\n  /**\n   * When concatenated with a string, this automatically returns the templates's code instead of the template object.\n   * @returns {string}\n   * @example\n   * // Logs: Template: FKvmczH2HyUf\n   * console.log(`Template: ${guildTemplate}!`);\n   */\n\n\n  toString() {\n    return this.code;\n  }\n\n}\n\nmodule.exports = GuildTemplate;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/GuildTemplate.js"],"names":["Base","require","Events","DataResolver","GuildTemplate","constructor","client","data","_patch","code","name","description","usageCount","usage_count","creatorID","creator_id","creator","users","add","createdAt","Date","created_at","updatedAt","updated_at","guildID","source_guild_id","serializedGuild","serialized_source_guild","unSynced","Boolean","is_dirty","createGuild","icon","api","guilds","templates","post","resolveImage","Promise","resolve","createdGuild","cache","get","id","resolveGuild","guild","off","GUILD_CREATE","handleGuild","decrementMaxListeners","clearTimeout","timeout","incrementMaxListeners","on","setTimeout","edit","patch","then","delete","sync","put","createdTimestamp","getTime","updatedTimestamp","url","options","http","template","toString","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,mBAAD,CAA1B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,sBAAD,CAA5B;AAEA;AACA;AACA;AACA;;;AACA,MAAMG,aAAN,SAA4BJ,IAA5B,CAAiC;AAC/B;AACF;AACA;AACA;AACEK,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;AACxB,UAAMD,MAAN;;AACA,SAAKE,MAAL,CAAYD,IAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,MAAM,CAACD,IAAD,EAAO;AACX;AACJ;AACA;AACA;AACI,SAAKE,IAAL,GAAYF,IAAI,CAACE,IAAjB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,IAAL,GAAYH,IAAI,CAACG,IAAjB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,WAAL,GAAmBJ,IAAI,CAACI,WAAxB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,UAAL,GAAkBL,IAAI,CAACM,WAAvB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,SAAL,GAAiBP,IAAI,CAACQ,UAAtB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,OAAL,GAAe,KAAKV,MAAL,CAAYW,KAAZ,CAAkBC,GAAlB,CAAsBX,IAAI,CAACS,OAA3B,CAAf;AAEA;AACJ;AACA;AACA;;AACI,SAAKG,SAAL,GAAiB,IAAIC,IAAJ,CAASb,IAAI,CAACc,UAAd,CAAjB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,SAAL,GAAiB,IAAIF,IAAJ,CAASb,IAAI,CAACgB,UAAd,CAAjB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,OAAL,GAAejB,IAAI,CAACkB,eAApB;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,eAAL,GAAuBnB,IAAI,CAACoB,uBAA5B;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,QAAL,GAAgB,cAAcrB,IAAd,GAAqBsB,OAAO,CAACtB,IAAI,CAACuB,QAAN,CAA5B,GAA8C,IAA9D;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACmB,QAAXC,WAAW,CAACrB,IAAD,EAAOsB,IAAP,EAAa;AAC5B,UAAM;AAAE1B,MAAAA;AAAF,QAAa,IAAnB;AACA,UAAMC,IAAI,GAAG,MAAMD,MAAM,CAAC2B,GAAP,CAAWC,MAAX,CAAkBC,SAAlB,CAA4B,KAAK1B,IAAjC,EAAuC2B,IAAvC,CAA4C;AAC7D7B,MAAAA,IAAI,EAAE;AACJG,QAAAA,IADI;AAEJsB,QAAAA,IAAI,EAAE,MAAM7B,YAAY,CAACkC,YAAb,CAA0BL,IAA1B;AAFR;AADuD,KAA5C,CAAnB,CAF4B,CAQ5B;;AACA,WAAO,IAAIM,OAAJ,CAAYC,OAAO,IAAI;AAC5B,YAAMC,YAAY,GAAGlC,MAAM,CAAC4B,MAAP,CAAcO,KAAd,CAAoBC,GAApB,CAAwBnC,IAAI,CAACoC,EAA7B,CAArB;AACA,UAAIH,YAAJ,EAAkB,OAAOD,OAAO,CAACC,YAAD,CAAd;;AAElB,YAAMI,YAAY,GAAGC,KAAK,IAAI;AAC5BvC,QAAAA,MAAM,CAACwC,GAAP,CAAW5C,MAAM,CAAC6C,YAAlB,EAAgCC,WAAhC;AACA1C,QAAAA,MAAM,CAAC2C,qBAAP;AACAV,QAAAA,OAAO,CAACM,KAAD,CAAP;AACD,OAJD;;AAMA,YAAMG,WAAW,GAAGH,KAAK,IAAI;AAC3B,YAAIA,KAAK,CAACF,EAAN,KAAapC,IAAI,CAACoC,EAAtB,EAA0B;AACxBrC,UAAAA,MAAM,CAAC4C,YAAP,CAAoBC,OAApB;AACAP,UAAAA,YAAY,CAACC,KAAD,CAAZ;AACD;AACF,OALD;;AAOAvC,MAAAA,MAAM,CAAC8C,qBAAP;AACA9C,MAAAA,MAAM,CAAC+C,EAAP,CAAUnD,MAAM,CAAC6C,YAAjB,EAA+BC,WAA/B;AAEA,YAAMG,OAAO,GAAG7C,MAAM,CAACgD,UAAP,CAAkB,MAAMV,YAAY,CAACtC,MAAM,CAAC4B,MAAP,CAAchB,GAAd,CAAkBX,IAAlB,CAAD,CAApC,EAA+D,KAA/D,CAAhB;AACD,KArBM,CAAP;AAsBD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEgD,EAAAA,IAAI,GAA6B;AAAA,QAA5B;AAAE7C,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAA4B,uEAAJ,EAAI;AAC/B,WAAO,KAAKL,MAAL,CAAY2B,GAAZ,CACJC,MADI,CACG,KAAKV,OADR,EAEJW,SAFI,CAEM,KAAK1B,IAFX,EAGJ+C,KAHI,CAGE;AAAEjD,MAAAA,IAAI,EAAE;AAAEG,QAAAA,IAAF;AAAQC,QAAAA;AAAR;AAAR,KAHF,EAIJ8C,IAJI,CAIClD,IAAI,IAAI,KAAKC,MAAL,CAAYD,IAAZ,CAJT,CAAP;AAKD;AAED;AACF;AACA;AACA;;;AACEmD,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKpD,MAAL,CAAY2B,GAAZ,CACJC,MADI,CACG,KAAKV,OADR,EAEJW,SAFI,CAEM,KAAK1B,IAFX,EAGJiD,MAHI,GAIJD,IAJI,CAIC,MAAM,IAJP,CAAP;AAKD;AAED;AACF;AACA;AACA;;;AACEE,EAAAA,IAAI,GAAG;AACL,WAAO,KAAKrD,MAAL,CAAY2B,GAAZ,CACJC,MADI,CACG,KAAKV,OADR,EAEJW,SAFI,CAEM,KAAK1B,IAFX,EAGJmD,GAHI,GAIJH,IAJI,CAIClD,IAAI,IAAI,KAAKC,MAAL,CAAYD,IAAZ,CAJT,CAAP;AAKD;AAED;AACF;AACA;AACA;AACA;;;AACsB,MAAhBsD,gBAAgB,GAAG;AACrB,WAAO,KAAK1C,SAAL,CAAe2C,OAAf,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACsB,MAAhBC,gBAAgB,GAAG;AACrB,WAAO,KAAKzC,SAAL,CAAewC,OAAf,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACW,MAALjB,KAAK,GAAG;AACV,WAAO,KAAKvC,MAAL,CAAY4B,MAAZ,CAAmBO,KAAnB,CAAyBC,GAAzB,CAA6B,KAAKlB,OAAlC,KAA8C,IAArD;AACD;AAED;AACF;AACA;AACA;AACA;;;AACS,MAAHwC,GAAG,GAAG;AACR,WAAQ,GAAE,KAAK1D,MAAL,CAAY2D,OAAZ,CAAoBC,IAApB,CAAyBC,QAAS,IAAG,KAAK1D,IAAK,EAAzD;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE2D,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAK3D,IAAZ;AACD;;AAnN8B;;AAsNjC4D,MAAM,CAACC,OAAP,GAAiBlE,aAAjB","sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { Events } = require('../util/Constants');\nconst DataResolver = require('../util/DataResolver');\n\n/**\n * Represents the template for a guild.\n * @extends {Base}\n */\nclass GuildTemplate extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The raw data for the template\n   */\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  /**\n   * Builds or updates the template with the provided data.\n   * @param {Object} data The raw data for the template\n   * @returns {GuildTemplate}\n   * @private\n   */\n  _patch(data) {\n    /**\n     * The unique code of this template\n     * @type {string}\n     */\n    this.code = data.code;\n\n    /**\n     * The name of this template\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The description of this template\n     * @type {?string}\n     */\n    this.description = data.description;\n\n    /**\n     * The amount of times this template has been used\n     * @type {number}\n     */\n    this.usageCount = data.usage_count;\n\n    /**\n     * The ID of the user that created this template\n     * @type {Snowflake}\n     */\n    this.creatorID = data.creator_id;\n\n    /**\n     * The user that created this template\n     * @type {User}\n     */\n    this.creator = this.client.users.add(data.creator);\n\n    /**\n     * The time of when this template was created at\n     * @type {Date}\n     */\n    this.createdAt = new Date(data.created_at);\n\n    /**\n     * The time of when this template was last synced to the guild\n     * @type {Date}\n     */\n    this.updatedAt = new Date(data.updated_at);\n\n    /**\n     * The ID of the guild that this template belongs to\n     * @type {Snowflake}\n     */\n    this.guildID = data.source_guild_id;\n\n    /**\n     * The data of the guild that this template would create\n     * @type {Object}\n     * @see {@link https://discord.com/developers/docs/resources/guild#guild-resource}\n     */\n    this.serializedGuild = data.serialized_source_guild;\n\n    /**\n     * Whether this template has unsynced changes\n     * @type {?boolean}\n     */\n    this.unSynced = 'is_dirty' in data ? Boolean(data.is_dirty) : null;\n\n    return this;\n  }\n\n  /**\n   * Creates a guild based from this template.\n   * <warn>This is only available to bots in fewer than 10 guilds.</warn>\n   * @param {string} name The name of the guild\n   * @param {BufferResolvable|Base64Resolvable} [icon] The icon for the guild\n   * @returns {Promise<Guild>}\n   */\n  async createGuild(name, icon) {\n    const { client } = this;\n    const data = await client.api.guilds.templates(this.code).post({\n      data: {\n        name,\n        icon: await DataResolver.resolveImage(icon),\n      },\n    });\n    // eslint-disable-next-line consistent-return\n    return new Promise(resolve => {\n      const createdGuild = client.guilds.cache.get(data.id);\n      if (createdGuild) return resolve(createdGuild);\n\n      const resolveGuild = guild => {\n        client.off(Events.GUILD_CREATE, handleGuild);\n        client.decrementMaxListeners();\n        resolve(guild);\n      };\n\n      const handleGuild = guild => {\n        if (guild.id === data.id) {\n          client.clearTimeout(timeout);\n          resolveGuild(guild);\n        }\n      };\n\n      client.incrementMaxListeners();\n      client.on(Events.GUILD_CREATE, handleGuild);\n\n      const timeout = client.setTimeout(() => resolveGuild(client.guilds.add(data)), 10000);\n    });\n  }\n\n  /**\n   * Updates the metadata on this template.\n   * @param {Object} options Options for the template\n   * @param {string} [options.name] The name of this template\n   * @param {string} [options.description] The description of this template\n   * @returns {Promise<GuildTemplate>}\n   */\n  edit({ name, description } = {}) {\n    return this.client.api\n      .guilds(this.guildID)\n      .templates(this.code)\n      .patch({ data: { name, description } })\n      .then(data => this._patch(data));\n  }\n\n  /**\n   * Deletes this template.\n   * @returns {Promise<GuildTemplate>}\n   */\n  delete() {\n    return this.client.api\n      .guilds(this.guildID)\n      .templates(this.code)\n      .delete()\n      .then(() => this);\n  }\n\n  /**\n   * Syncs this template to the current state of the guild.\n   * @returns {Promise<GuildTemplate>}\n   */\n  sync() {\n    return this.client.api\n      .guilds(this.guildID)\n      .templates(this.code)\n      .put()\n      .then(data => this._patch(data));\n  }\n\n  /**\n   * The timestamp of when this template was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return this.createdAt.getTime();\n  }\n\n  /**\n   * The timestamp of when this template was last synced to the guild\n   * @type {number}\n   * @readonly\n   */\n  get updatedTimestamp() {\n    return this.updatedAt.getTime();\n  }\n\n  /**\n   * The guild that this template belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.cache.get(this.guildID) || null;\n  }\n\n  /**\n   * The URL of this template\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `${this.client.options.http.template}/${this.code}`;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the templates's code instead of the template object.\n   * @returns {string}\n   * @example\n   * // Logs: Template: FKvmczH2HyUf\n   * console.log(`Template: ${guildTemplate}!`);\n   */\n  toString() {\n    return this.code;\n  }\n}\n\nmodule.exports = GuildTemplate;\n"]},"metadata":{},"sourceType":"script"}