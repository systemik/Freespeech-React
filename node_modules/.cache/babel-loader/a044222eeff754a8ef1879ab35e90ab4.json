{"ast":null,"code":"'use strict';\n\nconst Emoji = require('./Emoji');\n/**\n * Parent class for {@link GuildEmoji} and {@link GuildPreviewEmoji}.\n * @extends {Emoji}\n * @abstract\n */\n\n\nclass BaseGuildEmoji extends Emoji {\n  constructor(client, data, guild) {\n    super(client, data);\n    /**\n     * The guild this emoji is a part of\n     * @type {Guild|GuildPreview}\n     */\n\n    this.guild = guild;\n    this.requireColons = null;\n    this.managed = null;\n    this.available = null;\n    /**\n     * Array of role ids this emoji is active for\n     * @name BaseGuildEmoji#_roles\n     * @type {Snowflake[]}\n     * @private\n     */\n\n    Object.defineProperty(this, '_roles', {\n      value: [],\n      writable: true\n    });\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if (data.name) this.name = data.name;\n\n    if (typeof data.require_colons !== 'undefined') {\n      /**\n       * Whether or not this emoji requires colons surrounding it\n       * @type {?boolean}\n       */\n      this.requiresColons = data.require_colons;\n    }\n\n    if (typeof data.managed !== 'undefined') {\n      /**\n       * Whether this emoji is managed by an external service\n       * @type {?boolean}\n       */\n      this.managed = data.managed;\n    }\n\n    if (typeof data.available !== 'undefined') {\n      /**\n       * Whether this emoji is available\n       * @type {?boolean}\n       */\n      this.available = data.available;\n    }\n\n    if (data.roles) this._roles = data.roles;\n  }\n\n}\n\nmodule.exports = BaseGuildEmoji;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/BaseGuildEmoji.js"],"names":["Emoji","require","BaseGuildEmoji","constructor","client","data","guild","requireColons","managed","available","Object","defineProperty","value","writable","_patch","name","require_colons","requiresColons","roles","_roles","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,cAAN,SAA6BF,KAA7B,CAAmC;AACjCG,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAsB;AAC/B,UAAMF,MAAN,EAAcC,IAAd;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,KAAL,GAAaA,KAAb;AAEA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,SAAL,GAAiB,IAAjB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACIC,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,QAAQ,EAAE;AAAvB,KAAtC;;AAEA,SAAKC,MAAL,CAAYT,IAAZ;AACD;;AAEDS,EAAAA,MAAM,CAACT,IAAD,EAAO;AACX,QAAIA,IAAI,CAACU,IAAT,EAAe,KAAKA,IAAL,GAAYV,IAAI,CAACU,IAAjB;;AAEf,QAAI,OAAOV,IAAI,CAACW,cAAZ,KAA+B,WAAnC,EAAgD;AAC9C;AACN;AACA;AACA;AACM,WAAKC,cAAL,GAAsBZ,IAAI,CAACW,cAA3B;AACD;;AAED,QAAI,OAAOX,IAAI,CAACG,OAAZ,KAAwB,WAA5B,EAAyC;AACvC;AACN;AACA;AACA;AACM,WAAKA,OAAL,GAAeH,IAAI,CAACG,OAApB;AACD;;AAED,QAAI,OAAOH,IAAI,CAACI,SAAZ,KAA0B,WAA9B,EAA2C;AACzC;AACN;AACA;AACA;AACM,WAAKA,SAAL,GAAiBJ,IAAI,CAACI,SAAtB;AACD;;AAED,QAAIJ,IAAI,CAACa,KAAT,EAAgB,KAAKC,MAAL,GAAcd,IAAI,CAACa,KAAnB;AACjB;;AArDgC;;AAwDnCE,MAAM,CAACC,OAAP,GAAiBnB,cAAjB","sourcesContent":["'use strict';\n\nconst Emoji = require('./Emoji');\n\n/**\n * Parent class for {@link GuildEmoji} and {@link GuildPreviewEmoji}.\n * @extends {Emoji}\n * @abstract\n */\nclass BaseGuildEmoji extends Emoji {\n  constructor(client, data, guild) {\n    super(client, data);\n\n    /**\n     * The guild this emoji is a part of\n     * @type {Guild|GuildPreview}\n     */\n    this.guild = guild;\n\n    this.requireColons = null;\n    this.managed = null;\n    this.available = null;\n\n    /**\n     * Array of role ids this emoji is active for\n     * @name BaseGuildEmoji#_roles\n     * @type {Snowflake[]}\n     * @private\n     */\n    Object.defineProperty(this, '_roles', { value: [], writable: true });\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if (data.name) this.name = data.name;\n\n    if (typeof data.require_colons !== 'undefined') {\n      /**\n       * Whether or not this emoji requires colons surrounding it\n       * @type {?boolean}\n       */\n      this.requiresColons = data.require_colons;\n    }\n\n    if (typeof data.managed !== 'undefined') {\n      /**\n       * Whether this emoji is managed by an external service\n       * @type {?boolean}\n       */\n      this.managed = data.managed;\n    }\n\n    if (typeof data.available !== 'undefined') {\n      /**\n       * Whether this emoji is available\n       * @type {?boolean}\n       */\n      this.available = data.available;\n    }\n\n    if (data.roles) this._roles = data.roles;\n  }\n}\n\nmodule.exports = BaseGuildEmoji;\n"]},"metadata":{},"sourceType":"script"}