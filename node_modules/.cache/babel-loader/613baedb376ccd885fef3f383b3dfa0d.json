{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst Channel = require('../../structures/Channel');\n\nconst {\n  ChannelTypes\n} = require('../../util/Constants');\n\nclass ChannelUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    let channel = client.channels.cache.get(data.id);\n\n    if (channel) {\n      const old = channel._update(data);\n\n      if (ChannelTypes[channel.type.toUpperCase()] !== data.type) {\n        const newChannel = Channel.create(this.client, data, channel.guild);\n\n        for (const [id, message] of channel.messages.cache) newChannel.messages.cache.set(id, message);\n\n        newChannel._typing = new Map(channel._typing);\n        channel = newChannel;\n        this.client.channels.cache.set(channel.id, channel);\n      }\n\n      return {\n        old,\n        updated: channel\n      };\n    }\n\n    return {};\n  }\n\n}\n\nmodule.exports = ChannelUpdateAction;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/client/actions/ChannelUpdate.js"],"names":["Action","require","Channel","ChannelTypes","ChannelUpdateAction","handle","data","client","channel","channels","cache","get","id","old","_update","type","toUpperCase","newChannel","create","guild","message","messages","set","_typing","Map","updated","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,0BAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAmBF,OAAO,CAAC,sBAAD,CAAhC;;AAEA,MAAMG,mBAAN,SAAkCJ,MAAlC,CAAyC;AACvCK,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAMC,MAAM,GAAG,KAAKA,MAApB;AAEA,QAAIC,OAAO,GAAGD,MAAM,CAACE,QAAP,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA0BL,IAAI,CAACM,EAA/B,CAAd;;AACA,QAAIJ,OAAJ,EAAa;AACX,YAAMK,GAAG,GAAGL,OAAO,CAACM,OAAR,CAAgBR,IAAhB,CAAZ;;AAEA,UAAIH,YAAY,CAACK,OAAO,CAACO,IAAR,CAAaC,WAAb,EAAD,CAAZ,KAA6CV,IAAI,CAACS,IAAtD,EAA4D;AAC1D,cAAME,UAAU,GAAGf,OAAO,CAACgB,MAAR,CAAe,KAAKX,MAApB,EAA4BD,IAA5B,EAAkCE,OAAO,CAACW,KAA1C,CAAnB;;AACA,aAAK,MAAM,CAACP,EAAD,EAAKQ,OAAL,CAAX,IAA4BZ,OAAO,CAACa,QAAR,CAAiBX,KAA7C,EAAoDO,UAAU,CAACI,QAAX,CAAoBX,KAApB,CAA0BY,GAA1B,CAA8BV,EAA9B,EAAkCQ,OAAlC;;AACpDH,QAAAA,UAAU,CAACM,OAAX,GAAqB,IAAIC,GAAJ,CAAQhB,OAAO,CAACe,OAAhB,CAArB;AACAf,QAAAA,OAAO,GAAGS,UAAV;AACA,aAAKV,MAAL,CAAYE,QAAZ,CAAqBC,KAArB,CAA2BY,GAA3B,CAA+Bd,OAAO,CAACI,EAAvC,EAA2CJ,OAA3C;AACD;;AAED,aAAO;AACLK,QAAAA,GADK;AAELY,QAAAA,OAAO,EAAEjB;AAFJ,OAAP;AAID;;AAED,WAAO,EAAP;AACD;;AAvBsC;;AA0BzCkB,MAAM,CAACC,OAAP,GAAiBvB,mBAAjB","sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst Channel = require('../../structures/Channel');\nconst { ChannelTypes } = require('../../util/Constants');\n\nclass ChannelUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    let channel = client.channels.cache.get(data.id);\n    if (channel) {\n      const old = channel._update(data);\n\n      if (ChannelTypes[channel.type.toUpperCase()] !== data.type) {\n        const newChannel = Channel.create(this.client, data, channel.guild);\n        for (const [id, message] of channel.messages.cache) newChannel.messages.cache.set(id, message);\n        newChannel._typing = new Map(channel._typing);\n        channel = newChannel;\n        this.client.channels.cache.set(channel.id, channel);\n      }\n\n      return {\n        old,\n        updated: channel,\n      };\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = ChannelUpdateAction;\n"]},"metadata":{},"sourceType":"script"}