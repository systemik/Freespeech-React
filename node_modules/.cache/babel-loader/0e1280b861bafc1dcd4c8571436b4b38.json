{"ast":null,"code":"'use strict';\n\nconst GuildEmoji = require('./GuildEmoji');\n\nconst ReactionEmoji = require('./ReactionEmoji');\n\nconst ReactionUserManager = require('../managers/ReactionUserManager');\n\nconst Util = require('../util/Util');\n/**\n * Represents a reaction to a message.\n */\n\n\nclass MessageReaction {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the message reaction\n   * @param {Message} message The message the reaction refers to\n   */\n  constructor(client, data, message) {\n    /**\n     * The client that instantiated this message reaction\n     * @name MessageReaction#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n    /**\n     * The message that this reaction refers to\n     * @type {Message}\n     */\n\n    this.message = message;\n    /**\n     * A manager of the users that have given this reaction\n     * @type {ReactionUserManager}\n     */\n\n    this.users = new ReactionUserManager(client, undefined, this);\n    this._emoji = new ReactionEmoji(this, data.emoji);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    // eslint-disable-next-line eqeqeq\n    if (this.count == undefined) {\n      /**\n       * The number of people that have given the same reaction\n       * @type {?number}\n       */\n      this.count = data.count;\n    }\n    /**\n     * Whether the client has given this reaction\n     * @type {boolean}\n     */\n\n\n    this.me = data.me;\n  }\n  /**\n   * Removes all users from this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n\n\n  async remove() {\n    await this.client.api.channels(this.message.channel.id).messages(this.message.id).reactions(this._emoji.identifier).delete();\n    return this;\n  }\n  /**\n   * The emoji of this reaction, either an GuildEmoji object for known custom emojis, or a ReactionEmoji\n   * object which has fewer properties. Whatever the prototype of the emoji, it will still have\n   * `name`, `id`, `identifier` and `toString()`\n   * @type {GuildEmoji|ReactionEmoji}\n   * @readonly\n   */\n\n\n  get emoji() {\n    if (this._emoji instanceof GuildEmoji) return this._emoji; // Check to see if the emoji has become known to the client\n\n    if (this._emoji.id) {\n      const emojis = this.message.client.emojis.cache;\n\n      if (emojis.has(this._emoji.id)) {\n        const emoji = emojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n    }\n\n    return this._emoji;\n  }\n  /**\n   * Whether or not this reaction is a partial\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get partial() {\n    return this.count === null;\n  }\n  /**\n   * Fetch this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n\n\n  async fetch() {\n    const message = await this.message.fetch();\n    const existing = message.reactions.cache.get(this.emoji.id || this.emoji.name); // The reaction won't get set when it has been completely removed\n\n    this._patch(existing || {\n      count: 0\n    });\n\n    return this;\n  }\n\n  toJSON() {\n    return Util.flatten(this, {\n      emoji: 'emojiID',\n      message: 'messageID'\n    });\n  }\n\n  _add(user) {\n    if (this.partial) return;\n    this.users.cache.set(user.id, user);\n    if (!this.me || user.id !== this.message.client.user.id || this.count === 0) this.count++;\n    if (!this.me) this.me = user.id === this.message.client.user.id;\n  }\n\n  _remove(user) {\n    if (this.partial) return;\n    this.users.cache.delete(user.id);\n    if (!this.me || user.id !== this.message.client.user.id) this.count--;\n    if (user.id === this.message.client.user.id) this.me = false;\n\n    if (this.count <= 0 && this.users.cache.size === 0) {\n      this.message.reactions.cache.delete(this.emoji.id || this.emoji.name);\n    }\n  }\n\n}\n\nmodule.exports = MessageReaction;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/MessageReaction.js"],"names":["GuildEmoji","require","ReactionEmoji","ReactionUserManager","Util","MessageReaction","constructor","client","data","message","Object","defineProperty","value","users","undefined","_emoji","emoji","_patch","count","me","remove","api","channels","channel","id","messages","reactions","identifier","delete","emojis","cache","has","get","partial","fetch","existing","name","toJSON","flatten","_add","user","set","_remove","size","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst GuildEmoji = require('./GuildEmoji');\nconst ReactionEmoji = require('./ReactionEmoji');\nconst ReactionUserManager = require('../managers/ReactionUserManager');\nconst Util = require('../util/Util');\n\n/**\n * Represents a reaction to a message.\n */\nclass MessageReaction {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} data The data for the message reaction\n   * @param {Message} message The message the reaction refers to\n   */\n  constructor(client, data, message) {\n    /**\n     * The client that instantiated this message reaction\n     * @name MessageReaction#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n    /**\n     * The message that this reaction refers to\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * A manager of the users that have given this reaction\n     * @type {ReactionUserManager}\n     */\n    this.users = new ReactionUserManager(client, undefined, this);\n\n    this._emoji = new ReactionEmoji(this, data.emoji);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    // eslint-disable-next-line eqeqeq\n    if (this.count == undefined) {\n      /**\n       * The number of people that have given the same reaction\n       * @type {?number}\n       */\n      this.count = data.count;\n    }\n\n    /**\n     * Whether the client has given this reaction\n     * @type {boolean}\n     */\n    this.me = data.me;\n  }\n\n  /**\n   * Removes all users from this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async remove() {\n    await this.client.api\n      .channels(this.message.channel.id)\n      .messages(this.message.id)\n      .reactions(this._emoji.identifier)\n      .delete();\n    return this;\n  }\n\n  /**\n   * The emoji of this reaction, either an GuildEmoji object for known custom emojis, or a ReactionEmoji\n   * object which has fewer properties. Whatever the prototype of the emoji, it will still have\n   * `name`, `id`, `identifier` and `toString()`\n   * @type {GuildEmoji|ReactionEmoji}\n   * @readonly\n   */\n  get emoji() {\n    if (this._emoji instanceof GuildEmoji) return this._emoji;\n    // Check to see if the emoji has become known to the client\n    if (this._emoji.id) {\n      const emojis = this.message.client.emojis.cache;\n      if (emojis.has(this._emoji.id)) {\n        const emoji = emojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n    }\n    return this._emoji;\n  }\n\n  /**\n   * Whether or not this reaction is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.count === null;\n  }\n\n  /**\n   * Fetch this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async fetch() {\n    const message = await this.message.fetch();\n    const existing = message.reactions.cache.get(this.emoji.id || this.emoji.name);\n    // The reaction won't get set when it has been completely removed\n    this._patch(existing || { count: 0 });\n    return this;\n  }\n\n  toJSON() {\n    return Util.flatten(this, { emoji: 'emojiID', message: 'messageID' });\n  }\n\n  _add(user) {\n    if (this.partial) return;\n    this.users.cache.set(user.id, user);\n    if (!this.me || user.id !== this.message.client.user.id || this.count === 0) this.count++;\n    if (!this.me) this.me = user.id === this.message.client.user.id;\n  }\n\n  _remove(user) {\n    if (this.partial) return;\n    this.users.cache.delete(user.id);\n    if (!this.me || user.id !== this.message.client.user.id) this.count--;\n    if (user.id === this.message.client.user.id) this.me = false;\n    if (this.count <= 0 && this.users.cache.size === 0) {\n      this.message.reactions.cache.delete(this.emoji.id || this.emoji.name);\n    }\n  }\n}\n\nmodule.exports = MessageReaction;\n"]},"metadata":{},"sourceType":"script"}