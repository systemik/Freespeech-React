{"ast":null,"code":"'use strict';\n\nconst BaseManager = require('./BaseManager');\n\nconst {\n  TypeError\n} = require('../errors');\n\nconst GuildEmoji = require('../structures/GuildEmoji');\n\nconst ReactionEmoji = require('../structures/ReactionEmoji');\n\nconst Collection = require('../util/Collection');\n\nconst DataResolver = require('../util/DataResolver');\n\nconst {\n  parseEmoji\n} = require('../util/Util');\n/**\n * Manages API methods for GuildEmojis and stores their cache.\n * @extends {BaseManager}\n */\n\n\nclass GuildEmojiManager extends BaseManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable, GuildEmoji);\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n\n    this.guild = guild;\n  }\n  /**\n   * The cache of GuildEmojis\n   * @type {Collection<Snowflake, GuildEmoji>}\n   * @name GuildEmojiManager#cache\n   */\n\n\n  add(data, cache) {\n    return super.add(data, cache, {\n      extras: [this.guild]\n    });\n  }\n  /**\n   * Creates a new custom emoji in the guild.\n   * @param {BufferResolvable|Base64Resolvable} attachment The image for the emoji\n   * @param {string} name The name for the emoji\n   * @param {Object} [options] Options\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} [options.roles] Roles to limit the emoji to\n   * @param {string} [options.reason] Reason for creating the emoji\n   * @returns {Promise<Emoji>} The created emoji\n   * @example\n   * // Create a new emoji from a url\n   * guild.emojis.create('https://i.imgur.com/w3duR07.png', 'rip')\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   * @example\n   * // Create a new emoji from a file on your computer\n   * guild.emojis.create('./memes/banana.png', 'banana')\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   */\n\n\n  async create(attachment, name) {\n    let {\n      roles,\n      reason\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    attachment = await DataResolver.resolveImage(attachment);\n    if (!attachment) throw new TypeError('REQ_RESOURCE_TYPE');\n    const data = {\n      image: attachment,\n      name\n    };\n\n    if (roles) {\n      data.roles = [];\n\n      for (let role of roles instanceof Collection ? roles.values() : roles) {\n        role = this.guild.roles.resolve(role);\n\n        if (!role) {\n          return Promise.reject(new TypeError('INVALID_TYPE', 'options.roles', 'Array or Collection of Roles or Snowflakes', true));\n        }\n\n        data.roles.push(role.id);\n      }\n    }\n\n    return this.client.api.guilds(this.guild.id).emojis.post({\n      data,\n      reason\n    }).then(emoji => this.client.actions.GuildEmojiCreate.handle(this.guild, emoji).emoji);\n  }\n  /**\n   * Data that can be resolved into an GuildEmoji object. This can be:\n   * * A custom emoji ID\n   * * A GuildEmoji object\n   * * A ReactionEmoji object\n   * @typedef {Snowflake|GuildEmoji|ReactionEmoji} EmojiResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji object.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?GuildEmoji}\n   */\n\n\n  resolve(emoji) {\n    if (emoji instanceof ReactionEmoji) return super.resolve(emoji.id);\n    return super.resolve(emoji);\n  }\n  /**\n   * Resolves an EmojiResolvable to an Emoji ID string.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?Snowflake}\n   */\n\n\n  resolveID(emoji) {\n    if (emoji instanceof ReactionEmoji) return emoji.id;\n    return super.resolveID(emoji);\n  }\n  /**\n   * Data that can be resolved to give an emoji identifier. This can be:\n   * * The unicode representation of an emoji\n   * * The `<a:name:id>`, `<:name:id>`, `:name:id` or `a:name:id` emoji identifier string of an emoji\n   * * An EmojiResolvable\n   * @typedef {string|EmojiResolvable} EmojiIdentifierResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an emoji identifier.\n   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n   * @returns {?string}\n   */\n\n\n  resolveIdentifier(emoji) {\n    const emojiResolvable = this.resolve(emoji);\n    if (emojiResolvable) return emojiResolvable.identifier;\n    if (emoji instanceof ReactionEmoji) return emoji.identifier;\n\n    if (typeof emoji === 'string') {\n      const res = parseEmoji(emoji);\n\n      if (res && res.name.length) {\n        emoji = `${res.animated ? 'a:' : ''}${res.name}${res.id ? `:${res.id}` : ''}`;\n      }\n\n      if (!emoji.includes('%')) return encodeURIComponent(emoji);else return emoji;\n    }\n\n    return null;\n  }\n\n}\n\nmodule.exports = GuildEmojiManager;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/managers/GuildEmojiManager.js"],"names":["BaseManager","require","TypeError","GuildEmoji","ReactionEmoji","Collection","DataResolver","parseEmoji","GuildEmojiManager","constructor","guild","iterable","client","add","data","cache","extras","create","attachment","name","roles","reason","resolveImage","image","role","values","resolve","Promise","reject","push","id","api","guilds","emojis","post","then","emoji","actions","GuildEmojiCreate","handle","resolveID","resolveIdentifier","emojiResolvable","identifier","res","length","animated","includes","encodeURIComponent","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst { TypeError } = require('../errors');\nconst GuildEmoji = require('../structures/GuildEmoji');\nconst ReactionEmoji = require('../structures/ReactionEmoji');\nconst Collection = require('../util/Collection');\nconst DataResolver = require('../util/DataResolver');\nconst { parseEmoji } = require('../util/Util');\n\n/**\n * Manages API methods for GuildEmojis and stores their cache.\n * @extends {BaseManager}\n */\nclass GuildEmojiManager extends BaseManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable, GuildEmoji);\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of GuildEmojis\n   * @type {Collection<Snowflake, GuildEmoji>}\n   * @name GuildEmojiManager#cache\n   */\n\n  add(data, cache) {\n    return super.add(data, cache, { extras: [this.guild] });\n  }\n\n  /**\n   * Creates a new custom emoji in the guild.\n   * @param {BufferResolvable|Base64Resolvable} attachment The image for the emoji\n   * @param {string} name The name for the emoji\n   * @param {Object} [options] Options\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} [options.roles] Roles to limit the emoji to\n   * @param {string} [options.reason] Reason for creating the emoji\n   * @returns {Promise<Emoji>} The created emoji\n   * @example\n   * // Create a new emoji from a url\n   * guild.emojis.create('https://i.imgur.com/w3duR07.png', 'rip')\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   * @example\n   * // Create a new emoji from a file on your computer\n   * guild.emojis.create('./memes/banana.png', 'banana')\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   */\n  async create(attachment, name, { roles, reason } = {}) {\n    attachment = await DataResolver.resolveImage(attachment);\n    if (!attachment) throw new TypeError('REQ_RESOURCE_TYPE');\n\n    const data = { image: attachment, name };\n    if (roles) {\n      data.roles = [];\n      for (let role of roles instanceof Collection ? roles.values() : roles) {\n        role = this.guild.roles.resolve(role);\n        if (!role) {\n          return Promise.reject(\n            new TypeError('INVALID_TYPE', 'options.roles', 'Array or Collection of Roles or Snowflakes', true),\n          );\n        }\n        data.roles.push(role.id);\n      }\n    }\n\n    return this.client.api\n      .guilds(this.guild.id)\n      .emojis.post({ data, reason })\n      .then(emoji => this.client.actions.GuildEmojiCreate.handle(this.guild, emoji).emoji);\n  }\n\n  /**\n   * Data that can be resolved into an GuildEmoji object. This can be:\n   * * A custom emoji ID\n   * * A GuildEmoji object\n   * * A ReactionEmoji object\n   * @typedef {Snowflake|GuildEmoji|ReactionEmoji} EmojiResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji object.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?GuildEmoji}\n   */\n  resolve(emoji) {\n    if (emoji instanceof ReactionEmoji) return super.resolve(emoji.id);\n    return super.resolve(emoji);\n  }\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji ID string.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveID(emoji) {\n    if (emoji instanceof ReactionEmoji) return emoji.id;\n    return super.resolveID(emoji);\n  }\n\n  /**\n   * Data that can be resolved to give an emoji identifier. This can be:\n   * * The unicode representation of an emoji\n   * * The `<a:name:id>`, `<:name:id>`, `:name:id` or `a:name:id` emoji identifier string of an emoji\n   * * An EmojiResolvable\n   * @typedef {string|EmojiResolvable} EmojiIdentifierResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an emoji identifier.\n   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n   * @returns {?string}\n   */\n  resolveIdentifier(emoji) {\n    const emojiResolvable = this.resolve(emoji);\n    if (emojiResolvable) return emojiResolvable.identifier;\n    if (emoji instanceof ReactionEmoji) return emoji.identifier;\n    if (typeof emoji === 'string') {\n      const res = parseEmoji(emoji);\n      if (res && res.name.length) {\n        emoji = `${res.animated ? 'a:' : ''}${res.name}${res.id ? `:${res.id}` : ''}`;\n      }\n      if (!emoji.includes('%')) return encodeURIComponent(emoji);\n      else return emoji;\n    }\n    return null;\n  }\n}\n\nmodule.exports = GuildEmojiManager;\n"]},"metadata":{},"sourceType":"script"}