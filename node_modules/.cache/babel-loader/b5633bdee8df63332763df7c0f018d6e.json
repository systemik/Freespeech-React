{"ast":null,"code":"'use strict';\n\nconst Collection = require('../../../util/Collection');\n\nconst {\n  Events\n} = require('../../../util/Constants');\n\nmodule.exports = (client, _ref) => {\n  let {\n    d: data\n  } = _ref;\n  const guild = client.guilds.cache.get(data.guild_id);\n  if (!guild) return;\n  const members = new Collection();\n\n  for (const member of data.members) members.set(member.user.id, guild.members.add(member));\n\n  if (data.presences) {\n    for (const presence of data.presences) guild.presences.add(Object.assign(presence, {\n      guild\n    }));\n  }\n  /**\n   * Emitted whenever a chunk of guild members is received (all members come from the same guild).\n   * @event Client#guildMembersChunk\n   * @param {Collection<Snowflake, GuildMember>} members The members in the chunk\n   * @param {Guild} guild The guild related to the member chunk\n   * @param {Object} chunk Properties of the received chunk\n   * @param {number} chunk.index Index of the received chunk\n   * @param {number} chunk.count Number of chunks the client should receive\n   * @param {?string} chunk.nonce Nonce for this chunk\n   */\n\n\n  client.emit(Events.GUILD_MEMBERS_CHUNK, members, guild, {\n    count: data.chunk_count,\n    index: data.chunk_index,\n    nonce: data.nonce\n  });\n};","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/client/websocket/handlers/GUILD_MEMBERS_CHUNK.js"],"names":["Collection","require","Events","module","exports","client","d","data","guild","guilds","cache","get","guild_id","members","member","set","user","id","add","presences","presence","Object","assign","emit","GUILD_MEMBERS_CHUNK","count","chunk_count","index","chunk_index","nonce"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,0BAAD,CAA1B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,yBAAD,CAA1B;;AAEAE,MAAM,CAACC,OAAP,GAAiB,CAACC,MAAD,WAAyB;AAAA,MAAhB;AAAEC,IAAAA,CAAC,EAAEC;AAAL,GAAgB;AACxC,QAAMC,KAAK,GAAGH,MAAM,CAACI,MAAP,CAAcC,KAAd,CAAoBC,GAApB,CAAwBJ,IAAI,CAACK,QAA7B,CAAd;AACA,MAAI,CAACJ,KAAL,EAAY;AACZ,QAAMK,OAAO,GAAG,IAAIb,UAAJ,EAAhB;;AAEA,OAAK,MAAMc,MAAX,IAAqBP,IAAI,CAACM,OAA1B,EAAmCA,OAAO,CAACE,GAAR,CAAYD,MAAM,CAACE,IAAP,CAAYC,EAAxB,EAA4BT,KAAK,CAACK,OAAN,CAAcK,GAAd,CAAkBJ,MAAlB,CAA5B;;AACnC,MAAIP,IAAI,CAACY,SAAT,EAAoB;AAClB,SAAK,MAAMC,QAAX,IAAuBb,IAAI,CAACY,SAA5B,EAAuCX,KAAK,CAACW,SAAN,CAAgBD,GAAhB,CAAoBG,MAAM,CAACC,MAAP,CAAcF,QAAd,EAAwB;AAAEZ,MAAAA;AAAF,KAAxB,CAApB;AACxC;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEH,EAAAA,MAAM,CAACkB,IAAP,CAAYrB,MAAM,CAACsB,mBAAnB,EAAwCX,OAAxC,EAAiDL,KAAjD,EAAwD;AACtDiB,IAAAA,KAAK,EAAElB,IAAI,CAACmB,WAD0C;AAEtDC,IAAAA,KAAK,EAAEpB,IAAI,CAACqB,WAF0C;AAGtDC,IAAAA,KAAK,EAAEtB,IAAI,CAACsB;AAH0C,GAAxD;AAKD,CAxBD","sourcesContent":["'use strict';\n\nconst Collection = require('../../../util/Collection');\nconst { Events } = require('../../../util/Constants');\n\nmodule.exports = (client, { d: data }) => {\n  const guild = client.guilds.cache.get(data.guild_id);\n  if (!guild) return;\n  const members = new Collection();\n\n  for (const member of data.members) members.set(member.user.id, guild.members.add(member));\n  if (data.presences) {\n    for (const presence of data.presences) guild.presences.add(Object.assign(presence, { guild }));\n  }\n  /**\n   * Emitted whenever a chunk of guild members is received (all members come from the same guild).\n   * @event Client#guildMembersChunk\n   * @param {Collection<Snowflake, GuildMember>} members The members in the chunk\n   * @param {Guild} guild The guild related to the member chunk\n   * @param {Object} chunk Properties of the received chunk\n   * @param {number} chunk.index Index of the received chunk\n   * @param {number} chunk.count Number of chunks the client should receive\n   * @param {?string} chunk.nonce Nonce for this chunk\n   */\n  client.emit(Events.GUILD_MEMBERS_CHUNK, members, guild, {\n    count: data.chunk_count,\n    index: data.chunk_index,\n    nonce: data.nonce,\n  });\n};\n"]},"metadata":{},"sourceType":"script"}