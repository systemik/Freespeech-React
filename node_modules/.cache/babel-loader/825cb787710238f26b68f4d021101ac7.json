{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst {\n  Endpoints\n} = require('../util/Constants');\n\nconst Permissions = require('../util/Permissions');\n/**\n * Represents an invitation to a guild channel.\n * <warn>The only guaranteed properties are `code`, `channel`, and `url`. Other properties can be missing.</warn>\n * @extends {Base}\n */\n\n\nclass Invite extends Base {\n  constructor(client, data) {\n    super(client);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The guild the invite is for\n     * @type {?Guild}\n     */\n    this.guild = data.guild ? this.client.guilds.add(data.guild, false) : null;\n    /**\n     * The code for this invite\n     * @type {string}\n     */\n\n    this.code = data.code;\n    /**\n     * The approximate number of online members of the guild this invite is for\n     * @type {?number}\n     */\n\n    this.presenceCount = 'approximate_presence_count' in data ? data.approximate_presence_count : null;\n    /**\n     * The approximate total number of members of the guild this invite is for\n     * @type {?number}\n     */\n\n    this.memberCount = 'approximate_member_count' in data ? data.approximate_member_count : null;\n    /**\n     * Whether or not this invite is temporary\n     * @type {?boolean}\n     */\n\n    this.temporary = 'temporary' in data ? data.temporary : null;\n    /**\n     * The maximum age of the invite, in seconds, 0 if never expires\n     * @type {?number}\n     */\n\n    this.maxAge = 'max_age' in data ? data.max_age : null;\n    /**\n     * How many times this invite has been used\n     * @type {?number}\n     */\n\n    this.uses = 'uses' in data ? data.uses : null;\n    /**\n     * The maximum uses of this invite\n     * @type {?number}\n     */\n\n    this.maxUses = 'max_uses' in data ? data.max_uses : null;\n    /**\n     * The user who created this invite\n     * @type {?User}\n     */\n\n    this.inviter = data.inviter ? this.client.users.add(data.inviter) : null;\n    /**\n     * The target user for this invite\n     * @type {?User}\n     */\n\n    this.targetUser = data.target_user ? this.client.users.add(data.target_user) : null;\n    /**\n     * The type of the target user:\n     * * 1: STREAM\n     * @typedef {number} TargetUser\n     */\n\n    /**\n     * The target user type\n     * @type {?TargetUser}\n     */\n\n    this.targetUserType = typeof data.target_user_type === 'number' ? data.target_user_type : null;\n    /**\n     * The channel the invite is for\n     * @type {Channel}\n     */\n\n    this.channel = this.client.channels.add(data.channel, this.guild, false);\n    /**\n     * The timestamp the invite was created at\n     * @type {?number}\n     */\n\n    this.createdTimestamp = 'created_at' in data ? new Date(data.created_at).getTime() : null;\n  }\n  /**\n   * The time the invite was created at\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return this.createdTimestamp ? new Date(this.createdTimestamp) : null;\n  }\n  /**\n   * Whether the invite is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get deletable() {\n    const guild = this.guild;\n    if (!guild || !this.client.guilds.cache.has(guild.id)) return false;\n    if (!guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return this.channel.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_CHANNELS, false) || guild.me.permissions.has(Permissions.FLAGS.MANAGE_GUILD);\n  }\n  /**\n   * The timestamp the invite will expire at\n   * @type {?number}\n   * @readonly\n   */\n\n\n  get expiresTimestamp() {\n    return this.createdTimestamp && this.maxAge ? this.createdTimestamp + this.maxAge * 1000 : null;\n  }\n  /**\n   * The time the invite will expire at\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get expiresAt() {\n    const {\n      expiresTimestamp\n    } = this;\n    return expiresTimestamp ? new Date(expiresTimestamp) : null;\n  }\n  /**\n   * The URL to the invite\n   * @type {string}\n   * @readonly\n   */\n\n\n  get url() {\n    return Endpoints.invite(this.client.options.http.invite, this.code);\n  }\n  /**\n   * Deletes this invite.\n   * @param {string} [reason] Reason for deleting this invite\n   * @returns {Promise<Invite>}\n   */\n\n\n  delete(reason) {\n    return this.client.api.invites[this.code].delete({\n      reason\n    }).then(() => this);\n  }\n  /**\n   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Invite: https://discord.gg/A1b2C3\n   * console.log(`Invite: ${invite}`);\n   */\n\n\n  toString() {\n    return this.url;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      url: true,\n      expiresTimestamp: true,\n      presenceCount: false,\n      memberCount: false,\n      uses: false,\n      channel: 'channelID',\n      inviter: 'inviterID',\n      guild: 'guildID'\n    });\n  }\n\n  valueOf() {\n    return this.code;\n  }\n\n}\n\nmodule.exports = Invite;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/Invite.js"],"names":["Base","require","Endpoints","Permissions","Invite","constructor","client","data","_patch","guild","guilds","add","code","presenceCount","approximate_presence_count","memberCount","approximate_member_count","temporary","maxAge","max_age","uses","maxUses","max_uses","inviter","users","targetUser","target_user","targetUserType","target_user_type","channel","channels","createdTimestamp","Date","created_at","getTime","createdAt","deletable","cache","has","id","me","Error","permissionsFor","user","FLAGS","MANAGE_CHANNELS","permissions","MANAGE_GUILD","expiresTimestamp","expiresAt","url","invite","options","http","delete","reason","api","invites","then","toString","toJSON","valueOf","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { Endpoints } = require('../util/Constants');\nconst Permissions = require('../util/Permissions');\n\n/**\n * Represents an invitation to a guild channel.\n * <warn>The only guaranteed properties are `code`, `channel`, and `url`. Other properties can be missing.</warn>\n * @extends {Base}\n */\nclass Invite extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The guild the invite is for\n     * @type {?Guild}\n     */\n    this.guild = data.guild ? this.client.guilds.add(data.guild, false) : null;\n\n    /**\n     * The code for this invite\n     * @type {string}\n     */\n    this.code = data.code;\n\n    /**\n     * The approximate number of online members of the guild this invite is for\n     * @type {?number}\n     */\n    this.presenceCount = 'approximate_presence_count' in data ? data.approximate_presence_count : null;\n\n    /**\n     * The approximate total number of members of the guild this invite is for\n     * @type {?number}\n     */\n    this.memberCount = 'approximate_member_count' in data ? data.approximate_member_count : null;\n\n    /**\n     * Whether or not this invite is temporary\n     * @type {?boolean}\n     */\n    this.temporary = 'temporary' in data ? data.temporary : null;\n\n    /**\n     * The maximum age of the invite, in seconds, 0 if never expires\n     * @type {?number}\n     */\n    this.maxAge = 'max_age' in data ? data.max_age : null;\n\n    /**\n     * How many times this invite has been used\n     * @type {?number}\n     */\n    this.uses = 'uses' in data ? data.uses : null;\n\n    /**\n     * The maximum uses of this invite\n     * @type {?number}\n     */\n    this.maxUses = 'max_uses' in data ? data.max_uses : null;\n\n    /**\n     * The user who created this invite\n     * @type {?User}\n     */\n    this.inviter = data.inviter ? this.client.users.add(data.inviter) : null;\n\n    /**\n     * The target user for this invite\n     * @type {?User}\n     */\n    this.targetUser = data.target_user ? this.client.users.add(data.target_user) : null;\n\n    /**\n     * The type of the target user:\n     * * 1: STREAM\n     * @typedef {number} TargetUser\n     */\n\n    /**\n     * The target user type\n     * @type {?TargetUser}\n     */\n    this.targetUserType = typeof data.target_user_type === 'number' ? data.target_user_type : null;\n\n    /**\n     * The channel the invite is for\n     * @type {Channel}\n     */\n    this.channel = this.client.channels.add(data.channel, this.guild, false);\n\n    /**\n     * The timestamp the invite was created at\n     * @type {?number}\n     */\n    this.createdTimestamp = 'created_at' in data ? new Date(data.created_at).getTime() : null;\n  }\n\n  /**\n   * The time the invite was created at\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.createdTimestamp ? new Date(this.createdTimestamp) : null;\n  }\n\n  /**\n   * Whether the invite is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    const guild = this.guild;\n    if (!guild || !this.client.guilds.cache.has(guild.id)) return false;\n    if (!guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return (\n      this.channel.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_CHANNELS, false) ||\n      guild.me.permissions.has(Permissions.FLAGS.MANAGE_GUILD)\n    );\n  }\n\n  /**\n   * The timestamp the invite will expire at\n   * @type {?number}\n   * @readonly\n   */\n  get expiresTimestamp() {\n    return this.createdTimestamp && this.maxAge ? this.createdTimestamp + this.maxAge * 1000 : null;\n  }\n\n  /**\n   * The time the invite will expire at\n   * @type {?Date}\n   * @readonly\n   */\n  get expiresAt() {\n    const { expiresTimestamp } = this;\n    return expiresTimestamp ? new Date(expiresTimestamp) : null;\n  }\n\n  /**\n   * The URL to the invite\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return Endpoints.invite(this.client.options.http.invite, this.code);\n  }\n\n  /**\n   * Deletes this invite.\n   * @param {string} [reason] Reason for deleting this invite\n   * @returns {Promise<Invite>}\n   */\n  delete(reason) {\n    return this.client.api.invites[this.code].delete({ reason }).then(() => this);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Invite: https://discord.gg/A1b2C3\n   * console.log(`Invite: ${invite}`);\n   */\n  toString() {\n    return this.url;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      url: true,\n      expiresTimestamp: true,\n      presenceCount: false,\n      memberCount: false,\n      uses: false,\n      channel: 'channelID',\n      inviter: 'inviterID',\n      guild: 'guildID',\n    });\n  }\n\n  valueOf() {\n    return this.code;\n  }\n}\n\nmodule.exports = Invite;\n"]},"metadata":{},"sourceType":"script"}