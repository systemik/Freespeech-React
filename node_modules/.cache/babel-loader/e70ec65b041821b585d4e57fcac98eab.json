{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst TeamMember = require('./TeamMember');\n\nconst Collection = require('../util/Collection');\n\nconst Snowflake = require('../util/Snowflake');\n/**\n * Represents a Client OAuth2 Application Team.\n * @extends {Base}\n */\n\n\nclass Team extends Base {\n  constructor(client, data) {\n    super(client);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The ID of the Team\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    /**\n     * The name of the Team\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The Team's icon hash\n     * @type {?string}\n     */\n\n    this.icon = data.icon || null;\n    /**\n     * The Team's owner id\n     * @type {?string}\n     */\n\n    this.ownerID = data.owner_user_id || null;\n    /**\n     * The Team's members\n     * @type {Collection<Snowflake, TeamMember>}\n     */\n\n    this.members = new Collection();\n\n    for (const memberData of data.members) {\n      const member = new TeamMember(this, memberData);\n      this.members.set(member.id, member);\n    }\n  }\n  /**\n   * The owner of this team\n   * @type {?TeamMember}\n   * @readonly\n   */\n\n\n  get owner() {\n    return this.members.get(this.ownerID) || null;\n  }\n  /**\n   * The timestamp the team was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time the team was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * A link to the teams's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string} URL to the icon\n   */\n\n\n  iconURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.icon) return null;\n    return this.client.rest.cdn.TeamIcon(this.id, this.icon, {\n      format,\n      size\n    });\n  }\n  /**\n   * When concatenated with a string, this automatically returns the Team's name instead of the\n   * Team object.\n   * @returns {string}\n   * @example\n   * // Logs: Team name: My Team\n   * console.log(`Team name: ${team}`);\n   */\n\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      createdTimestamp: true\n    });\n  }\n\n}\n\nmodule.exports = Team;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/Team.js"],"names":["Base","require","TeamMember","Collection","Snowflake","Team","constructor","client","data","_patch","id","name","icon","ownerID","owner_user_id","members","memberData","member","set","owner","get","createdTimestamp","deconstruct","timestamp","createdAt","Date","iconURL","format","size","rest","cdn","TeamIcon","toString","toJSON","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,oBAAD,CAA1B;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,mBAAD,CAAzB;AAEA;AACA;AACA;AACA;;;AACA,MAAMI,IAAN,SAAmBL,IAAnB,CAAwB;AACtBM,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;AACxB,UAAMD,MAAN;;AACA,SAAKE,MAAL,CAAYD,IAAZ;AACD;;AAEDC,EAAAA,MAAM,CAACD,IAAD,EAAO;AACX;AACJ;AACA;AACA;AACI,SAAKE,EAAL,GAAUF,IAAI,CAACE,EAAf;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,IAAL,GAAYH,IAAI,CAACG,IAAjB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,IAAL,GAAYJ,IAAI,CAACI,IAAL,IAAa,IAAzB;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,OAAL,GAAeL,IAAI,CAACM,aAAL,IAAsB,IAArC;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,OAAL,GAAe,IAAIZ,UAAJ,EAAf;;AAEA,SAAK,MAAMa,UAAX,IAAyBR,IAAI,CAACO,OAA9B,EAAuC;AACrC,YAAME,MAAM,GAAG,IAAIf,UAAJ,CAAe,IAAf,EAAqBc,UAArB,CAAf;AACA,WAAKD,OAAL,CAAaG,GAAb,CAAiBD,MAAM,CAACP,EAAxB,EAA4BO,MAA5B;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACW,MAALE,KAAK,GAAG;AACV,WAAO,KAAKJ,OAAL,CAAaK,GAAb,CAAiB,KAAKP,OAAtB,KAAkC,IAAzC;AACD;AAED;AACF;AACA;AACA;AACA;;;AACsB,MAAhBQ,gBAAgB,GAAG;AACrB,WAAOjB,SAAS,CAACkB,WAAV,CAAsB,KAAKZ,EAA3B,EAA+Ba,SAAtC;AACD;AAED;AACF;AACA;AACA;AACA;;;AACe,MAATC,SAAS,GAAG;AACd,WAAO,IAAIC,IAAJ,CAAS,KAAKJ,gBAAd,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEK,EAAAA,OAAO,GAAwB;AAAA,QAAvB;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAuB,uEAAJ,EAAI;AAC7B,QAAI,CAAC,KAAKhB,IAAV,EAAgB,OAAO,IAAP;AAChB,WAAO,KAAKL,MAAL,CAAYsB,IAAZ,CAAiBC,GAAjB,CAAqBC,QAArB,CAA8B,KAAKrB,EAAnC,EAAuC,KAAKE,IAA5C,EAAkD;AAAEe,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAlD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEI,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKrB,IAAZ;AACD;;AAEDsB,EAAAA,MAAM,GAAG;AACP,WAAO,MAAMA,MAAN,CAAa;AAAEZ,MAAAA,gBAAgB,EAAE;AAApB,KAAb,CAAP;AACD;;AA9FqB;;AAiGxBa,MAAM,CAACC,OAAP,GAAiB9B,IAAjB","sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst TeamMember = require('./TeamMember');\nconst Collection = require('../util/Collection');\nconst Snowflake = require('../util/Snowflake');\n\n/**\n * Represents a Client OAuth2 Application Team.\n * @extends {Base}\n */\nclass Team extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The ID of the Team\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of the Team\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The Team's icon hash\n     * @type {?string}\n     */\n    this.icon = data.icon || null;\n\n    /**\n     * The Team's owner id\n     * @type {?string}\n     */\n    this.ownerID = data.owner_user_id || null;\n\n    /**\n     * The Team's members\n     * @type {Collection<Snowflake, TeamMember>}\n     */\n    this.members = new Collection();\n\n    for (const memberData of data.members) {\n      const member = new TeamMember(this, memberData);\n      this.members.set(member.id, member);\n    }\n  }\n\n  /**\n   * The owner of this team\n   * @type {?TeamMember}\n   * @readonly\n   */\n  get owner() {\n    return this.members.get(this.ownerID) || null;\n  }\n\n  /**\n   * The timestamp the team was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the team was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the teams's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string} URL to the icon\n   */\n  iconURL({ format, size } = {}) {\n    if (!this.icon) return null;\n    return this.client.rest.cdn.TeamIcon(this.id, this.icon, { format, size });\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the Team's name instead of the\n   * Team object.\n   * @returns {string}\n   * @example\n   * // Logs: Team name: My Team\n   * console.log(`Team name: ${team}`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({ createdTimestamp: true });\n  }\n}\n\nmodule.exports = Team;\n"]},"metadata":{},"sourceType":"script"}