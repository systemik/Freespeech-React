{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst {\n  Events\n} = require('../../util/Constants');\n\nclass GuildDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n    let guild = client.guilds.cache.get(data.id);\n\n    if (guild) {\n      for (const channel of guild.channels.cache.values()) {\n        if (channel.type === 'text') channel.stopTyping(true);\n      }\n\n      if (data.unavailable) {\n        // Guild is unavailable\n        guild.available = false;\n        /**\n         * Emitted whenever a guild becomes unavailable, likely due to a server outage.\n         * @event Client#guildUnavailable\n         * @param {Guild} guild The guild that has become unavailable\n         */\n\n        client.emit(Events.GUILD_UNAVAILABLE, guild); // Stops the GuildDelete packet thinking a guild was actually deleted,\n        // handles emitting of event itself\n\n        return {\n          guild: null\n        };\n      }\n\n      for (const channel of guild.channels.cache.values()) this.client.channels.remove(channel.id);\n\n      if (guild.voice && guild.voice.connection) guild.voice.connection.disconnect(); // Delete guild\n\n      client.guilds.cache.delete(guild.id);\n      guild.deleted = true;\n      /**\n       * Emitted whenever a guild kicks the client or the guild is deleted/left.\n       * @event Client#guildDelete\n       * @param {Guild} guild The guild that was deleted\n       */\n\n      client.emit(Events.GUILD_DELETE, guild);\n      this.deleted.set(guild.id, guild);\n      this.scheduleForDeletion(guild.id);\n    } else {\n      guild = this.deleted.get(data.id) || null;\n    }\n\n    return {\n      guild\n    };\n  }\n\n  scheduleForDeletion(id) {\n    this.client.setTimeout(() => this.deleted.delete(id), this.client.options.restWsBridgeTimeout);\n  }\n\n}\n\nmodule.exports = GuildDeleteAction;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/client/actions/GuildDelete.js"],"names":["Action","require","Events","GuildDeleteAction","constructor","client","deleted","Map","handle","data","guild","guilds","cache","get","id","channel","channels","values","type","stopTyping","unavailable","available","emit","GUILD_UNAVAILABLE","remove","voice","connection","disconnect","delete","GUILD_DELETE","set","scheduleForDeletion","setTimeout","options","restWsBridgeTimeout","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,sBAAD,CAA1B;;AAEA,MAAME,iBAAN,SAAgCH,MAAhC,CAAuC;AACrCI,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,UAAMA,MAAN;AACA,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACD;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAMJ,MAAM,GAAG,KAAKA,MAApB;AAEA,QAAIK,KAAK,GAAGL,MAAM,CAACM,MAAP,CAAcC,KAAd,CAAoBC,GAApB,CAAwBJ,IAAI,CAACK,EAA7B,CAAZ;;AACA,QAAIJ,KAAJ,EAAW;AACT,WAAK,MAAMK,OAAX,IAAsBL,KAAK,CAACM,QAAN,CAAeJ,KAAf,CAAqBK,MAArB,EAAtB,EAAqD;AACnD,YAAIF,OAAO,CAACG,IAAR,KAAiB,MAArB,EAA6BH,OAAO,CAACI,UAAR,CAAmB,IAAnB;AAC9B;;AAED,UAAIV,IAAI,CAACW,WAAT,EAAsB;AACpB;AACAV,QAAAA,KAAK,CAACW,SAAN,GAAkB,KAAlB;AAEA;AACR;AACA;AACA;AACA;;AACQhB,QAAAA,MAAM,CAACiB,IAAP,CAAYpB,MAAM,CAACqB,iBAAnB,EAAsCb,KAAtC,EAToB,CAWpB;AACA;;AACA,eAAO;AACLA,UAAAA,KAAK,EAAE;AADF,SAAP;AAGD;;AAED,WAAK,MAAMK,OAAX,IAAsBL,KAAK,CAACM,QAAN,CAAeJ,KAAf,CAAqBK,MAArB,EAAtB,EAAqD,KAAKZ,MAAL,CAAYW,QAAZ,CAAqBQ,MAArB,CAA4BT,OAAO,CAACD,EAApC;;AACrD,UAAIJ,KAAK,CAACe,KAAN,IAAef,KAAK,CAACe,KAAN,CAAYC,UAA/B,EAA2ChB,KAAK,CAACe,KAAN,CAAYC,UAAZ,CAAuBC,UAAvB,GAxBlC,CA0BT;;AACAtB,MAAAA,MAAM,CAACM,MAAP,CAAcC,KAAd,CAAoBgB,MAApB,CAA2BlB,KAAK,CAACI,EAAjC;AACAJ,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AAEA;AACN;AACA;AACA;AACA;;AACMD,MAAAA,MAAM,CAACiB,IAAP,CAAYpB,MAAM,CAAC2B,YAAnB,EAAiCnB,KAAjC;AAEA,WAAKJ,OAAL,CAAawB,GAAb,CAAiBpB,KAAK,CAACI,EAAvB,EAA2BJ,KAA3B;AACA,WAAKqB,mBAAL,CAAyBrB,KAAK,CAACI,EAA/B;AACD,KAvCD,MAuCO;AACLJ,MAAAA,KAAK,GAAG,KAAKJ,OAAL,CAAaO,GAAb,CAAiBJ,IAAI,CAACK,EAAtB,KAA6B,IAArC;AACD;;AAED,WAAO;AAAEJ,MAAAA;AAAF,KAAP;AACD;;AAEDqB,EAAAA,mBAAmB,CAACjB,EAAD,EAAK;AACtB,SAAKT,MAAL,CAAY2B,UAAZ,CAAuB,MAAM,KAAK1B,OAAL,CAAasB,MAAb,CAAoBd,EAApB,CAA7B,EAAsD,KAAKT,MAAL,CAAY4B,OAAZ,CAAoBC,mBAA1E;AACD;;AA1DoC;;AA6DvCC,MAAM,CAACC,OAAP,GAAiBjC,iBAAjB","sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\n\nclass GuildDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n\n    let guild = client.guilds.cache.get(data.id);\n    if (guild) {\n      for (const channel of guild.channels.cache.values()) {\n        if (channel.type === 'text') channel.stopTyping(true);\n      }\n\n      if (data.unavailable) {\n        // Guild is unavailable\n        guild.available = false;\n\n        /**\n         * Emitted whenever a guild becomes unavailable, likely due to a server outage.\n         * @event Client#guildUnavailable\n         * @param {Guild} guild The guild that has become unavailable\n         */\n        client.emit(Events.GUILD_UNAVAILABLE, guild);\n\n        // Stops the GuildDelete packet thinking a guild was actually deleted,\n        // handles emitting of event itself\n        return {\n          guild: null,\n        };\n      }\n\n      for (const channel of guild.channels.cache.values()) this.client.channels.remove(channel.id);\n      if (guild.voice && guild.voice.connection) guild.voice.connection.disconnect();\n\n      // Delete guild\n      client.guilds.cache.delete(guild.id);\n      guild.deleted = true;\n\n      /**\n       * Emitted whenever a guild kicks the client or the guild is deleted/left.\n       * @event Client#guildDelete\n       * @param {Guild} guild The guild that was deleted\n       */\n      client.emit(Events.GUILD_DELETE, guild);\n\n      this.deleted.set(guild.id, guild);\n      this.scheduleForDeletion(guild.id);\n    } else {\n      guild = this.deleted.get(data.id) || null;\n    }\n\n    return { guild };\n  }\n\n  scheduleForDeletion(id) {\n    this.client.setTimeout(() => this.deleted.delete(id), this.client.options.restWsBridgeTimeout);\n  }\n}\n\nmodule.exports = GuildDeleteAction;\n"]},"metadata":{},"sourceType":"script"}