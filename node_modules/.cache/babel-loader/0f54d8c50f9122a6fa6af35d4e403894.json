{"ast":null,"code":"'use strict';\n\nconst Collector = require('./interfaces/Collector');\n\nconst Collection = require('../util/Collection');\n\nconst {\n  Events\n} = require('../util/Constants');\n/**\n * @typedef {CollectorOptions} ReactionCollectorOptions\n * @property {number} max The maximum total amount of reactions to collect\n * @property {number} maxEmojis The maximum number of emojis to collect\n * @property {number} maxUsers The maximum number of users to react\n */\n\n/**\n * Collects reactions on messages.\n * Will automatically stop if the message (`'messageDelete'`),\n * channel (`'channelDelete'`), or guild (`'guildDelete'`) are deleted.\n * @extends {Collector}\n */\n\n\nclass ReactionCollector extends Collector {\n  /**\n   * @param {Message} message The message upon which to collect reactions\n   * @param {CollectorFilter} filter The filter to apply to this collector\n   * @param {ReactionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(message, filter) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(message.client, filter, options);\n    /**\n     * The message upon which to collect reactions\n     * @type {Message}\n     */\n\n    this.message = message;\n    /**\n     * The users which have reacted to this message\n     * @type {Collection}\n     */\n\n    this.users = new Collection();\n    /**\n     * The total number of reactions collected\n     * @type {number}\n     */\n\n    this.total = 0;\n    this.empty = this.empty.bind(this);\n    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n    this._handleMessageDeletion = this._handleMessageDeletion.bind(this);\n    this.client.incrementMaxListeners();\n    this.client.on(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n    this.client.on(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n    this.client.on(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n    this.client.on(Events.GUILD_DELETE, this._handleGuildDeletion);\n    this.once('end', () => {\n      this.client.removeListener(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n      this.client.removeListener(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n      this.client.removeListener(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n      this.client.removeListener(Events.GUILD_DELETE, this._handleGuildDeletion);\n      this.client.decrementMaxListeners();\n    });\n    this.on('collect', (reaction, user) => {\n      this.total++;\n      this.users.set(user.id, user);\n    });\n    this.on('remove', (reaction, user) => {\n      this.total--;\n      if (!this.collected.some(r => r.users.cache.has(user.id))) this.users.delete(user.id);\n    });\n  }\n  /**\n   * Handles an incoming reaction for possible collection.\n   * @param {MessageReaction} reaction The reaction to possibly collect\n   * @returns {?Snowflake|string}\n   * @private\n   */\n\n\n  collect(reaction) {\n    /**\n     * Emitted whenever a reaction is collected.\n     * @event ReactionCollector#collect\n     * @param {MessageReaction} reaction The reaction that was collected\n     * @param {User} user The user that added the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n    return ReactionCollector.key(reaction);\n  }\n  /**\n   * Handles a reaction deletion for possible disposal.\n   * @param {MessageReaction} reaction The reaction to possibly dispose of\n   * @param {User} user The user that removed the reaction\n   * @returns {?Snowflake|string}\n   */\n\n\n  dispose(reaction, user) {\n    /**\n     * Emitted when the reaction had all the users removed and the `dispose` option is set to true.\n     * @event ReactionCollector#dispose\n     * @param {MessageReaction} reaction The reaction that was disposed of\n     * @param {User} user The user that removed the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n    /**\n     * Emitted when the reaction had one user removed and the `dispose` option is set to true.\n     * @event ReactionCollector#remove\n     * @param {MessageReaction} reaction The reaction that was removed\n     * @param {User} user The user that removed the reaction\n     */\n\n    if (this.collected.has(ReactionCollector.key(reaction)) && this.users.has(user.id)) {\n      this.emit('remove', reaction, user);\n    }\n\n    return reaction.count ? null : ReactionCollector.key(reaction);\n  }\n  /**\n   * Empties this reaction collector.\n   */\n\n\n  empty() {\n    this.total = 0;\n    this.collected.clear();\n    this.users.clear();\n    this.checkEnd();\n  }\n\n  endReason() {\n    if (this.options.max && this.total >= this.options.max) return 'limit';\n    if (this.options.maxEmojis && this.collected.size >= this.options.maxEmojis) return 'emojiLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return null;\n  }\n  /**\n   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.\n   * @private\n   * @param {Message} message The message that was deleted\n   * @returns {void}\n   */\n\n\n  _handleMessageDeletion(message) {\n    if (message.id === this.message.id) {\n      this.stop('messageDelete');\n    }\n  }\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n\n\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.message.channel.id) {\n      this.stop('channelDelete');\n    }\n  }\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n\n\n  _handleGuildDeletion(guild) {\n    if (this.message.guild && guild.id === this.message.guild.id) {\n      this.stop('guildDelete');\n    }\n  }\n  /**\n   * Gets the collector key for a reaction.\n   * @param {MessageReaction} reaction The message reaction to get the key for\n   * @returns {Snowflake|string}\n   */\n\n\n  static key(reaction) {\n    return reaction.emoji.id || reaction.emoji.name;\n  }\n\n}\n\nmodule.exports = ReactionCollector;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/ReactionCollector.js"],"names":["Collector","require","Collection","Events","ReactionCollector","constructor","message","filter","options","client","users","total","empty","bind","_handleChannelDeletion","_handleGuildDeletion","_handleMessageDeletion","incrementMaxListeners","on","MESSAGE_REACTION_ADD","handleCollect","MESSAGE_REACTION_REMOVE","handleDispose","MESSAGE_REACTION_REMOVE_ALL","MESSAGE_DELETE","CHANNEL_DELETE","GUILD_DELETE","once","removeListener","decrementMaxListeners","reaction","user","set","id","collected","some","r","cache","has","delete","collect","key","dispose","emit","count","clear","checkEnd","endReason","max","maxEmojis","size","maxUsers","stop","channel","guild","emoji","name","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,wBAAD,CAAzB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,oBAAD,CAA1B;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAaF,OAAO,CAAC,mBAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,iBAAN,SAAgCJ,SAAhC,CAA0C;AACxC;AACF;AACA;AACA;AACA;AACEK,EAAAA,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAgC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACzC,UAAMF,OAAO,CAACG,MAAd,EAAsBF,MAAtB,EAA8BC,OAA9B;AAEA;AACJ;AACA;AACA;;AACI,SAAKF,OAAL,GAAeA,OAAf;AAEA;AACJ;AACA;AACA;;AACI,SAAKI,KAAL,GAAa,IAAIR,UAAJ,EAAb;AAEA;AACJ;AACA;AACA;;AACI,SAAKS,KAAL,GAAa,CAAb;AAEA,SAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKC,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BD,IAA5B,CAAiC,IAAjC,CAA9B;AACA,SAAKE,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BF,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKG,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BH,IAA5B,CAAiC,IAAjC,CAA9B;AAEA,SAAKJ,MAAL,CAAYQ,qBAAZ;AACA,SAAKR,MAAL,CAAYS,EAAZ,CAAef,MAAM,CAACgB,oBAAtB,EAA4C,KAAKC,aAAjD;AACA,SAAKX,MAAL,CAAYS,EAAZ,CAAef,MAAM,CAACkB,uBAAtB,EAA+C,KAAKC,aAApD;AACA,SAAKb,MAAL,CAAYS,EAAZ,CAAef,MAAM,CAACoB,2BAAtB,EAAmD,KAAKX,KAAxD;AACA,SAAKH,MAAL,CAAYS,EAAZ,CAAef,MAAM,CAACqB,cAAtB,EAAsC,KAAKR,sBAA3C;AACA,SAAKP,MAAL,CAAYS,EAAZ,CAAef,MAAM,CAACsB,cAAtB,EAAsC,KAAKX,sBAA3C;AACA,SAAKL,MAAL,CAAYS,EAAZ,CAAef,MAAM,CAACuB,YAAtB,EAAoC,KAAKX,oBAAzC;AAEA,SAAKY,IAAL,CAAU,KAAV,EAAiB,MAAM;AACrB,WAAKlB,MAAL,CAAYmB,cAAZ,CAA2BzB,MAAM,CAACgB,oBAAlC,EAAwD,KAAKC,aAA7D;AACA,WAAKX,MAAL,CAAYmB,cAAZ,CAA2BzB,MAAM,CAACkB,uBAAlC,EAA2D,KAAKC,aAAhE;AACA,WAAKb,MAAL,CAAYmB,cAAZ,CAA2BzB,MAAM,CAACoB,2BAAlC,EAA+D,KAAKX,KAApE;AACA,WAAKH,MAAL,CAAYmB,cAAZ,CAA2BzB,MAAM,CAACqB,cAAlC,EAAkD,KAAKR,sBAAvD;AACA,WAAKP,MAAL,CAAYmB,cAAZ,CAA2BzB,MAAM,CAACsB,cAAlC,EAAkD,KAAKX,sBAAvD;AACA,WAAKL,MAAL,CAAYmB,cAAZ,CAA2BzB,MAAM,CAACuB,YAAlC,EAAgD,KAAKX,oBAArD;AACA,WAAKN,MAAL,CAAYoB,qBAAZ;AACD,KARD;AAUA,SAAKX,EAAL,CAAQ,SAAR,EAAmB,CAACY,QAAD,EAAWC,IAAX,KAAoB;AACrC,WAAKpB,KAAL;AACA,WAAKD,KAAL,CAAWsB,GAAX,CAAeD,IAAI,CAACE,EAApB,EAAwBF,IAAxB;AACD,KAHD;AAKA,SAAKb,EAAL,CAAQ,QAAR,EAAkB,CAACY,QAAD,EAAWC,IAAX,KAAoB;AACpC,WAAKpB,KAAL;AACA,UAAI,CAAC,KAAKuB,SAAL,CAAeC,IAAf,CAAoBC,CAAC,IAAIA,CAAC,CAAC1B,KAAF,CAAQ2B,KAAR,CAAcC,GAAd,CAAkBP,IAAI,CAACE,EAAvB,CAAzB,CAAL,EAA2D,KAAKvB,KAAL,CAAW6B,MAAX,CAAkBR,IAAI,CAACE,EAAvB;AAC5D,KAHD;AAID;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEO,EAAAA,OAAO,CAACV,QAAD,EAAW;AAChB;AACJ;AACA;AACA;AACA;AACA;AACI,QAAIA,QAAQ,CAACxB,OAAT,CAAiB2B,EAAjB,KAAwB,KAAK3B,OAAL,CAAa2B,EAAzC,EAA6C,OAAO,IAAP;AAC7C,WAAO7B,iBAAiB,CAACqC,GAAlB,CAAsBX,QAAtB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEY,EAAAA,OAAO,CAACZ,QAAD,EAAWC,IAAX,EAAiB;AACtB;AACJ;AACA;AACA;AACA;AACA;AACI,QAAID,QAAQ,CAACxB,OAAT,CAAiB2B,EAAjB,KAAwB,KAAK3B,OAAL,CAAa2B,EAAzC,EAA6C,OAAO,IAAP;AAE7C;AACJ;AACA;AACA;AACA;AACA;;AACI,QAAI,KAAKC,SAAL,CAAeI,GAAf,CAAmBlC,iBAAiB,CAACqC,GAAlB,CAAsBX,QAAtB,CAAnB,KAAuD,KAAKpB,KAAL,CAAW4B,GAAX,CAAeP,IAAI,CAACE,EAApB,CAA3D,EAAoF;AAClF,WAAKU,IAAL,CAAU,QAAV,EAAoBb,QAApB,EAA8BC,IAA9B;AACD;;AACD,WAAOD,QAAQ,CAACc,KAAT,GAAiB,IAAjB,GAAwBxC,iBAAiB,CAACqC,GAAlB,CAAsBX,QAAtB,CAA/B;AACD;AAED;AACF;AACA;;;AACElB,EAAAA,KAAK,GAAG;AACN,SAAKD,KAAL,GAAa,CAAb;AACA,SAAKuB,SAAL,CAAeW,KAAf;AACA,SAAKnC,KAAL,CAAWmC,KAAX;AACA,SAAKC,QAAL;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,QAAI,KAAKvC,OAAL,CAAawC,GAAb,IAAoB,KAAKrC,KAAL,IAAc,KAAKH,OAAL,CAAawC,GAAnD,EAAwD,OAAO,OAAP;AACxD,QAAI,KAAKxC,OAAL,CAAayC,SAAb,IAA0B,KAAKf,SAAL,CAAegB,IAAf,IAAuB,KAAK1C,OAAL,CAAayC,SAAlE,EAA6E,OAAO,YAAP;AAC7E,QAAI,KAAKzC,OAAL,CAAa2C,QAAb,IAAyB,KAAKzC,KAAL,CAAWwC,IAAX,IAAmB,KAAK1C,OAAL,CAAa2C,QAA7D,EAAuE,OAAO,WAAP;AACvE,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEnC,EAAAA,sBAAsB,CAACV,OAAD,EAAU;AAC9B,QAAIA,OAAO,CAAC2B,EAAR,KAAe,KAAK3B,OAAL,CAAa2B,EAAhC,EAAoC;AAClC,WAAKmB,IAAL,CAAU,eAAV;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEtC,EAAAA,sBAAsB,CAACuC,OAAD,EAAU;AAC9B,QAAIA,OAAO,CAACpB,EAAR,KAAe,KAAK3B,OAAL,CAAa+C,OAAb,CAAqBpB,EAAxC,EAA4C;AAC1C,WAAKmB,IAAL,CAAU,eAAV;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACErC,EAAAA,oBAAoB,CAACuC,KAAD,EAAQ;AAC1B,QAAI,KAAKhD,OAAL,CAAagD,KAAb,IAAsBA,KAAK,CAACrB,EAAN,KAAa,KAAK3B,OAAL,CAAagD,KAAb,CAAmBrB,EAA1D,EAA8D;AAC5D,WAAKmB,IAAL,CAAU,aAAV;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACY,SAAHX,GAAG,CAACX,QAAD,EAAW;AACnB,WAAOA,QAAQ,CAACyB,KAAT,CAAetB,EAAf,IAAqBH,QAAQ,CAACyB,KAAT,CAAeC,IAA3C;AACD;;AArKuC;;AAwK1CC,MAAM,CAACC,OAAP,GAAiBtD,iBAAjB","sourcesContent":["'use strict';\n\nconst Collector = require('./interfaces/Collector');\nconst Collection = require('../util/Collection');\nconst { Events } = require('../util/Constants');\n\n/**\n * @typedef {CollectorOptions} ReactionCollectorOptions\n * @property {number} max The maximum total amount of reactions to collect\n * @property {number} maxEmojis The maximum number of emojis to collect\n * @property {number} maxUsers The maximum number of users to react\n */\n\n/**\n * Collects reactions on messages.\n * Will automatically stop if the message (`'messageDelete'`),\n * channel (`'channelDelete'`), or guild (`'guildDelete'`) are deleted.\n * @extends {Collector}\n */\nclass ReactionCollector extends Collector {\n  /**\n   * @param {Message} message The message upon which to collect reactions\n   * @param {CollectorFilter} filter The filter to apply to this collector\n   * @param {ReactionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(message, filter, options = {}) {\n    super(message.client, filter, options);\n\n    /**\n     * The message upon which to collect reactions\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * The users which have reacted to this message\n     * @type {Collection}\n     */\n    this.users = new Collection();\n\n    /**\n     * The total number of reactions collected\n     * @type {number}\n     */\n    this.total = 0;\n\n    this.empty = this.empty.bind(this);\n    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n    this._handleMessageDeletion = this._handleMessageDeletion.bind(this);\n\n    this.client.incrementMaxListeners();\n    this.client.on(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n    this.client.on(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n    this.client.on(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n    this.client.on(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n    this.client.on(Events.GUILD_DELETE, this._handleGuildDeletion);\n\n    this.once('end', () => {\n      this.client.removeListener(Events.MESSAGE_REACTION_ADD, this.handleCollect);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE, this.handleDispose);\n      this.client.removeListener(Events.MESSAGE_REACTION_REMOVE_ALL, this.empty);\n      this.client.removeListener(Events.MESSAGE_DELETE, this._handleMessageDeletion);\n      this.client.removeListener(Events.CHANNEL_DELETE, this._handleChannelDeletion);\n      this.client.removeListener(Events.GUILD_DELETE, this._handleGuildDeletion);\n      this.client.decrementMaxListeners();\n    });\n\n    this.on('collect', (reaction, user) => {\n      this.total++;\n      this.users.set(user.id, user);\n    });\n\n    this.on('remove', (reaction, user) => {\n      this.total--;\n      if (!this.collected.some(r => r.users.cache.has(user.id))) this.users.delete(user.id);\n    });\n  }\n\n  /**\n   * Handles an incoming reaction for possible collection.\n   * @param {MessageReaction} reaction The reaction to possibly collect\n   * @returns {?Snowflake|string}\n   * @private\n   */\n  collect(reaction) {\n    /**\n     * Emitted whenever a reaction is collected.\n     * @event ReactionCollector#collect\n     * @param {MessageReaction} reaction The reaction that was collected\n     * @param {User} user The user that added the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n    return ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Handles a reaction deletion for possible disposal.\n   * @param {MessageReaction} reaction The reaction to possibly dispose of\n   * @param {User} user The user that removed the reaction\n   * @returns {?Snowflake|string}\n   */\n  dispose(reaction, user) {\n    /**\n     * Emitted when the reaction had all the users removed and the `dispose` option is set to true.\n     * @event ReactionCollector#dispose\n     * @param {MessageReaction} reaction The reaction that was disposed of\n     * @param {User} user The user that removed the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n\n    /**\n     * Emitted when the reaction had one user removed and the `dispose` option is set to true.\n     * @event ReactionCollector#remove\n     * @param {MessageReaction} reaction The reaction that was removed\n     * @param {User} user The user that removed the reaction\n     */\n    if (this.collected.has(ReactionCollector.key(reaction)) && this.users.has(user.id)) {\n      this.emit('remove', reaction, user);\n    }\n    return reaction.count ? null : ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Empties this reaction collector.\n   */\n  empty() {\n    this.total = 0;\n    this.collected.clear();\n    this.users.clear();\n    this.checkEnd();\n  }\n\n  endReason() {\n    if (this.options.max && this.total >= this.options.max) return 'limit';\n    if (this.options.maxEmojis && this.collected.size >= this.options.maxEmojis) return 'emojiLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return null;\n  }\n\n  /**\n   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.\n   * @private\n   * @param {Message} message The message that was deleted\n   * @returns {void}\n   */\n  _handleMessageDeletion(message) {\n    if (message.id === this.message.id) {\n      this.stop('messageDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.message.channel.id) {\n      this.stop('channelDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n  _handleGuildDeletion(guild) {\n    if (this.message.guild && guild.id === this.message.guild.id) {\n      this.stop('guildDelete');\n    }\n  }\n\n  /**\n   * Gets the collector key for a reaction.\n   * @param {MessageReaction} reaction The message reaction to get the key for\n   * @returns {Snowflake|string}\n   */\n  static key(reaction) {\n    return reaction.emoji.id || reaction.emoji.name;\n  }\n}\n\nmodule.exports = ReactionCollector;\n"]},"metadata":{},"sourceType":"script"}