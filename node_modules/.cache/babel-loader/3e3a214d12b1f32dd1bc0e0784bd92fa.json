{"ast":null,"code":"'use strict';\n\nconst {\n  TypeError\n} = require('../errors');\n\nconst Collection = require('../util/Collection');\n/**\n * Manages API methods for roles belonging to emojis and stores their cache.\n */\n\n\nclass GuildEmojiRoleManager {\n  constructor(emoji) {\n    /**\n     * The emoji belonging to this manager\n     * @type {GuildEmoji}\n     */\n    this.emoji = emoji;\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n\n    this.guild = emoji.guild;\n    /**\n     * The client belonging to this manager\n     * @type {Client}\n     * @readonly\n     */\n\n    Object.defineProperty(this, 'client', {\n      value: emoji.client\n    });\n  }\n  /**\n   * The filtered collection of roles of the guild emoji\n   * @type {Collection<Snowflake, Role>}\n   * @private\n   * @readonly\n   */\n\n\n  get _roles() {\n    return this.guild.roles.cache.filter(role => this.emoji._roles.includes(role.id));\n  }\n  /**\n   * The cache of roles belonging to this emoji\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n\n\n  get cache() {\n    return this._roles;\n  }\n  /**\n   * Adds a role (or multiple roles) to the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @returns {Promise<GuildEmoji>}\n   */\n\n\n  add(roleOrRoles) {\n    if (roleOrRoles instanceof Collection) return this.add(roleOrRoles.keyArray());\n    if (!Array.isArray(roleOrRoles)) return this.add([roleOrRoles]);\n    roleOrRoles = roleOrRoles.map(r => this.guild.roles.resolve(r));\n\n    if (roleOrRoles.includes(null)) {\n      return Promise.reject(new TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true));\n    }\n\n    const newRoles = [...new Set(roleOrRoles.concat(...this._roles.values()))];\n    return this.set(newRoles);\n  }\n  /**\n   * Removes a role (or multiple roles) from the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @returns {Promise<GuildEmoji>}\n   */\n\n\n  remove(roleOrRoles) {\n    if (roleOrRoles instanceof Collection) return this.remove(roleOrRoles.keyArray());\n    if (!Array.isArray(roleOrRoles)) return this.remove([roleOrRoles]);\n    roleOrRoles = roleOrRoles.map(r => this.guild.roles.resolveID(r));\n\n    if (roleOrRoles.includes(null)) {\n      return Promise.reject(new TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true));\n    }\n\n    const newRoles = this._roles.keyArray().filter(role => !roleOrRoles.includes(role));\n\n    return this.set(newRoles);\n  }\n  /**\n   * Sets the role(s) that can use this emoji.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to apply\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Set the emoji's roles to a single role\n   * guildEmoji.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all roles from an emoji\n   * guildEmoji.roles.set([])\n   *    .then(console.log)\n   *    .catch(console.error);\n   */\n\n\n  set(roles) {\n    return this.emoji.edit({\n      roles\n    });\n  }\n\n  clone() {\n    const clone = new this.constructor(this.emoji);\n\n    clone._patch(this._roles.keyArray().slice());\n\n    return clone;\n  }\n  /**\n   * Patches the roles for this manager's cache\n   * @param {Snowflake[]} roles The new roles\n   * @private\n   */\n\n\n  _patch(roles) {\n    this.emoji._roles = roles;\n  }\n\n}\n\nmodule.exports = GuildEmojiRoleManager;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/managers/GuildEmojiRoleManager.js"],"names":["TypeError","require","Collection","GuildEmojiRoleManager","constructor","emoji","guild","Object","defineProperty","value","client","_roles","roles","cache","filter","role","includes","id","add","roleOrRoles","keyArray","Array","isArray","map","r","resolve","Promise","reject","newRoles","Set","concat","values","set","remove","resolveID","edit","clone","_patch","slice","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { TypeError } = require('../errors');\nconst Collection = require('../util/Collection');\n\n/**\n * Manages API methods for roles belonging to emojis and stores their cache.\n */\nclass GuildEmojiRoleManager {\n  constructor(emoji) {\n    /**\n     * The emoji belonging to this manager\n     * @type {GuildEmoji}\n     */\n    this.emoji = emoji;\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n    this.guild = emoji.guild;\n    /**\n     * The client belonging to this manager\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: emoji.client });\n  }\n\n  /**\n   * The filtered collection of roles of the guild emoji\n   * @type {Collection<Snowflake, Role>}\n   * @private\n   * @readonly\n   */\n  get _roles() {\n    return this.guild.roles.cache.filter(role => this.emoji._roles.includes(role.id));\n  }\n\n  /**\n   * The cache of roles belonging to this emoji\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get cache() {\n    return this._roles;\n  }\n\n  /**\n   * Adds a role (or multiple roles) to the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @returns {Promise<GuildEmoji>}\n   */\n  add(roleOrRoles) {\n    if (roleOrRoles instanceof Collection) return this.add(roleOrRoles.keyArray());\n    if (!Array.isArray(roleOrRoles)) return this.add([roleOrRoles]);\n    roleOrRoles = roleOrRoles.map(r => this.guild.roles.resolve(r));\n\n    if (roleOrRoles.includes(null)) {\n      return Promise.reject(new TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true));\n    }\n\n    const newRoles = [...new Set(roleOrRoles.concat(...this._roles.values()))];\n    return this.set(newRoles);\n  }\n\n  /**\n   * Removes a role (or multiple roles) from the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @returns {Promise<GuildEmoji>}\n   */\n  remove(roleOrRoles) {\n    if (roleOrRoles instanceof Collection) return this.remove(roleOrRoles.keyArray());\n    if (!Array.isArray(roleOrRoles)) return this.remove([roleOrRoles]);\n    roleOrRoles = roleOrRoles.map(r => this.guild.roles.resolveID(r));\n\n    if (roleOrRoles.includes(null)) {\n      return Promise.reject(new TypeError('INVALID_TYPE', 'roles', 'Array or Collection of Roles or Snowflakes', true));\n    }\n\n    const newRoles = this._roles.keyArray().filter(role => !roleOrRoles.includes(role));\n    return this.set(newRoles);\n  }\n\n  /**\n   * Sets the role(s) that can use this emoji.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to apply\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Set the emoji's roles to a single role\n   * guildEmoji.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all roles from an emoji\n   * guildEmoji.roles.set([])\n   *    .then(console.log)\n   *    .catch(console.error);\n   */\n  set(roles) {\n    return this.emoji.edit({ roles });\n  }\n\n  clone() {\n    const clone = new this.constructor(this.emoji);\n    clone._patch(this._roles.keyArray().slice());\n    return clone;\n  }\n\n  /**\n   * Patches the roles for this manager's cache\n   * @param {Snowflake[]} roles The new roles\n   * @private\n   */\n  _patch(roles) {\n    this.emoji._roles = roles;\n  }\n}\n\nmodule.exports = GuildEmojiRoleManager;\n"]},"metadata":{},"sourceType":"script"}