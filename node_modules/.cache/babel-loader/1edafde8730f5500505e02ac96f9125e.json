{"ast":null,"code":"'use strict';\n\nconst Emoji = require('./Emoji');\n\nconst ActivityFlags = require('../util/ActivityFlags');\n\nconst {\n  ActivityTypes\n} = require('../util/Constants');\n\nconst Util = require('../util/Util');\n/**\n * Activity sent in a message.\n * @typedef {Object} MessageActivity\n * @property {string} [partyID] Id of the party represented in activity\n * @property {number} [type] Type of activity sent\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`offline`** - user is offline or invisible\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} PresenceStatus\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} ClientPresenceStatus\n */\n\n/**\n * Represents a user's presence.\n */\n\n\nclass Presence {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} [data={}] The data for the presence\n   */\n  constructor(client) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /**\n     * The client that instantiated this\n     * @name Presence#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n    /**\n     * The user ID of this presence\n     * @type {Snowflake}\n     */\n\n    this.userID = data.user.id;\n    /**\n     * The guild of this presence\n     * @type {?Guild}\n     */\n\n    this.guild = data.guild || null;\n    this.patch(data);\n  }\n  /**\n   * The user of this presence\n   * @type {?User}\n   * @readonly\n   */\n\n\n  get user() {\n    return this.client.users.cache.get(this.userID) || null;\n  }\n  /**\n   * The member of this presence\n   * @type {?GuildMember}\n   * @readonly\n   */\n\n\n  get member() {\n    return this.guild.members.cache.get(this.userID) || null;\n  }\n\n  patch(data) {\n    /**\n     * The status of this presence\n     * @type {PresenceStatus}\n     */\n    this.status = data.status || this.status || 'offline';\n\n    if (data.activities) {\n      /**\n       * The activities of this presence\n       * @type {Activity[]}\n       */\n      this.activities = data.activities.map(activity => new Activity(this, activity));\n    } else if (data.activity || data.game) {\n      this.activities = [new Activity(this, data.game || data.activity)];\n    } else {\n      this.activities = [];\n    }\n    /**\n     * The devices this presence is on\n     * @type {?Object}\n     * @property {?ClientPresenceStatus} web The current presence in the web application\n     * @property {?ClientPresenceStatus} mobile The current presence in the mobile application\n     * @property {?ClientPresenceStatus} desktop The current presence in the desktop application\n     */\n\n\n    this.clientStatus = data.client_status || null;\n    return this;\n  }\n\n  _clone() {\n    const clone = Object.assign(Object.create(this), this);\n    if (this.activities) clone.activities = this.activities.map(activity => activity._clone());\n    return clone;\n  }\n  /**\n   * Whether this presence is equal to another.\n   * @param {Presence} presence The presence to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(presence) {\n    return this === presence || presence && this.status === presence.status && this.activities.length === presence.activities.length && this.activities.every((activity, index) => activity.equals(presence.activities[index])) && this.clientStatus.web === presence.clientStatus.web && this.clientStatus.mobile === presence.clientStatus.mobile && this.clientStatus.desktop === presence.clientStatus.desktop;\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n\n}\n/**\n * Represents an activity that is part of a user's presence.\n */\n\n\nclass Activity {\n  constructor(presence, data) {\n    Object.defineProperty(this, 'presence', {\n      value: presence\n    });\n    /**\n     * The name of the activity being played\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The type of the activity status\n     * @type {ActivityType}\n     */\n\n    this.type = ActivityTypes[data.type];\n    /**\n     * If the activity is being streamed, a link to the stream\n     * @type {?string}\n     */\n\n    this.url = data.url || null;\n    /**\n     * Details about the activity\n     * @type {?string}\n     */\n\n    this.details = data.details || null;\n    /**\n     * State of the activity\n     * @type {?string}\n     */\n\n    this.state = data.state || null;\n    /**\n     * Application ID associated with this activity\n     * @type {?Snowflake}\n     */\n\n    this.applicationID = data.application_id || null;\n    /**\n     * Timestamps for the activity\n     * @type {?Object}\n     * @property {?Date} start When the activity started\n     * @property {?Date} end When the activity will end\n     */\n\n    this.timestamps = data.timestamps ? {\n      start: data.timestamps.start ? new Date(Number(data.timestamps.start)) : null,\n      end: data.timestamps.end ? new Date(Number(data.timestamps.end)) : null\n    } : null;\n    /**\n     * Party of the activity\n     * @type {?Object}\n     * @property {?string} id ID of the party\n     * @property {number[]} size Size of the party as `[current, max]`\n     */\n\n    this.party = data.party || null;\n    /**\n     * Assets for rich presence\n     * @type {?RichPresenceAssets}\n     */\n\n    this.assets = data.assets ? new RichPresenceAssets(this, data.assets) : null;\n    this.syncID = data.sync_id;\n    /**\n     * Flags that describe the activity\n     * @type {Readonly<ActivityFlags>}\n     */\n\n    this.flags = new ActivityFlags(data.flags).freeze();\n    /**\n     * Emoji for a custom activity\n     * @type {?Emoji}\n     */\n\n    this.emoji = data.emoji ? new Emoji(presence.client, data.emoji) : null;\n    /**\n     * Creation date of the activity\n     * @type {number}\n     */\n\n    this.createdTimestamp = new Date(data.created_at).getTime();\n  }\n  /**\n   * Whether this activity is equal to another activity.\n   * @param {Activity} activity The activity to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(activity) {\n    return this === activity || activity && this.name === activity.name && this.type === activity.type && this.url === activity.url;\n  }\n  /**\n   * The time the activity was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * When concatenated with a string, this automatically returns the activities' name instead of the Activity object.\n   * @returns {string}\n   */\n\n\n  toString() {\n    return this.name;\n  }\n\n  _clone() {\n    return Object.assign(Object.create(this), this);\n  }\n\n}\n/**\n * Assets for a rich presence\n */\n\n\nclass RichPresenceAssets {\n  constructor(activity, assets) {\n    Object.defineProperty(this, 'activity', {\n      value: activity\n    });\n    /**\n     * Hover text for the large image\n     * @type {?string}\n     */\n\n    this.largeText = assets.large_text || null;\n    /**\n     * Hover text for the small image\n     * @type {?string}\n     */\n\n    this.smallText = assets.small_text || null;\n    /**\n     * ID of the large image asset\n     * @type {?Snowflake}\n     */\n\n    this.largeImage = assets.large_image || null;\n    /**\n     * ID of the small image asset\n     * @type {?Snowflake}\n     */\n\n    this.smallImage = assets.small_image || null;\n  }\n  /**\n   * Gets the URL of the small image asset\n   * @param {Object} [options] Options for the image url\n   * @param {string} [options.format] Format of the image\n   * @param {number} [options.size] Size of the image\n   * @returns {?string} The small image URL\n   */\n\n\n  smallImageURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.smallImage) return null;\n    return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationID, this.smallImage, {\n      format,\n      size\n    });\n  }\n  /**\n   * Gets the URL of the large image asset\n   * @param {Object} [options] Options for the image url\n   * @param {string} [options.format] Format of the image\n   * @param {number} [options.size] Size of the image\n   * @returns {?string} The large image URL\n   */\n\n\n  largeImageURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.largeImage) return null;\n\n    if (/^spotify:/.test(this.largeImage)) {\n      return `https://i.scdn.co/image/${this.largeImage.slice(8)}`;\n    } else if (/^twitch:/.test(this.largeImage)) {\n      return `https://static-cdn.jtvnw.net/previews-ttv/live_user_${this.largeImage.slice(7)}.png`;\n    }\n\n    return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationID, this.largeImage, {\n      format,\n      size\n    });\n  }\n\n}\n\nexports.Presence = Presence;\nexports.Activity = Activity;\nexports.RichPresenceAssets = RichPresenceAssets;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/Presence.js"],"names":["Emoji","require","ActivityFlags","ActivityTypes","Util","Presence","constructor","client","data","Object","defineProperty","value","userID","user","id","guild","patch","users","cache","get","member","members","status","activities","map","activity","Activity","game","clientStatus","client_status","_clone","clone","assign","create","equals","presence","length","every","index","web","mobile","desktop","toJSON","flatten","name","type","url","details","state","applicationID","application_id","timestamps","start","Date","Number","end","party","assets","RichPresenceAssets","syncID","sync_id","flags","freeze","emoji","createdTimestamp","created_at","getTime","createdAt","toString","largeText","large_text","smallText","small_text","largeImage","large_image","smallImage","small_image","smallImageURL","format","size","rest","cdn","AppAsset","largeImageURL","test","slice","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Emoji = require('./Emoji');\nconst ActivityFlags = require('../util/ActivityFlags');\nconst { ActivityTypes } = require('../util/Constants');\nconst Util = require('../util/Util');\n\n/**\n * Activity sent in a message.\n * @typedef {Object} MessageActivity\n * @property {string} [partyID] Id of the party represented in activity\n * @property {number} [type] Type of activity sent\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`offline`** - user is offline or invisible\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} PresenceStatus\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} ClientPresenceStatus\n */\n\n/**\n * Represents a user's presence.\n */\nclass Presence {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Object} [data={}] The data for the presence\n   */\n  constructor(client, data = {}) {\n    /**\n     * The client that instantiated this\n     * @name Presence#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n    /**\n     * The user ID of this presence\n     * @type {Snowflake}\n     */\n    this.userID = data.user.id;\n\n    /**\n     * The guild of this presence\n     * @type {?Guild}\n     */\n    this.guild = data.guild || null;\n\n    this.patch(data);\n  }\n\n  /**\n   * The user of this presence\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.cache.get(this.userID) || null;\n  }\n\n  /**\n   * The member of this presence\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.cache.get(this.userID) || null;\n  }\n\n  patch(data) {\n    /**\n     * The status of this presence\n     * @type {PresenceStatus}\n     */\n    this.status = data.status || this.status || 'offline';\n\n    if (data.activities) {\n      /**\n       * The activities of this presence\n       * @type {Activity[]}\n       */\n      this.activities = data.activities.map(activity => new Activity(this, activity));\n    } else if (data.activity || data.game) {\n      this.activities = [new Activity(this, data.game || data.activity)];\n    } else {\n      this.activities = [];\n    }\n\n    /**\n     * The devices this presence is on\n     * @type {?Object}\n     * @property {?ClientPresenceStatus} web The current presence in the web application\n     * @property {?ClientPresenceStatus} mobile The current presence in the mobile application\n     * @property {?ClientPresenceStatus} desktop The current presence in the desktop application\n     */\n    this.clientStatus = data.client_status || null;\n\n    return this;\n  }\n\n  _clone() {\n    const clone = Object.assign(Object.create(this), this);\n    if (this.activities) clone.activities = this.activities.map(activity => activity._clone());\n    return clone;\n  }\n\n  /**\n   * Whether this presence is equal to another.\n   * @param {Presence} presence The presence to compare with\n   * @returns {boolean}\n   */\n  equals(presence) {\n    return (\n      this === presence ||\n      (presence &&\n        this.status === presence.status &&\n        this.activities.length === presence.activities.length &&\n        this.activities.every((activity, index) => activity.equals(presence.activities[index])) &&\n        this.clientStatus.web === presence.clientStatus.web &&\n        this.clientStatus.mobile === presence.clientStatus.mobile &&\n        this.clientStatus.desktop === presence.clientStatus.desktop)\n    );\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\n/**\n * Represents an activity that is part of a user's presence.\n */\nclass Activity {\n  constructor(presence, data) {\n    Object.defineProperty(this, 'presence', { value: presence });\n\n    /**\n     * The name of the activity being played\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The type of the activity status\n     * @type {ActivityType}\n     */\n    this.type = ActivityTypes[data.type];\n\n    /**\n     * If the activity is being streamed, a link to the stream\n     * @type {?string}\n     */\n    this.url = data.url || null;\n\n    /**\n     * Details about the activity\n     * @type {?string}\n     */\n    this.details = data.details || null;\n\n    /**\n     * State of the activity\n     * @type {?string}\n     */\n    this.state = data.state || null;\n\n    /**\n     * Application ID associated with this activity\n     * @type {?Snowflake}\n     */\n    this.applicationID = data.application_id || null;\n\n    /**\n     * Timestamps for the activity\n     * @type {?Object}\n     * @property {?Date} start When the activity started\n     * @property {?Date} end When the activity will end\n     */\n    this.timestamps = data.timestamps\n      ? {\n          start: data.timestamps.start ? new Date(Number(data.timestamps.start)) : null,\n          end: data.timestamps.end ? new Date(Number(data.timestamps.end)) : null,\n        }\n      : null;\n\n    /**\n     * Party of the activity\n     * @type {?Object}\n     * @property {?string} id ID of the party\n     * @property {number[]} size Size of the party as `[current, max]`\n     */\n    this.party = data.party || null;\n\n    /**\n     * Assets for rich presence\n     * @type {?RichPresenceAssets}\n     */\n    this.assets = data.assets ? new RichPresenceAssets(this, data.assets) : null;\n\n    this.syncID = data.sync_id;\n\n    /**\n     * Flags that describe the activity\n     * @type {Readonly<ActivityFlags>}\n     */\n    this.flags = new ActivityFlags(data.flags).freeze();\n\n    /**\n     * Emoji for a custom activity\n     * @type {?Emoji}\n     */\n    this.emoji = data.emoji ? new Emoji(presence.client, data.emoji) : null;\n\n    /**\n     * Creation date of the activity\n     * @type {number}\n     */\n    this.createdTimestamp = new Date(data.created_at).getTime();\n  }\n\n  /**\n   * Whether this activity is equal to another activity.\n   * @param {Activity} activity The activity to compare with\n   * @returns {boolean}\n   */\n  equals(activity) {\n    return (\n      this === activity ||\n      (activity && this.name === activity.name && this.type === activity.type && this.url === activity.url)\n    );\n  }\n\n  /**\n   * The time the activity was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the activities' name instead of the Activity object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n\n  _clone() {\n    return Object.assign(Object.create(this), this);\n  }\n}\n\n/**\n * Assets for a rich presence\n */\nclass RichPresenceAssets {\n  constructor(activity, assets) {\n    Object.defineProperty(this, 'activity', { value: activity });\n\n    /**\n     * Hover text for the large image\n     * @type {?string}\n     */\n    this.largeText = assets.large_text || null;\n\n    /**\n     * Hover text for the small image\n     * @type {?string}\n     */\n    this.smallText = assets.small_text || null;\n\n    /**\n     * ID of the large image asset\n     * @type {?Snowflake}\n     */\n    this.largeImage = assets.large_image || null;\n\n    /**\n     * ID of the small image asset\n     * @type {?Snowflake}\n     */\n    this.smallImage = assets.small_image || null;\n  }\n\n  /**\n   * Gets the URL of the small image asset\n   * @param {Object} [options] Options for the image url\n   * @param {string} [options.format] Format of the image\n   * @param {number} [options.size] Size of the image\n   * @returns {?string} The small image URL\n   */\n  smallImageURL({ format, size } = {}) {\n    if (!this.smallImage) return null;\n    return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationID, this.smallImage, {\n      format,\n      size,\n    });\n  }\n\n  /**\n   * Gets the URL of the large image asset\n   * @param {Object} [options] Options for the image url\n   * @param {string} [options.format] Format of the image\n   * @param {number} [options.size] Size of the image\n   * @returns {?string} The large image URL\n   */\n  largeImageURL({ format, size } = {}) {\n    if (!this.largeImage) return null;\n    if (/^spotify:/.test(this.largeImage)) {\n      return `https://i.scdn.co/image/${this.largeImage.slice(8)}`;\n    } else if (/^twitch:/.test(this.largeImage)) {\n      return `https://static-cdn.jtvnw.net/previews-ttv/live_user_${this.largeImage.slice(7)}.png`;\n    }\n    return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationID, this.largeImage, {\n      format,\n      size,\n    });\n  }\n}\n\nexports.Presence = Presence;\nexports.Activity = Activity;\nexports.RichPresenceAssets = RichPresenceAssets;\n"]},"metadata":{},"sourceType":"script"}