{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst IntegrationApplication = require('./IntegrationApplication');\n/**\n * The information account for an integration\n * @typedef {Object} IntegrationAccount\n * @property {string} id The id of the account\n * @property {string} name The name of the account\n */\n\n/**\n *  Represents a guild integration.\n */\n\n\nclass Integration extends Base {\n  constructor(client, data, guild) {\n    super(client);\n    /**\n     * The guild this integration belongs to\n     * @type {Guild}\n     */\n\n    this.guild = guild;\n    /**\n     * The integration id\n     * @type {Snowflake}\n     */\n\n    this.id = data.id;\n    /**\n     * The integration name\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The integration type (twitch, youtube, etc)\n     * @type {string}\n     */\n\n    this.type = data.type;\n    /**\n     * Whether this integration is enabled\n     * @type {boolean}\n     */\n\n    this.enabled = data.enabled;\n    /**\n     * Whether this integration is syncing\n     * @type {boolean}\n     */\n\n    this.syncing = data.syncing;\n    /**\n     * The role that this integration uses for subscribers\n     * @type {Role}\n     */\n\n    this.role = this.guild.roles.cache.get(data.role_id);\n\n    if (data.user) {\n      /**\n       * The user for this integration\n       * @type {?User}\n       */\n      this.user = this.client.users.add(data.user);\n    } else {\n      this.user = null;\n    }\n    /**\n     * The account integration information\n     * @type {IntegrationAccount}\n     */\n\n\n    this.account = data.account;\n    /**\n     * The last time this integration was last synced\n     * @type {number}\n     */\n\n    this.syncedAt = data.synced_at;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The behavior of expiring subscribers\n     * @type {number}\n     */\n    this.expireBehavior = data.expire_behavior;\n    /**\n     * The grace period before expiring subscribers\n     * @type {number}\n     */\n\n    this.expireGracePeriod = data.expire_grace_period;\n\n    if ('application' in data) {\n      if (this.application) {\n        this.application._patch(data.application);\n      } else {\n        /**\n         * The application for this integration\n         * @type {?IntegrationApplication}\n         */\n        this.application = new IntegrationApplication(this.client, data.application);\n      }\n    } else if (!this.application) {\n      this.application = null;\n    }\n  }\n  /**\n   * Sync this integration\n   * @returns {Promise<Integration>}\n   */\n\n\n  sync() {\n    this.syncing = true;\n    return this.client.api.guilds(this.guild.id).integrations(this.id).post().then(() => {\n      this.syncing = false;\n      this.syncedAt = Date.now();\n      return this;\n    });\n  }\n  /**\n   * The data for editing an integration.\n   * @typedef {Object} IntegrationEditData\n   * @property {number} [expireBehavior] The new behaviour of expiring subscribers\n   * @property {number} [expireGracePeriod] The new grace period before expiring subscribers\n   */\n\n  /**\n   * Edits this integration.\n   * @param {IntegrationEditData} data The data to edit this integration with\n   * @param {string} reason Reason for editing this integration\n   * @returns {Promise<Integration>}\n   */\n\n\n  edit(data, reason) {\n    if ('expireBehavior' in data) {\n      data.expire_behavior = data.expireBehavior;\n      data.expireBehavior = null;\n    }\n\n    if ('expireGracePeriod' in data) {\n      data.expire_grace_period = data.expireGracePeriod;\n      data.expireGracePeriod = null;\n    } // The option enable_emoticons is only available for Twitch at this moment\n\n\n    return this.client.api.guilds(this.guild.id).integrations(this.id).patch({\n      data,\n      reason\n    }).then(() => {\n      this._patch(data);\n\n      return this;\n    });\n  }\n  /**\n   * Deletes this integration.\n   * @returns {Promise<Integration>}\n   * @param {string} [reason] Reason for deleting this integration\n   */\n\n\n  delete(reason) {\n    return this.client.api.guilds(this.guild.id).integrations(this.id).delete({\n      reason\n    }).then(() => this);\n  }\n\n  toJSON() {\n    return super.toJSON({\n      role: 'roleID',\n      guild: 'guildID',\n      user: 'userID'\n    });\n  }\n\n}\n\nmodule.exports = Integration;","map":{"version":3,"sources":["/Users/macbookpro/node_modules/discord.js/src/structures/Integration.js"],"names":["Base","require","IntegrationApplication","Integration","constructor","client","data","guild","id","name","type","enabled","syncing","role","roles","cache","get","role_id","user","users","add","account","syncedAt","synced_at","_patch","expireBehavior","expire_behavior","expireGracePeriod","expire_grace_period","application","sync","api","guilds","integrations","post","then","Date","now","edit","reason","patch","delete","toJSON","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst IntegrationApplication = require('./IntegrationApplication');\n\n/**\n * The information account for an integration\n * @typedef {Object} IntegrationAccount\n * @property {string} id The id of the account\n * @property {string} name The name of the account\n */\n\n/**\n *  Represents a guild integration.\n */\nclass Integration extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild this integration belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The integration id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The integration name\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The integration type (twitch, youtube, etc)\n     * @type {string}\n     */\n    this.type = data.type;\n\n    /**\n     * Whether this integration is enabled\n     * @type {boolean}\n     */\n    this.enabled = data.enabled;\n\n    /**\n     * Whether this integration is syncing\n     * @type {boolean}\n     */\n    this.syncing = data.syncing;\n\n    /**\n     * The role that this integration uses for subscribers\n     * @type {Role}\n     */\n    this.role = this.guild.roles.cache.get(data.role_id);\n\n    if (data.user) {\n      /**\n       * The user for this integration\n       * @type {?User}\n       */\n      this.user = this.client.users.add(data.user);\n    } else {\n      this.user = null;\n    }\n\n    /**\n     * The account integration information\n     * @type {IntegrationAccount}\n     */\n    this.account = data.account;\n\n    /**\n     * The last time this integration was last synced\n     * @type {number}\n     */\n    this.syncedAt = data.synced_at;\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The behavior of expiring subscribers\n     * @type {number}\n     */\n    this.expireBehavior = data.expire_behavior;\n\n    /**\n     * The grace period before expiring subscribers\n     * @type {number}\n     */\n    this.expireGracePeriod = data.expire_grace_period;\n\n    if ('application' in data) {\n      if (this.application) {\n        this.application._patch(data.application);\n      } else {\n        /**\n         * The application for this integration\n         * @type {?IntegrationApplication}\n         */\n        this.application = new IntegrationApplication(this.client, data.application);\n      }\n    } else if (!this.application) {\n      this.application = null;\n    }\n  }\n\n  /**\n   * Sync this integration\n   * @returns {Promise<Integration>}\n   */\n  sync() {\n    this.syncing = true;\n    return this.client.api\n      .guilds(this.guild.id)\n      .integrations(this.id)\n      .post()\n      .then(() => {\n        this.syncing = false;\n        this.syncedAt = Date.now();\n        return this;\n      });\n  }\n\n  /**\n   * The data for editing an integration.\n   * @typedef {Object} IntegrationEditData\n   * @property {number} [expireBehavior] The new behaviour of expiring subscribers\n   * @property {number} [expireGracePeriod] The new grace period before expiring subscribers\n   */\n\n  /**\n   * Edits this integration.\n   * @param {IntegrationEditData} data The data to edit this integration with\n   * @param {string} reason Reason for editing this integration\n   * @returns {Promise<Integration>}\n   */\n  edit(data, reason) {\n    if ('expireBehavior' in data) {\n      data.expire_behavior = data.expireBehavior;\n      data.expireBehavior = null;\n    }\n    if ('expireGracePeriod' in data) {\n      data.expire_grace_period = data.expireGracePeriod;\n      data.expireGracePeriod = null;\n    }\n    // The option enable_emoticons is only available for Twitch at this moment\n    return this.client.api\n      .guilds(this.guild.id)\n      .integrations(this.id)\n      .patch({ data, reason })\n      .then(() => {\n        this._patch(data);\n        return this;\n      });\n  }\n\n  /**\n   * Deletes this integration.\n   * @returns {Promise<Integration>}\n   * @param {string} [reason] Reason for deleting this integration\n   */\n  delete(reason) {\n    return this.client.api\n      .guilds(this.guild.id)\n      .integrations(this.id)\n      .delete({ reason })\n      .then(() => this);\n  }\n\n  toJSON() {\n    return super.toJSON({\n      role: 'roleID',\n      guild: 'guildID',\n      user: 'userID',\n    });\n  }\n}\n\nmodule.exports = Integration;\n"]},"metadata":{},"sourceType":"script"}